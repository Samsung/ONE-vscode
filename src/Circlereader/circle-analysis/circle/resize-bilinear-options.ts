/*
 * Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ResizeBilinearOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ResizeBilinearOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsResizeBilinearOptions(bb: flatbuffers.ByteBuffer, obj?: ResizeBilinearOptions):
      ResizeBilinearOptions {
    return (obj || new ResizeBilinearOptions())
        .__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsResizeBilinearOptions(
      bb: flatbuffers.ByteBuffer, obj?: ResizeBilinearOptions): ResizeBilinearOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ResizeBilinearOptions())
        .__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  alignCorners(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  halfPixelCenters(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startResizeBilinearOptions(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addAlignCorners(builder: flatbuffers.Builder, alignCorners: boolean) {
    builder.addFieldInt8(2, +alignCorners, +false);
  }

  static addHalfPixelCenters(builder: flatbuffers.Builder, halfPixelCenters: boolean) {
    builder.addFieldInt8(3, +halfPixelCenters, +false);
  }

  static endResizeBilinearOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createResizeBilinearOptions(
      builder: flatbuffers.Builder, alignCorners: boolean,
      halfPixelCenters: boolean): flatbuffers.Offset {
    ResizeBilinearOptions.startResizeBilinearOptions(builder);
    ResizeBilinearOptions.addAlignCorners(builder, alignCorners);
    ResizeBilinearOptions.addHalfPixelCenters(builder, halfPixelCenters);
    return ResizeBilinearOptions.endResizeBilinearOptions(builder);
  }
}
