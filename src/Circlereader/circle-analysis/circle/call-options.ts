/*
 * Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class CallOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): CallOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsCallOptions(bb: flatbuffers.ByteBuffer, obj?: CallOptions): CallOptions {
    return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsCallOptions(bb: flatbuffers.ByteBuffer, obj?: CallOptions):
      CallOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  subgraph(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startCallOptions(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addSubgraph(builder: flatbuffers.Builder, subgraph: number) {
    builder.addFieldInt32(0, subgraph, 0);
  }

  static endCallOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createCallOptions(builder: flatbuffers.Builder, subgraph: number): flatbuffers.Offset {
    CallOptions.startCallOptions(builder);
    CallOptions.addSubgraph(builder, subgraph);
    return CallOptions.endCallOptions(builder);
  }
}
