// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {BuiltinOperator} from '../circle/builtin-operator';


export class OperatorCode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): OperatorCode {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsOperatorCode(bb: flatbuffers.ByteBuffer, obj?: OperatorCode): OperatorCode {
    return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsOperatorCode(bb: flatbuffers.ByteBuffer, obj?: OperatorCode):
      OperatorCode {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  builtinCode(): BuiltinOperator {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : BuiltinOperator.ADD;
  }

  customCode(): string|null
  customCode(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null
  customCode(optionalEncoding?: any): string|Uint8Array|null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  version(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 1;
  }

  static startOperatorCode(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addBuiltinCode(builder: flatbuffers.Builder, builtinCode: BuiltinOperator) {
    builder.addFieldInt8(0, builtinCode, BuiltinOperator.ADD);
  }

  static addCustomCode(builder: flatbuffers.Builder, customCodeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, customCodeOffset, 0);
  }

  static addVersion(builder: flatbuffers.Builder, version: number) {
    builder.addFieldInt32(2, version, 1);
  }

  static endOperatorCode(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createOperatorCode(
      builder: flatbuffers.Builder, builtinCode: BuiltinOperator,
      customCodeOffset: flatbuffers.Offset, version: number): flatbuffers.Offset {
    OperatorCode.startOperatorCode(builder);
    OperatorCode.addBuiltinCode(builder, builtinCode);
    OperatorCode.addCustomCode(builder, customCodeOffset);
    OperatorCode.addVersion(builder, version);
    return OperatorCode.endOperatorCode(builder);
  }
}
