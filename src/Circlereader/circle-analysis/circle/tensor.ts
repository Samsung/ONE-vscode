/*
 * Copyright (c) 2021 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {QuantizationParameters} from '../circle/quantization-parameters';
import {SparsityParameters} from '../circle/sparsity-parameters';
import {TensorType} from '../circle/tensor-type';


export class Tensor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {
    return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  shape(index: number): number|null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  shapeLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  shapeArray(): Int32Array|null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? new Int32Array(
                        this.bb!.bytes().buffer,
                        this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
                        this.bb!.__vector_len(this.bb_pos + offset)) :
                    null;
  }

  type(): TensorType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
  }

  buffer(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  name(): string|null
  name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null
  name(optionalEncoding?: any): string|Uint8Array|null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  quantization(obj?: QuantizationParameters): QuantizationParameters|null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? (obj || new QuantizationParameters())
                        .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :
                    null;
  }

  isVariable(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  sparsity(obj?: SparsityParameters): SparsityParameters|null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? (obj || new SparsityParameters())
                        .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :
                    null;
  }

  shapeSignature(index: number): number|null {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  shapeSignatureLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  shapeSignatureArray(): Int32Array|null {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? new Int32Array(
                        this.bb!.bytes().buffer,
                        this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
                        this.bb!.__vector_len(this.bb_pos + offset)) :
                    null;
  }

  static startTensor(builder: flatbuffers.Builder) {
    builder.startObject(8);
  }

  static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, shapeOffset, 0);
  }

  static createShapeVector(builder: flatbuffers.Builder, data: number[]|Int32Array):
      flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createShapeVector(builder: flatbuffers.Builder, data: number[]|Uint8Array):
      flatbuffers.Offset;
  static createShapeVector(builder: flatbuffers.Builder, data: number[]|Int32Array|Uint8Array):
      flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startShapeVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addType(builder: flatbuffers.Builder, type: TensorType) {
    builder.addFieldInt8(1, type, TensorType.FLOAT32);
  }

  static addBuffer(builder: flatbuffers.Builder, buffer: number) {
    builder.addFieldInt32(2, buffer, 0);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, nameOffset, 0);
  }

  static addQuantization(builder: flatbuffers.Builder, quantizationOffset: flatbuffers.Offset) {
    builder.addFieldOffset(4, quantizationOffset, 0);
  }

  static addIsVariable(builder: flatbuffers.Builder, isVariable: boolean) {
    builder.addFieldInt8(5, +isVariable, +false);
  }

  static addSparsity(builder: flatbuffers.Builder, sparsityOffset: flatbuffers.Offset) {
    builder.addFieldOffset(6, sparsityOffset, 0);
  }

  static addShapeSignature(builder: flatbuffers.Builder, shapeSignatureOffset: flatbuffers.Offset) {
    builder.addFieldOffset(7, shapeSignatureOffset, 0);
  }

  static createShapeSignatureVector(builder: flatbuffers.Builder, data: number[]|Int32Array):
      flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createShapeSignatureVector(builder: flatbuffers.Builder, data: number[]|Uint8Array):
      flatbuffers.Offset;
  static createShapeSignatureVector(
      builder: flatbuffers.Builder, data: number[]|Int32Array|Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startShapeSignatureVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }
}
