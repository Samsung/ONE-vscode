"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SVDFOptions = exports.LSHProjectionOptionsT = exports.LSHProjectionOptions = exports.ConcatEmbeddingsOptionsT = exports.ConcatEmbeddingsOptions = exports.DepthwiseConv2DOptionsT = exports.DepthwiseConv2DOptions = exports.Pool2DOptionsT = exports.Pool2DOptions = exports.Conv3DOptionsT = exports.Conv3DOptions = exports.Conv2DOptionsT = exports.Conv2DOptions = exports.TensorT = exports.Tensor = exports.SparsityParametersT = exports.SparsityParameters = exports.DimensionMetadataT = exports.DimensionMetadata = exports.Uint8VectorT = exports.Uint8Vector = exports.Uint16VectorT = exports.Uint16Vector = exports.Int32VectorT = exports.Int32Vector = exports.QuantizationParametersT = exports.QuantizationParameters = exports.CustomQuantizationT = exports.CustomQuantization = exports.DataFormat = exports.CustomOptionsFormat = exports.MirrorPadMode = exports.CombinerType = exports.LSTMKernelType = exports.FullyConnectedOptionsWeightsFormat = exports.LSHProjectionType = exports.ActivationFunctionType = exports.Padding = exports.unionListToBuiltinOptions = exports.unionToBuiltinOptions = exports.BuiltinOptions = exports.BuiltinOperator = exports.unionListToSparseIndexVector = exports.unionToSparseIndexVector = exports.SparseIndexVector = exports.DimensionType = exports.unionListToQuantizationDetails = exports.unionToQuantizationDetails = exports.QuantizationDetails = exports.TensorType = void 0;
exports.SubOptions = exports.DepthToSpaceOptionsT = exports.DepthToSpaceOptions = exports.SpaceToDepthOptionsT = exports.SpaceToDepthOptions = exports.SkipGramOptionsT = exports.SkipGramOptions = exports.BatchToSpaceNDOptionsT = exports.BatchToSpaceNDOptions = exports.SpaceToBatchNDOptionsT = exports.SpaceToBatchNDOptions = exports.ReshapeOptionsT = exports.ReshapeOptions = exports.PadV2OptionsT = exports.PadV2Options = exports.PadOptionsT = exports.PadOptions = exports.CallOptionsT = exports.CallOptions = exports.ResizeNearestNeighborOptionsT = exports.ResizeNearestNeighborOptions = exports.ResizeBilinearOptionsT = exports.ResizeBilinearOptions = exports.BidirectionalSequenceLSTMOptionsT = exports.BidirectionalSequenceLSTMOptions = exports.UnidirectionalSequenceLSTMOptionsT = exports.UnidirectionalSequenceLSTMOptions = exports.LSTMOptionsT = exports.LSTMOptions = exports.LocalResponseNormalizationOptionsT = exports.LocalResponseNormalizationOptions = exports.L2NormOptionsT = exports.L2NormOptions = exports.MulOptionsT = exports.MulOptions = exports.AddOptionsT = exports.AddOptions = exports.ConcatenationOptionsT = exports.ConcatenationOptions = exports.SoftmaxOptionsT = exports.SoftmaxOptions = exports.FullyConnectedOptionsT = exports.FullyConnectedOptions = exports.BidirectionalSequenceRNNOptionsT = exports.BidirectionalSequenceRNNOptions = exports.SequenceRNNOptionsT = exports.SequenceRNNOptions = exports.RNNOptionsT = exports.RNNOptions = exports.SVDFOptionsT = void 0;
exports.SelectOptions = exports.NegOptionsT = exports.NegOptions = exports.LessEqualOptionsT = exports.LessEqualOptions = exports.LessOptionsT = exports.LessOptions = exports.GreaterEqualOptionsT = exports.GreaterEqualOptions = exports.GreaterOptionsT = exports.GreaterOptions = exports.ArgMinOptionsT = exports.ArgMinOptions = exports.ArgMaxOptionsT = exports.ArgMaxOptions = exports.TileOptionsT = exports.TileOptions = exports.MaximumMinimumOptionsT = exports.MaximumMinimumOptions = exports.DequantizeOptionsT = exports.DequantizeOptions = exports.CastOptionsT = exports.CastOptions = exports.LogSoftmaxOptionsT = exports.LogSoftmaxOptions = exports.StridedSliceOptionsT = exports.StridedSliceOptions = exports.SplitVOptionsT = exports.SplitVOptions = exports.SplitOptionsT = exports.SplitOptions = exports.SqueezeOptionsT = exports.SqueezeOptions = exports.ReducerOptionsT = exports.ReducerOptions = exports.CosOptionsT = exports.CosOptions = exports.ExpOptionsT = exports.ExpOptions = exports.TransposeOptionsT = exports.TransposeOptions = exports.GatherOptionsT = exports.GatherOptions = exports.EmbeddingLookupSparseOptionsT = exports.EmbeddingLookupSparseOptions = exports.TopKV2OptionsT = exports.TopKV2Options = exports.DivOptionsT = exports.DivOptions = exports.SubOptionsT = void 0;
exports.LeakyReluOptions = exports.RangeOptionsT = exports.RangeOptions = exports.FloorModOptionsT = exports.FloorModOptions = exports.FillOptionsT = exports.FillOptions = exports.ZerosLikeOptionsT = exports.ZerosLikeOptions = exports.SquareOptionsT = exports.SquareOptions = exports.FloorDivOptionsT = exports.FloorDivOptions = exports.UnpackOptionsT = exports.UnpackOptions = exports.LogicalNotOptionsT = exports.LogicalNotOptions = exports.LogicalAndOptionsT = exports.LogicalAndOptions = exports.HardSwishOptionsT = exports.HardSwishOptions = exports.AbsOptionsT = exports.AbsOptions = exports.OneHotOptionsT = exports.OneHotOptions = exports.LogicalOrOptionsT = exports.LogicalOrOptions = exports.PackOptionsT = exports.PackOptions = exports.FakeQuantOptionsT = exports.FakeQuantOptions = exports.PowOptionsT = exports.PowOptions = exports.RankOptionsT = exports.RankOptions = exports.ShapeOptionsT = exports.ShapeOptions = exports.NotEqualOptionsT = exports.NotEqualOptions = exports.EqualOptionsT = exports.EqualOptions = exports.SparseToDenseOptionsT = exports.SparseToDenseOptions = exports.ExpandDimsOptionsT = exports.ExpandDimsOptions = exports.TransposeConvOptionsT = exports.TransposeConvOptions = exports.SliceOptionsT = exports.SliceOptions = exports.SelectOptionsT = void 0;
exports.HashtableOptions = exports.Rfft2dOptionsT = exports.Rfft2dOptions = exports.BroadcastToOptionsT = exports.BroadcastToOptions = exports.CumsumOptionsT = exports.CumsumOptions = exports.BatchMatMulOptionsT = exports.BatchMatMulOptions = exports.SegmentSumOptionsT = exports.SegmentSumOptions = exports.DensifyOptionsT = exports.DensifyOptions = exports.SelectV2OptionsT = exports.SelectV2Options = exports.ScatterNdOptionsT = exports.ScatterNdOptions = exports.NonMaxSuppressionV5OptionsT = exports.NonMaxSuppressionV5Options = exports.NonMaxSuppressionV4OptionsT = exports.NonMaxSuppressionV4Options = exports.WhileOptionsT = exports.WhileOptions = exports.CallOnceOptionsT = exports.CallOnceOptions = exports.IfOptionsT = exports.IfOptions = exports.MatrixSetDiagOptionsT = exports.MatrixSetDiagOptions = exports.QuantizeOptionsT = exports.QuantizeOptions = exports.MatrixDiagOptionsT = exports.MatrixDiagOptions = exports.ReverseSequenceOptionsT = exports.ReverseSequenceOptions = exports.WhereOptionsT = exports.WhereOptions = exports.GatherNdOptionsT = exports.GatherNdOptions = exports.AddNOptionsT = exports.AddNOptions = exports.ReverseV2OptionsT = exports.ReverseV2Options = exports.UniqueOptionsT = exports.UniqueOptions = exports.MirrorPadOptionsT = exports.MirrorPadOptions = exports.SquaredDifferenceOptionsT = exports.SquaredDifferenceOptions = exports.LeakyReluOptionsT = void 0;
exports.ModelT = exports.Model = exports.SignatureDefT = exports.SignatureDef = exports.TensorMapT = exports.TensorMap = exports.MetadataT = exports.Metadata = exports.BufferT = exports.Buffer = exports.SubGraphT = exports.SubGraph = exports.OperatorT = exports.Operator = exports.OperatorCodeT = exports.OperatorCode = exports.InstanceNormOptionsT = exports.InstanceNormOptions = exports.BCQFullyConnectedOptionsT = exports.BCQFullyConnectedOptions = exports.BCQGatherOptionsT = exports.BCQGatherOptions = exports.RandomOptionsT = exports.RandomOptions = exports.AssignVariableOptionsT = exports.AssignVariableOptions = exports.ReadVariableOptionsT = exports.ReadVariableOptions = exports.VarHandleOptionsT = exports.VarHandleOptions = exports.HashtableSizeOptionsT = exports.HashtableSizeOptions = exports.HashtableImportOptionsT = exports.HashtableImportOptions = exports.HashtableFindOptionsT = exports.HashtableFindOptions = exports.HashtableOptionsT = void 0;
var flatbuffers = require("flatbuffers");
var TensorType;
(function (TensorType) {
    TensorType[TensorType["FLOAT32"] = 0] = "FLOAT32";
    TensorType[TensorType["FLOAT16"] = 1] = "FLOAT16";
    TensorType[TensorType["INT32"] = 2] = "INT32";
    TensorType[TensorType["UINT8"] = 3] = "UINT8";
    TensorType[TensorType["INT64"] = 4] = "INT64";
    TensorType[TensorType["STRING"] = 5] = "STRING";
    TensorType[TensorType["BOOL"] = 6] = "BOOL";
    TensorType[TensorType["INT16"] = 7] = "INT16";
    TensorType[TensorType["COMPLEX64"] = 8] = "COMPLEX64";
    TensorType[TensorType["INT8"] = 9] = "INT8";
    TensorType[TensorType["FLOAT64"] = 10] = "FLOAT64";
    TensorType[TensorType["COMPLEX128"] = 11] = "COMPLEX128";
    TensorType[TensorType["UINT64"] = 12] = "UINT64";
    TensorType[TensorType["RESOURCE"] = 13] = "RESOURCE";
    TensorType[TensorType["VARIANT"] = 14] = "VARIANT";
    TensorType[TensorType["UINT32"] = 15] = "UINT32";
})(TensorType = exports.TensorType || (exports.TensorType = {}));
var QuantizationDetails;
(function (QuantizationDetails) {
    QuantizationDetails[QuantizationDetails["NONE"] = 0] = "NONE";
    QuantizationDetails[QuantizationDetails["CustomQuantization"] = 1] = "CustomQuantization";
})(QuantizationDetails = exports.QuantizationDetails || (exports.QuantizationDetails = {}));
function unionToQuantizationDetails(type, accessor) {
    switch (QuantizationDetails[type]) {
        case 'NONE': return null;
        case 'CustomQuantization': return accessor(new CustomQuantization());
        default: return null;
    }
}
exports.unionToQuantizationDetails = unionToQuantizationDetails;
function unionListToQuantizationDetails(type, accessor, index) {
    switch (QuantizationDetails[type]) {
        case 'NONE': return null;
        case 'CustomQuantization': return accessor(index, new CustomQuantization());
        default: return null;
    }
}
exports.unionListToQuantizationDetails = unionListToQuantizationDetails;
var DimensionType;
(function (DimensionType) {
    DimensionType[DimensionType["DENSE"] = 0] = "DENSE";
    DimensionType[DimensionType["SPARSE_CSR"] = 1] = "SPARSE_CSR";
})(DimensionType = exports.DimensionType || (exports.DimensionType = {}));
var SparseIndexVector;
(function (SparseIndexVector) {
    SparseIndexVector[SparseIndexVector["NONE"] = 0] = "NONE";
    SparseIndexVector[SparseIndexVector["Int32Vector"] = 1] = "Int32Vector";
    SparseIndexVector[SparseIndexVector["Uint16Vector"] = 2] = "Uint16Vector";
    SparseIndexVector[SparseIndexVector["Uint8Vector"] = 3] = "Uint8Vector";
})(SparseIndexVector = exports.SparseIndexVector || (exports.SparseIndexVector = {}));
function unionToSparseIndexVector(type, accessor) {
    switch (SparseIndexVector[type]) {
        case 'NONE': return null;
        case 'Int32Vector': return accessor(new Int32Vector());
        case 'Uint16Vector': return accessor(new Uint16Vector());
        case 'Uint8Vector': return accessor(new Uint8Vector());
        default: return null;
    }
}
exports.unionToSparseIndexVector = unionToSparseIndexVector;
function unionListToSparseIndexVector(type, accessor, index) {
    switch (SparseIndexVector[type]) {
        case 'NONE': return null;
        case 'Int32Vector': return accessor(index, new Int32Vector());
        case 'Uint16Vector': return accessor(index, new Uint16Vector());
        case 'Uint8Vector': return accessor(index, new Uint8Vector());
        default: return null;
    }
}
exports.unionListToSparseIndexVector = unionListToSparseIndexVector;
var BuiltinOperator;
(function (BuiltinOperator) {
    BuiltinOperator[BuiltinOperator["BCQ_GATHER"] = -4] = "BCQ_GATHER";
    BuiltinOperator[BuiltinOperator["BCQ_FULLY_CONNECTED"] = -3] = "BCQ_FULLY_CONNECTED";
    BuiltinOperator[BuiltinOperator["INSTANCE_NORM"] = -2] = "INSTANCE_NORM";
    BuiltinOperator[BuiltinOperator["ADD"] = 0] = "ADD";
    BuiltinOperator[BuiltinOperator["AVERAGE_POOL_2D"] = 1] = "AVERAGE_POOL_2D";
    BuiltinOperator[BuiltinOperator["CONCATENATION"] = 2] = "CONCATENATION";
    BuiltinOperator[BuiltinOperator["CONV_2D"] = 3] = "CONV_2D";
    BuiltinOperator[BuiltinOperator["DEPTHWISE_CONV_2D"] = 4] = "DEPTHWISE_CONV_2D";
    BuiltinOperator[BuiltinOperator["DEPTH_TO_SPACE"] = 5] = "DEPTH_TO_SPACE";
    BuiltinOperator[BuiltinOperator["DEQUANTIZE"] = 6] = "DEQUANTIZE";
    BuiltinOperator[BuiltinOperator["EMBEDDING_LOOKUP"] = 7] = "EMBEDDING_LOOKUP";
    BuiltinOperator[BuiltinOperator["FLOOR"] = 8] = "FLOOR";
    BuiltinOperator[BuiltinOperator["FULLY_CONNECTED"] = 9] = "FULLY_CONNECTED";
    BuiltinOperator[BuiltinOperator["HASHTABLE_LOOKUP"] = 10] = "HASHTABLE_LOOKUP";
    BuiltinOperator[BuiltinOperator["L2_NORMALIZATION"] = 11] = "L2_NORMALIZATION";
    BuiltinOperator[BuiltinOperator["L2_POOL_2D"] = 12] = "L2_POOL_2D";
    BuiltinOperator[BuiltinOperator["LOCAL_RESPONSE_NORMALIZATION"] = 13] = "LOCAL_RESPONSE_NORMALIZATION";
    BuiltinOperator[BuiltinOperator["LOGISTIC"] = 14] = "LOGISTIC";
    BuiltinOperator[BuiltinOperator["LSH_PROJECTION"] = 15] = "LSH_PROJECTION";
    BuiltinOperator[BuiltinOperator["LSTM"] = 16] = "LSTM";
    BuiltinOperator[BuiltinOperator["MAX_POOL_2D"] = 17] = "MAX_POOL_2D";
    BuiltinOperator[BuiltinOperator["MUL"] = 18] = "MUL";
    BuiltinOperator[BuiltinOperator["RELU"] = 19] = "RELU";
    BuiltinOperator[BuiltinOperator["RELU_N1_TO_1"] = 20] = "RELU_N1_TO_1";
    BuiltinOperator[BuiltinOperator["RELU6"] = 21] = "RELU6";
    BuiltinOperator[BuiltinOperator["RESHAPE"] = 22] = "RESHAPE";
    BuiltinOperator[BuiltinOperator["RESIZE_BILINEAR"] = 23] = "RESIZE_BILINEAR";
    BuiltinOperator[BuiltinOperator["RNN"] = 24] = "RNN";
    BuiltinOperator[BuiltinOperator["SOFTMAX"] = 25] = "SOFTMAX";
    BuiltinOperator[BuiltinOperator["SPACE_TO_DEPTH"] = 26] = "SPACE_TO_DEPTH";
    BuiltinOperator[BuiltinOperator["SVDF"] = 27] = "SVDF";
    BuiltinOperator[BuiltinOperator["TANH"] = 28] = "TANH";
    BuiltinOperator[BuiltinOperator["CONCAT_EMBEDDINGS"] = 29] = "CONCAT_EMBEDDINGS";
    BuiltinOperator[BuiltinOperator["SKIP_GRAM"] = 30] = "SKIP_GRAM";
    BuiltinOperator[BuiltinOperator["CALL"] = 31] = "CALL";
    BuiltinOperator[BuiltinOperator["CUSTOM"] = 32] = "CUSTOM";
    BuiltinOperator[BuiltinOperator["EMBEDDING_LOOKUP_SPARSE"] = 33] = "EMBEDDING_LOOKUP_SPARSE";
    BuiltinOperator[BuiltinOperator["PAD"] = 34] = "PAD";
    BuiltinOperator[BuiltinOperator["UNIDIRECTIONAL_SEQUENCE_RNN"] = 35] = "UNIDIRECTIONAL_SEQUENCE_RNN";
    BuiltinOperator[BuiltinOperator["GATHER"] = 36] = "GATHER";
    BuiltinOperator[BuiltinOperator["BATCH_TO_SPACE_ND"] = 37] = "BATCH_TO_SPACE_ND";
    BuiltinOperator[BuiltinOperator["SPACE_TO_BATCH_ND"] = 38] = "SPACE_TO_BATCH_ND";
    BuiltinOperator[BuiltinOperator["TRANSPOSE"] = 39] = "TRANSPOSE";
    BuiltinOperator[BuiltinOperator["MEAN"] = 40] = "MEAN";
    BuiltinOperator[BuiltinOperator["SUB"] = 41] = "SUB";
    BuiltinOperator[BuiltinOperator["DIV"] = 42] = "DIV";
    BuiltinOperator[BuiltinOperator["SQUEEZE"] = 43] = "SQUEEZE";
    BuiltinOperator[BuiltinOperator["UNIDIRECTIONAL_SEQUENCE_LSTM"] = 44] = "UNIDIRECTIONAL_SEQUENCE_LSTM";
    BuiltinOperator[BuiltinOperator["STRIDED_SLICE"] = 45] = "STRIDED_SLICE";
    BuiltinOperator[BuiltinOperator["BIDIRECTIONAL_SEQUENCE_RNN"] = 46] = "BIDIRECTIONAL_SEQUENCE_RNN";
    BuiltinOperator[BuiltinOperator["EXP"] = 47] = "EXP";
    BuiltinOperator[BuiltinOperator["TOPK_V2"] = 48] = "TOPK_V2";
    BuiltinOperator[BuiltinOperator["SPLIT"] = 49] = "SPLIT";
    BuiltinOperator[BuiltinOperator["LOG_SOFTMAX"] = 50] = "LOG_SOFTMAX";
    BuiltinOperator[BuiltinOperator["DELEGATE"] = 51] = "DELEGATE";
    BuiltinOperator[BuiltinOperator["BIDIRECTIONAL_SEQUENCE_LSTM"] = 52] = "BIDIRECTIONAL_SEQUENCE_LSTM";
    BuiltinOperator[BuiltinOperator["CAST"] = 53] = "CAST";
    BuiltinOperator[BuiltinOperator["PRELU"] = 54] = "PRELU";
    BuiltinOperator[BuiltinOperator["MAXIMUM"] = 55] = "MAXIMUM";
    BuiltinOperator[BuiltinOperator["ARG_MAX"] = 56] = "ARG_MAX";
    BuiltinOperator[BuiltinOperator["MINIMUM"] = 57] = "MINIMUM";
    BuiltinOperator[BuiltinOperator["LESS"] = 58] = "LESS";
    BuiltinOperator[BuiltinOperator["NEG"] = 59] = "NEG";
    BuiltinOperator[BuiltinOperator["PADV2"] = 60] = "PADV2";
    BuiltinOperator[BuiltinOperator["GREATER"] = 61] = "GREATER";
    BuiltinOperator[BuiltinOperator["GREATER_EQUAL"] = 62] = "GREATER_EQUAL";
    BuiltinOperator[BuiltinOperator["LESS_EQUAL"] = 63] = "LESS_EQUAL";
    BuiltinOperator[BuiltinOperator["SELECT"] = 64] = "SELECT";
    BuiltinOperator[BuiltinOperator["SLICE"] = 65] = "SLICE";
    BuiltinOperator[BuiltinOperator["SIN"] = 66] = "SIN";
    BuiltinOperator[BuiltinOperator["TRANSPOSE_CONV"] = 67] = "TRANSPOSE_CONV";
    BuiltinOperator[BuiltinOperator["SPARSE_TO_DENSE"] = 68] = "SPARSE_TO_DENSE";
    BuiltinOperator[BuiltinOperator["TILE"] = 69] = "TILE";
    BuiltinOperator[BuiltinOperator["EXPAND_DIMS"] = 70] = "EXPAND_DIMS";
    BuiltinOperator[BuiltinOperator["EQUAL"] = 71] = "EQUAL";
    BuiltinOperator[BuiltinOperator["NOT_EQUAL"] = 72] = "NOT_EQUAL";
    BuiltinOperator[BuiltinOperator["LOG"] = 73] = "LOG";
    BuiltinOperator[BuiltinOperator["SUM"] = 74] = "SUM";
    BuiltinOperator[BuiltinOperator["SQRT"] = 75] = "SQRT";
    BuiltinOperator[BuiltinOperator["RSQRT"] = 76] = "RSQRT";
    BuiltinOperator[BuiltinOperator["SHAPE"] = 77] = "SHAPE";
    BuiltinOperator[BuiltinOperator["POW"] = 78] = "POW";
    BuiltinOperator[BuiltinOperator["ARG_MIN"] = 79] = "ARG_MIN";
    BuiltinOperator[BuiltinOperator["FAKE_QUANT"] = 80] = "FAKE_QUANT";
    BuiltinOperator[BuiltinOperator["REDUCE_PROD"] = 81] = "REDUCE_PROD";
    BuiltinOperator[BuiltinOperator["REDUCE_MAX"] = 82] = "REDUCE_MAX";
    BuiltinOperator[BuiltinOperator["PACK"] = 83] = "PACK";
    BuiltinOperator[BuiltinOperator["LOGICAL_OR"] = 84] = "LOGICAL_OR";
    BuiltinOperator[BuiltinOperator["ONE_HOT"] = 85] = "ONE_HOT";
    BuiltinOperator[BuiltinOperator["LOGICAL_AND"] = 86] = "LOGICAL_AND";
    BuiltinOperator[BuiltinOperator["LOGICAL_NOT"] = 87] = "LOGICAL_NOT";
    BuiltinOperator[BuiltinOperator["UNPACK"] = 88] = "UNPACK";
    BuiltinOperator[BuiltinOperator["REDUCE_MIN"] = 89] = "REDUCE_MIN";
    BuiltinOperator[BuiltinOperator["FLOOR_DIV"] = 90] = "FLOOR_DIV";
    BuiltinOperator[BuiltinOperator["REDUCE_ANY"] = 91] = "REDUCE_ANY";
    BuiltinOperator[BuiltinOperator["SQUARE"] = 92] = "SQUARE";
    BuiltinOperator[BuiltinOperator["ZEROS_LIKE"] = 93] = "ZEROS_LIKE";
    BuiltinOperator[BuiltinOperator["FILL"] = 94] = "FILL";
    BuiltinOperator[BuiltinOperator["FLOOR_MOD"] = 95] = "FLOOR_MOD";
    BuiltinOperator[BuiltinOperator["RANGE"] = 96] = "RANGE";
    BuiltinOperator[BuiltinOperator["RESIZE_NEAREST_NEIGHBOR"] = 97] = "RESIZE_NEAREST_NEIGHBOR";
    BuiltinOperator[BuiltinOperator["LEAKY_RELU"] = 98] = "LEAKY_RELU";
    BuiltinOperator[BuiltinOperator["SQUARED_DIFFERENCE"] = 99] = "SQUARED_DIFFERENCE";
    BuiltinOperator[BuiltinOperator["MIRROR_PAD"] = 100] = "MIRROR_PAD";
    BuiltinOperator[BuiltinOperator["ABS"] = 101] = "ABS";
    BuiltinOperator[BuiltinOperator["SPLIT_V"] = 102] = "SPLIT_V";
    BuiltinOperator[BuiltinOperator["UNIQUE"] = 103] = "UNIQUE";
    BuiltinOperator[BuiltinOperator["CEIL"] = 104] = "CEIL";
    BuiltinOperator[BuiltinOperator["REVERSE_V2"] = 105] = "REVERSE_V2";
    BuiltinOperator[BuiltinOperator["ADD_N"] = 106] = "ADD_N";
    BuiltinOperator[BuiltinOperator["GATHER_ND"] = 107] = "GATHER_ND";
    BuiltinOperator[BuiltinOperator["COS"] = 108] = "COS";
    BuiltinOperator[BuiltinOperator["WHERE"] = 109] = "WHERE";
    BuiltinOperator[BuiltinOperator["RANK"] = 110] = "RANK";
    BuiltinOperator[BuiltinOperator["ELU"] = 111] = "ELU";
    BuiltinOperator[BuiltinOperator["REVERSE_SEQUENCE"] = 112] = "REVERSE_SEQUENCE";
    BuiltinOperator[BuiltinOperator["MATRIX_DIAG"] = 113] = "MATRIX_DIAG";
    BuiltinOperator[BuiltinOperator["QUANTIZE"] = 114] = "QUANTIZE";
    BuiltinOperator[BuiltinOperator["MATRIX_SET_DIAG"] = 115] = "MATRIX_SET_DIAG";
    BuiltinOperator[BuiltinOperator["ROUND"] = 116] = "ROUND";
    BuiltinOperator[BuiltinOperator["HARD_SWISH"] = 117] = "HARD_SWISH";
    BuiltinOperator[BuiltinOperator["IF"] = 118] = "IF";
    BuiltinOperator[BuiltinOperator["WHILE"] = 119] = "WHILE";
    BuiltinOperator[BuiltinOperator["NON_MAX_SUPPRESSION_V4"] = 120] = "NON_MAX_SUPPRESSION_V4";
    BuiltinOperator[BuiltinOperator["NON_MAX_SUPPRESSION_V5"] = 121] = "NON_MAX_SUPPRESSION_V5";
    BuiltinOperator[BuiltinOperator["SCATTER_ND"] = 122] = "SCATTER_ND";
    BuiltinOperator[BuiltinOperator["SELECT_V2"] = 123] = "SELECT_V2";
    BuiltinOperator[BuiltinOperator["DENSIFY"] = 124] = "DENSIFY";
    BuiltinOperator[BuiltinOperator["SEGMENT_SUM"] = 125] = "SEGMENT_SUM";
    BuiltinOperator[BuiltinOperator["BATCH_MATMUL"] = 126] = "BATCH_MATMUL";
    BuiltinOperator[BuiltinOperator["PLACEHOLDER_FOR_GREATER_OP_CODES"] = 127] = "PLACEHOLDER_FOR_GREATER_OP_CODES";
    BuiltinOperator[BuiltinOperator["CUMSUM"] = 128] = "CUMSUM";
    BuiltinOperator[BuiltinOperator["CALL_ONCE"] = 129] = "CALL_ONCE";
    BuiltinOperator[BuiltinOperator["BROADCAST_TO"] = 130] = "BROADCAST_TO";
    BuiltinOperator[BuiltinOperator["RFFT2D"] = 131] = "RFFT2D";
    BuiltinOperator[BuiltinOperator["CONV_3D"] = 132] = "CONV_3D";
    BuiltinOperator[BuiltinOperator["IMAG"] = 133] = "IMAG";
    BuiltinOperator[BuiltinOperator["REAL"] = 134] = "REAL";
    BuiltinOperator[BuiltinOperator["COMPLEX_ABS"] = 135] = "COMPLEX_ABS";
    BuiltinOperator[BuiltinOperator["HASHTABLE"] = 136] = "HASHTABLE";
    BuiltinOperator[BuiltinOperator["HASHTABLE_FIND"] = 137] = "HASHTABLE_FIND";
    BuiltinOperator[BuiltinOperator["HASHTABLE_IMPORT"] = 138] = "HASHTABLE_IMPORT";
    BuiltinOperator[BuiltinOperator["HASHTABLE_SIZE"] = 139] = "HASHTABLE_SIZE";
    BuiltinOperator[BuiltinOperator["REDUCE_ALL"] = 140] = "REDUCE_ALL";
    BuiltinOperator[BuiltinOperator["CONV_3D_TRANSPOSE"] = 141] = "CONV_3D_TRANSPOSE";
    BuiltinOperator[BuiltinOperator["VAR_HANDLE"] = 142] = "VAR_HANDLE";
    BuiltinOperator[BuiltinOperator["READ_VARIABLE"] = 143] = "READ_VARIABLE";
    BuiltinOperator[BuiltinOperator["ASSIGN_VARIABLE"] = 144] = "ASSIGN_VARIABLE";
    BuiltinOperator[BuiltinOperator["BROADCAST_ARGS"] = 145] = "BROADCAST_ARGS";
    BuiltinOperator[BuiltinOperator["RANDOM_STANDARD_NORMAL"] = 146] = "RANDOM_STANDARD_NORMAL";
})(BuiltinOperator = exports.BuiltinOperator || (exports.BuiltinOperator = {}));
var BuiltinOptions;
(function (BuiltinOptions) {
    BuiltinOptions[BuiltinOptions["NONE"] = 0] = "NONE";
    BuiltinOptions[BuiltinOptions["Conv2DOptions"] = 1] = "Conv2DOptions";
    BuiltinOptions[BuiltinOptions["DepthwiseConv2DOptions"] = 2] = "DepthwiseConv2DOptions";
    BuiltinOptions[BuiltinOptions["ConcatEmbeddingsOptions"] = 3] = "ConcatEmbeddingsOptions";
    BuiltinOptions[BuiltinOptions["LSHProjectionOptions"] = 4] = "LSHProjectionOptions";
    BuiltinOptions[BuiltinOptions["Pool2DOptions"] = 5] = "Pool2DOptions";
    BuiltinOptions[BuiltinOptions["SVDFOptions"] = 6] = "SVDFOptions";
    BuiltinOptions[BuiltinOptions["RNNOptions"] = 7] = "RNNOptions";
    BuiltinOptions[BuiltinOptions["FullyConnectedOptions"] = 8] = "FullyConnectedOptions";
    BuiltinOptions[BuiltinOptions["SoftmaxOptions"] = 9] = "SoftmaxOptions";
    BuiltinOptions[BuiltinOptions["ConcatenationOptions"] = 10] = "ConcatenationOptions";
    BuiltinOptions[BuiltinOptions["AddOptions"] = 11] = "AddOptions";
    BuiltinOptions[BuiltinOptions["L2NormOptions"] = 12] = "L2NormOptions";
    BuiltinOptions[BuiltinOptions["LocalResponseNormalizationOptions"] = 13] = "LocalResponseNormalizationOptions";
    BuiltinOptions[BuiltinOptions["LSTMOptions"] = 14] = "LSTMOptions";
    BuiltinOptions[BuiltinOptions["ResizeBilinearOptions"] = 15] = "ResizeBilinearOptions";
    BuiltinOptions[BuiltinOptions["CallOptions"] = 16] = "CallOptions";
    BuiltinOptions[BuiltinOptions["ReshapeOptions"] = 17] = "ReshapeOptions";
    BuiltinOptions[BuiltinOptions["SkipGramOptions"] = 18] = "SkipGramOptions";
    BuiltinOptions[BuiltinOptions["SpaceToDepthOptions"] = 19] = "SpaceToDepthOptions";
    BuiltinOptions[BuiltinOptions["EmbeddingLookupSparseOptions"] = 20] = "EmbeddingLookupSparseOptions";
    BuiltinOptions[BuiltinOptions["MulOptions"] = 21] = "MulOptions";
    BuiltinOptions[BuiltinOptions["PadOptions"] = 22] = "PadOptions";
    BuiltinOptions[BuiltinOptions["GatherOptions"] = 23] = "GatherOptions";
    BuiltinOptions[BuiltinOptions["BatchToSpaceNDOptions"] = 24] = "BatchToSpaceNDOptions";
    BuiltinOptions[BuiltinOptions["SpaceToBatchNDOptions"] = 25] = "SpaceToBatchNDOptions";
    BuiltinOptions[BuiltinOptions["TransposeOptions"] = 26] = "TransposeOptions";
    BuiltinOptions[BuiltinOptions["ReducerOptions"] = 27] = "ReducerOptions";
    BuiltinOptions[BuiltinOptions["SubOptions"] = 28] = "SubOptions";
    BuiltinOptions[BuiltinOptions["DivOptions"] = 29] = "DivOptions";
    BuiltinOptions[BuiltinOptions["SqueezeOptions"] = 30] = "SqueezeOptions";
    BuiltinOptions[BuiltinOptions["SequenceRNNOptions"] = 31] = "SequenceRNNOptions";
    BuiltinOptions[BuiltinOptions["StridedSliceOptions"] = 32] = "StridedSliceOptions";
    BuiltinOptions[BuiltinOptions["ExpOptions"] = 33] = "ExpOptions";
    BuiltinOptions[BuiltinOptions["TopKV2Options"] = 34] = "TopKV2Options";
    BuiltinOptions[BuiltinOptions["SplitOptions"] = 35] = "SplitOptions";
    BuiltinOptions[BuiltinOptions["LogSoftmaxOptions"] = 36] = "LogSoftmaxOptions";
    BuiltinOptions[BuiltinOptions["CastOptions"] = 37] = "CastOptions";
    BuiltinOptions[BuiltinOptions["DequantizeOptions"] = 38] = "DequantizeOptions";
    BuiltinOptions[BuiltinOptions["MaximumMinimumOptions"] = 39] = "MaximumMinimumOptions";
    BuiltinOptions[BuiltinOptions["ArgMaxOptions"] = 40] = "ArgMaxOptions";
    BuiltinOptions[BuiltinOptions["LessOptions"] = 41] = "LessOptions";
    BuiltinOptions[BuiltinOptions["NegOptions"] = 42] = "NegOptions";
    BuiltinOptions[BuiltinOptions["PadV2Options"] = 43] = "PadV2Options";
    BuiltinOptions[BuiltinOptions["GreaterOptions"] = 44] = "GreaterOptions";
    BuiltinOptions[BuiltinOptions["GreaterEqualOptions"] = 45] = "GreaterEqualOptions";
    BuiltinOptions[BuiltinOptions["LessEqualOptions"] = 46] = "LessEqualOptions";
    BuiltinOptions[BuiltinOptions["SelectOptions"] = 47] = "SelectOptions";
    BuiltinOptions[BuiltinOptions["SliceOptions"] = 48] = "SliceOptions";
    BuiltinOptions[BuiltinOptions["TransposeConvOptions"] = 49] = "TransposeConvOptions";
    BuiltinOptions[BuiltinOptions["SparseToDenseOptions"] = 50] = "SparseToDenseOptions";
    BuiltinOptions[BuiltinOptions["TileOptions"] = 51] = "TileOptions";
    BuiltinOptions[BuiltinOptions["ExpandDimsOptions"] = 52] = "ExpandDimsOptions";
    BuiltinOptions[BuiltinOptions["EqualOptions"] = 53] = "EqualOptions";
    BuiltinOptions[BuiltinOptions["NotEqualOptions"] = 54] = "NotEqualOptions";
    BuiltinOptions[BuiltinOptions["ShapeOptions"] = 55] = "ShapeOptions";
    BuiltinOptions[BuiltinOptions["PowOptions"] = 56] = "PowOptions";
    BuiltinOptions[BuiltinOptions["ArgMinOptions"] = 57] = "ArgMinOptions";
    BuiltinOptions[BuiltinOptions["FakeQuantOptions"] = 58] = "FakeQuantOptions";
    BuiltinOptions[BuiltinOptions["PackOptions"] = 59] = "PackOptions";
    BuiltinOptions[BuiltinOptions["LogicalOrOptions"] = 60] = "LogicalOrOptions";
    BuiltinOptions[BuiltinOptions["OneHotOptions"] = 61] = "OneHotOptions";
    BuiltinOptions[BuiltinOptions["LogicalAndOptions"] = 62] = "LogicalAndOptions";
    BuiltinOptions[BuiltinOptions["LogicalNotOptions"] = 63] = "LogicalNotOptions";
    BuiltinOptions[BuiltinOptions["UnpackOptions"] = 64] = "UnpackOptions";
    BuiltinOptions[BuiltinOptions["FloorDivOptions"] = 65] = "FloorDivOptions";
    BuiltinOptions[BuiltinOptions["SquareOptions"] = 66] = "SquareOptions";
    BuiltinOptions[BuiltinOptions["ZerosLikeOptions"] = 67] = "ZerosLikeOptions";
    BuiltinOptions[BuiltinOptions["FillOptions"] = 68] = "FillOptions";
    BuiltinOptions[BuiltinOptions["BidirectionalSequenceLSTMOptions"] = 69] = "BidirectionalSequenceLSTMOptions";
    BuiltinOptions[BuiltinOptions["BidirectionalSequenceRNNOptions"] = 70] = "BidirectionalSequenceRNNOptions";
    BuiltinOptions[BuiltinOptions["UnidirectionalSequenceLSTMOptions"] = 71] = "UnidirectionalSequenceLSTMOptions";
    BuiltinOptions[BuiltinOptions["FloorModOptions"] = 72] = "FloorModOptions";
    BuiltinOptions[BuiltinOptions["RangeOptions"] = 73] = "RangeOptions";
    BuiltinOptions[BuiltinOptions["ResizeNearestNeighborOptions"] = 74] = "ResizeNearestNeighborOptions";
    BuiltinOptions[BuiltinOptions["LeakyReluOptions"] = 75] = "LeakyReluOptions";
    BuiltinOptions[BuiltinOptions["SquaredDifferenceOptions"] = 76] = "SquaredDifferenceOptions";
    BuiltinOptions[BuiltinOptions["MirrorPadOptions"] = 77] = "MirrorPadOptions";
    BuiltinOptions[BuiltinOptions["AbsOptions"] = 78] = "AbsOptions";
    BuiltinOptions[BuiltinOptions["SplitVOptions"] = 79] = "SplitVOptions";
    BuiltinOptions[BuiltinOptions["UniqueOptions"] = 80] = "UniqueOptions";
    BuiltinOptions[BuiltinOptions["ReverseV2Options"] = 81] = "ReverseV2Options";
    BuiltinOptions[BuiltinOptions["AddNOptions"] = 82] = "AddNOptions";
    BuiltinOptions[BuiltinOptions["GatherNdOptions"] = 83] = "GatherNdOptions";
    BuiltinOptions[BuiltinOptions["CosOptions"] = 84] = "CosOptions";
    BuiltinOptions[BuiltinOptions["WhereOptions"] = 85] = "WhereOptions";
    BuiltinOptions[BuiltinOptions["RankOptions"] = 86] = "RankOptions";
    BuiltinOptions[BuiltinOptions["ReverseSequenceOptions"] = 87] = "ReverseSequenceOptions";
    BuiltinOptions[BuiltinOptions["MatrixDiagOptions"] = 88] = "MatrixDiagOptions";
    BuiltinOptions[BuiltinOptions["QuantizeOptions"] = 89] = "QuantizeOptions";
    BuiltinOptions[BuiltinOptions["MatrixSetDiagOptions"] = 90] = "MatrixSetDiagOptions";
    BuiltinOptions[BuiltinOptions["HardSwishOptions"] = 91] = "HardSwishOptions";
    BuiltinOptions[BuiltinOptions["IfOptions"] = 92] = "IfOptions";
    BuiltinOptions[BuiltinOptions["WhileOptions"] = 93] = "WhileOptions";
    BuiltinOptions[BuiltinOptions["DepthToSpaceOptions"] = 94] = "DepthToSpaceOptions";
    BuiltinOptions[BuiltinOptions["NonMaxSuppressionV4Options"] = 95] = "NonMaxSuppressionV4Options";
    BuiltinOptions[BuiltinOptions["NonMaxSuppressionV5Options"] = 96] = "NonMaxSuppressionV5Options";
    BuiltinOptions[BuiltinOptions["ScatterNdOptions"] = 97] = "ScatterNdOptions";
    BuiltinOptions[BuiltinOptions["SelectV2Options"] = 98] = "SelectV2Options";
    BuiltinOptions[BuiltinOptions["DensifyOptions"] = 99] = "DensifyOptions";
    BuiltinOptions[BuiltinOptions["SegmentSumOptions"] = 100] = "SegmentSumOptions";
    BuiltinOptions[BuiltinOptions["BatchMatMulOptions"] = 101] = "BatchMatMulOptions";
    BuiltinOptions[BuiltinOptions["CumsumOptions"] = 102] = "CumsumOptions";
    BuiltinOptions[BuiltinOptions["CallOnceOptions"] = 103] = "CallOnceOptions";
    BuiltinOptions[BuiltinOptions["BroadcastToOptions"] = 104] = "BroadcastToOptions";
    BuiltinOptions[BuiltinOptions["Rfft2dOptions"] = 105] = "Rfft2dOptions";
    BuiltinOptions[BuiltinOptions["Conv3DOptions"] = 106] = "Conv3DOptions";
    BuiltinOptions[BuiltinOptions["HashtableOptions"] = 107] = "HashtableOptions";
    BuiltinOptions[BuiltinOptions["HashtableFindOptions"] = 108] = "HashtableFindOptions";
    BuiltinOptions[BuiltinOptions["HashtableImportOptions"] = 109] = "HashtableImportOptions";
    BuiltinOptions[BuiltinOptions["HashtableSizeOptions"] = 110] = "HashtableSizeOptions";
    BuiltinOptions[BuiltinOptions["VarHandleOptions"] = 111] = "VarHandleOptions";
    BuiltinOptions[BuiltinOptions["ReadVariableOptions"] = 112] = "ReadVariableOptions";
    BuiltinOptions[BuiltinOptions["AssignVariableOptions"] = 113] = "AssignVariableOptions";
    BuiltinOptions[BuiltinOptions["RandomOptions"] = 114] = "RandomOptions";
    BuiltinOptions[BuiltinOptions["BCQGatherOptions"] = 252] = "BCQGatherOptions";
    BuiltinOptions[BuiltinOptions["BCQFullyConnectedOptions"] = 253] = "BCQFullyConnectedOptions";
    BuiltinOptions[BuiltinOptions["InstanceNormOptions"] = 254] = "InstanceNormOptions";
})(BuiltinOptions = exports.BuiltinOptions || (exports.BuiltinOptions = {}));
function unionToBuiltinOptions(type, accessor) {
    switch (BuiltinOptions[type]) {
        case 'NONE': return null;
        case 'Conv2DOptions': return accessor(new Conv2DOptions());
        case 'DepthwiseConv2DOptions': return accessor(new DepthwiseConv2DOptions());
        case 'ConcatEmbeddingsOptions': return accessor(new ConcatEmbeddingsOptions());
        case 'LSHProjectionOptions': return accessor(new LSHProjectionOptions());
        case 'Pool2DOptions': return accessor(new Pool2DOptions());
        case 'SVDFOptions': return accessor(new SVDFOptions());
        case 'RNNOptions': return accessor(new RNNOptions());
        case 'FullyConnectedOptions': return accessor(new FullyConnectedOptions());
        case 'SoftmaxOptions': return accessor(new SoftmaxOptions());
        case 'ConcatenationOptions': return accessor(new ConcatenationOptions());
        case 'AddOptions': return accessor(new AddOptions());
        case 'L2NormOptions': return accessor(new L2NormOptions());
        case 'LocalResponseNormalizationOptions': return accessor(new LocalResponseNormalizationOptions());
        case 'LSTMOptions': return accessor(new LSTMOptions());
        case 'ResizeBilinearOptions': return accessor(new ResizeBilinearOptions());
        case 'CallOptions': return accessor(new CallOptions());
        case 'ReshapeOptions': return accessor(new ReshapeOptions());
        case 'SkipGramOptions': return accessor(new SkipGramOptions());
        case 'SpaceToDepthOptions': return accessor(new SpaceToDepthOptions());
        case 'EmbeddingLookupSparseOptions': return accessor(new EmbeddingLookupSparseOptions());
        case 'MulOptions': return accessor(new MulOptions());
        case 'PadOptions': return accessor(new PadOptions());
        case 'GatherOptions': return accessor(new GatherOptions());
        case 'BatchToSpaceNDOptions': return accessor(new BatchToSpaceNDOptions());
        case 'SpaceToBatchNDOptions': return accessor(new SpaceToBatchNDOptions());
        case 'TransposeOptions': return accessor(new TransposeOptions());
        case 'ReducerOptions': return accessor(new ReducerOptions());
        case 'SubOptions': return accessor(new SubOptions());
        case 'DivOptions': return accessor(new DivOptions());
        case 'SqueezeOptions': return accessor(new SqueezeOptions());
        case 'SequenceRNNOptions': return accessor(new SequenceRNNOptions());
        case 'StridedSliceOptions': return accessor(new StridedSliceOptions());
        case 'ExpOptions': return accessor(new ExpOptions());
        case 'TopKV2Options': return accessor(new TopKV2Options());
        case 'SplitOptions': return accessor(new SplitOptions());
        case 'LogSoftmaxOptions': return accessor(new LogSoftmaxOptions());
        case 'CastOptions': return accessor(new CastOptions());
        case 'DequantizeOptions': return accessor(new DequantizeOptions());
        case 'MaximumMinimumOptions': return accessor(new MaximumMinimumOptions());
        case 'ArgMaxOptions': return accessor(new ArgMaxOptions());
        case 'LessOptions': return accessor(new LessOptions());
        case 'NegOptions': return accessor(new NegOptions());
        case 'PadV2Options': return accessor(new PadV2Options());
        case 'GreaterOptions': return accessor(new GreaterOptions());
        case 'GreaterEqualOptions': return accessor(new GreaterEqualOptions());
        case 'LessEqualOptions': return accessor(new LessEqualOptions());
        case 'SelectOptions': return accessor(new SelectOptions());
        case 'SliceOptions': return accessor(new SliceOptions());
        case 'TransposeConvOptions': return accessor(new TransposeConvOptions());
        case 'SparseToDenseOptions': return accessor(new SparseToDenseOptions());
        case 'TileOptions': return accessor(new TileOptions());
        case 'ExpandDimsOptions': return accessor(new ExpandDimsOptions());
        case 'EqualOptions': return accessor(new EqualOptions());
        case 'NotEqualOptions': return accessor(new NotEqualOptions());
        case 'ShapeOptions': return accessor(new ShapeOptions());
        case 'PowOptions': return accessor(new PowOptions());
        case 'ArgMinOptions': return accessor(new ArgMinOptions());
        case 'FakeQuantOptions': return accessor(new FakeQuantOptions());
        case 'PackOptions': return accessor(new PackOptions());
        case 'LogicalOrOptions': return accessor(new LogicalOrOptions());
        case 'OneHotOptions': return accessor(new OneHotOptions());
        case 'LogicalAndOptions': return accessor(new LogicalAndOptions());
        case 'LogicalNotOptions': return accessor(new LogicalNotOptions());
        case 'UnpackOptions': return accessor(new UnpackOptions());
        case 'FloorDivOptions': return accessor(new FloorDivOptions());
        case 'SquareOptions': return accessor(new SquareOptions());
        case 'ZerosLikeOptions': return accessor(new ZerosLikeOptions());
        case 'FillOptions': return accessor(new FillOptions());
        case 'BidirectionalSequenceLSTMOptions': return accessor(new BidirectionalSequenceLSTMOptions());
        case 'BidirectionalSequenceRNNOptions': return accessor(new BidirectionalSequenceRNNOptions());
        case 'UnidirectionalSequenceLSTMOptions': return accessor(new UnidirectionalSequenceLSTMOptions());
        case 'FloorModOptions': return accessor(new FloorModOptions());
        case 'RangeOptions': return accessor(new RangeOptions());
        case 'ResizeNearestNeighborOptions': return accessor(new ResizeNearestNeighborOptions());
        case 'LeakyReluOptions': return accessor(new LeakyReluOptions());
        case 'SquaredDifferenceOptions': return accessor(new SquaredDifferenceOptions());
        case 'MirrorPadOptions': return accessor(new MirrorPadOptions());
        case 'AbsOptions': return accessor(new AbsOptions());
        case 'SplitVOptions': return accessor(new SplitVOptions());
        case 'UniqueOptions': return accessor(new UniqueOptions());
        case 'ReverseV2Options': return accessor(new ReverseV2Options());
        case 'AddNOptions': return accessor(new AddNOptions());
        case 'GatherNdOptions': return accessor(new GatherNdOptions());
        case 'CosOptions': return accessor(new CosOptions());
        case 'WhereOptions': return accessor(new WhereOptions());
        case 'RankOptions': return accessor(new RankOptions());
        case 'ReverseSequenceOptions': return accessor(new ReverseSequenceOptions());
        case 'MatrixDiagOptions': return accessor(new MatrixDiagOptions());
        case 'QuantizeOptions': return accessor(new QuantizeOptions());
        case 'MatrixSetDiagOptions': return accessor(new MatrixSetDiagOptions());
        case 'HardSwishOptions': return accessor(new HardSwishOptions());
        case 'IfOptions': return accessor(new IfOptions());
        case 'WhileOptions': return accessor(new WhileOptions());
        case 'DepthToSpaceOptions': return accessor(new DepthToSpaceOptions());
        case 'NonMaxSuppressionV4Options': return accessor(new NonMaxSuppressionV4Options());
        case 'NonMaxSuppressionV5Options': return accessor(new NonMaxSuppressionV5Options());
        case 'ScatterNdOptions': return accessor(new ScatterNdOptions());
        case 'SelectV2Options': return accessor(new SelectV2Options());
        case 'DensifyOptions': return accessor(new DensifyOptions());
        case 'SegmentSumOptions': return accessor(new SegmentSumOptions());
        case 'BatchMatMulOptions': return accessor(new BatchMatMulOptions());
        case 'CumsumOptions': return accessor(new CumsumOptions());
        case 'CallOnceOptions': return accessor(new CallOnceOptions());
        case 'BroadcastToOptions': return accessor(new BroadcastToOptions());
        case 'Rfft2dOptions': return accessor(new Rfft2dOptions());
        case 'Conv3DOptions': return accessor(new Conv3DOptions());
        case 'HashtableOptions': return accessor(new HashtableOptions());
        case 'HashtableFindOptions': return accessor(new HashtableFindOptions());
        case 'HashtableImportOptions': return accessor(new HashtableImportOptions());
        case 'HashtableSizeOptions': return accessor(new HashtableSizeOptions());
        case 'VarHandleOptions': return accessor(new VarHandleOptions());
        case 'ReadVariableOptions': return accessor(new ReadVariableOptions());
        case 'AssignVariableOptions': return accessor(new AssignVariableOptions());
        case 'RandomOptions': return accessor(new RandomOptions());
        case 'BCQGatherOptions': return accessor(new BCQGatherOptions());
        case 'BCQFullyConnectedOptions': return accessor(new BCQFullyConnectedOptions());
        case 'InstanceNormOptions': return accessor(new InstanceNormOptions());
        default: return null;
    }
}
exports.unionToBuiltinOptions = unionToBuiltinOptions;
function unionListToBuiltinOptions(type, accessor, index) {
    switch (BuiltinOptions[type]) {
        case 'NONE': return null;
        case 'Conv2DOptions': return accessor(index, new Conv2DOptions());
        case 'DepthwiseConv2DOptions': return accessor(index, new DepthwiseConv2DOptions());
        case 'ConcatEmbeddingsOptions': return accessor(index, new ConcatEmbeddingsOptions());
        case 'LSHProjectionOptions': return accessor(index, new LSHProjectionOptions());
        case 'Pool2DOptions': return accessor(index, new Pool2DOptions());
        case 'SVDFOptions': return accessor(index, new SVDFOptions());
        case 'RNNOptions': return accessor(index, new RNNOptions());
        case 'FullyConnectedOptions': return accessor(index, new FullyConnectedOptions());
        case 'SoftmaxOptions': return accessor(index, new SoftmaxOptions());
        case 'ConcatenationOptions': return accessor(index, new ConcatenationOptions());
        case 'AddOptions': return accessor(index, new AddOptions());
        case 'L2NormOptions': return accessor(index, new L2NormOptions());
        case 'LocalResponseNormalizationOptions': return accessor(index, new LocalResponseNormalizationOptions());
        case 'LSTMOptions': return accessor(index, new LSTMOptions());
        case 'ResizeBilinearOptions': return accessor(index, new ResizeBilinearOptions());
        case 'CallOptions': return accessor(index, new CallOptions());
        case 'ReshapeOptions': return accessor(index, new ReshapeOptions());
        case 'SkipGramOptions': return accessor(index, new SkipGramOptions());
        case 'SpaceToDepthOptions': return accessor(index, new SpaceToDepthOptions());
        case 'EmbeddingLookupSparseOptions': return accessor(index, new EmbeddingLookupSparseOptions());
        case 'MulOptions': return accessor(index, new MulOptions());
        case 'PadOptions': return accessor(index, new PadOptions());
        case 'GatherOptions': return accessor(index, new GatherOptions());
        case 'BatchToSpaceNDOptions': return accessor(index, new BatchToSpaceNDOptions());
        case 'SpaceToBatchNDOptions': return accessor(index, new SpaceToBatchNDOptions());
        case 'TransposeOptions': return accessor(index, new TransposeOptions());
        case 'ReducerOptions': return accessor(index, new ReducerOptions());
        case 'SubOptions': return accessor(index, new SubOptions());
        case 'DivOptions': return accessor(index, new DivOptions());
        case 'SqueezeOptions': return accessor(index, new SqueezeOptions());
        case 'SequenceRNNOptions': return accessor(index, new SequenceRNNOptions());
        case 'StridedSliceOptions': return accessor(index, new StridedSliceOptions());
        case 'ExpOptions': return accessor(index, new ExpOptions());
        case 'TopKV2Options': return accessor(index, new TopKV2Options());
        case 'SplitOptions': return accessor(index, new SplitOptions());
        case 'LogSoftmaxOptions': return accessor(index, new LogSoftmaxOptions());
        case 'CastOptions': return accessor(index, new CastOptions());
        case 'DequantizeOptions': return accessor(index, new DequantizeOptions());
        case 'MaximumMinimumOptions': return accessor(index, new MaximumMinimumOptions());
        case 'ArgMaxOptions': return accessor(index, new ArgMaxOptions());
        case 'LessOptions': return accessor(index, new LessOptions());
        case 'NegOptions': return accessor(index, new NegOptions());
        case 'PadV2Options': return accessor(index, new PadV2Options());
        case 'GreaterOptions': return accessor(index, new GreaterOptions());
        case 'GreaterEqualOptions': return accessor(index, new GreaterEqualOptions());
        case 'LessEqualOptions': return accessor(index, new LessEqualOptions());
        case 'SelectOptions': return accessor(index, new SelectOptions());
        case 'SliceOptions': return accessor(index, new SliceOptions());
        case 'TransposeConvOptions': return accessor(index, new TransposeConvOptions());
        case 'SparseToDenseOptions': return accessor(index, new SparseToDenseOptions());
        case 'TileOptions': return accessor(index, new TileOptions());
        case 'ExpandDimsOptions': return accessor(index, new ExpandDimsOptions());
        case 'EqualOptions': return accessor(index, new EqualOptions());
        case 'NotEqualOptions': return accessor(index, new NotEqualOptions());
        case 'ShapeOptions': return accessor(index, new ShapeOptions());
        case 'PowOptions': return accessor(index, new PowOptions());
        case 'ArgMinOptions': return accessor(index, new ArgMinOptions());
        case 'FakeQuantOptions': return accessor(index, new FakeQuantOptions());
        case 'PackOptions': return accessor(index, new PackOptions());
        case 'LogicalOrOptions': return accessor(index, new LogicalOrOptions());
        case 'OneHotOptions': return accessor(index, new OneHotOptions());
        case 'LogicalAndOptions': return accessor(index, new LogicalAndOptions());
        case 'LogicalNotOptions': return accessor(index, new LogicalNotOptions());
        case 'UnpackOptions': return accessor(index, new UnpackOptions());
        case 'FloorDivOptions': return accessor(index, new FloorDivOptions());
        case 'SquareOptions': return accessor(index, new SquareOptions());
        case 'ZerosLikeOptions': return accessor(index, new ZerosLikeOptions());
        case 'FillOptions': return accessor(index, new FillOptions());
        case 'BidirectionalSequenceLSTMOptions': return accessor(index, new BidirectionalSequenceLSTMOptions());
        case 'BidirectionalSequenceRNNOptions': return accessor(index, new BidirectionalSequenceRNNOptions());
        case 'UnidirectionalSequenceLSTMOptions': return accessor(index, new UnidirectionalSequenceLSTMOptions());
        case 'FloorModOptions': return accessor(index, new FloorModOptions());
        case 'RangeOptions': return accessor(index, new RangeOptions());
        case 'ResizeNearestNeighborOptions': return accessor(index, new ResizeNearestNeighborOptions());
        case 'LeakyReluOptions': return accessor(index, new LeakyReluOptions());
        case 'SquaredDifferenceOptions': return accessor(index, new SquaredDifferenceOptions());
        case 'MirrorPadOptions': return accessor(index, new MirrorPadOptions());
        case 'AbsOptions': return accessor(index, new AbsOptions());
        case 'SplitVOptions': return accessor(index, new SplitVOptions());
        case 'UniqueOptions': return accessor(index, new UniqueOptions());
        case 'ReverseV2Options': return accessor(index, new ReverseV2Options());
        case 'AddNOptions': return accessor(index, new AddNOptions());
        case 'GatherNdOptions': return accessor(index, new GatherNdOptions());
        case 'CosOptions': return accessor(index, new CosOptions());
        case 'WhereOptions': return accessor(index, new WhereOptions());
        case 'RankOptions': return accessor(index, new RankOptions());
        case 'ReverseSequenceOptions': return accessor(index, new ReverseSequenceOptions());
        case 'MatrixDiagOptions': return accessor(index, new MatrixDiagOptions());
        case 'QuantizeOptions': return accessor(index, new QuantizeOptions());
        case 'MatrixSetDiagOptions': return accessor(index, new MatrixSetDiagOptions());
        case 'HardSwishOptions': return accessor(index, new HardSwishOptions());
        case 'IfOptions': return accessor(index, new IfOptions());
        case 'WhileOptions': return accessor(index, new WhileOptions());
        case 'DepthToSpaceOptions': return accessor(index, new DepthToSpaceOptions());
        case 'NonMaxSuppressionV4Options': return accessor(index, new NonMaxSuppressionV4Options());
        case 'NonMaxSuppressionV5Options': return accessor(index, new NonMaxSuppressionV5Options());
        case 'ScatterNdOptions': return accessor(index, new ScatterNdOptions());
        case 'SelectV2Options': return accessor(index, new SelectV2Options());
        case 'DensifyOptions': return accessor(index, new DensifyOptions());
        case 'SegmentSumOptions': return accessor(index, new SegmentSumOptions());
        case 'BatchMatMulOptions': return accessor(index, new BatchMatMulOptions());
        case 'CumsumOptions': return accessor(index, new CumsumOptions());
        case 'CallOnceOptions': return accessor(index, new CallOnceOptions());
        case 'BroadcastToOptions': return accessor(index, new BroadcastToOptions());
        case 'Rfft2dOptions': return accessor(index, new Rfft2dOptions());
        case 'Conv3DOptions': return accessor(index, new Conv3DOptions());
        case 'HashtableOptions': return accessor(index, new HashtableOptions());
        case 'HashtableFindOptions': return accessor(index, new HashtableFindOptions());
        case 'HashtableImportOptions': return accessor(index, new HashtableImportOptions());
        case 'HashtableSizeOptions': return accessor(index, new HashtableSizeOptions());
        case 'VarHandleOptions': return accessor(index, new VarHandleOptions());
        case 'ReadVariableOptions': return accessor(index, new ReadVariableOptions());
        case 'AssignVariableOptions': return accessor(index, new AssignVariableOptions());
        case 'RandomOptions': return accessor(index, new RandomOptions());
        case 'BCQGatherOptions': return accessor(index, new BCQGatherOptions());
        case 'BCQFullyConnectedOptions': return accessor(index, new BCQFullyConnectedOptions());
        case 'InstanceNormOptions': return accessor(index, new InstanceNormOptions());
        default: return null;
    }
}
exports.unionListToBuiltinOptions = unionListToBuiltinOptions;
var Padding;
(function (Padding) {
    Padding[Padding["SAME"] = 0] = "SAME";
    Padding[Padding["VALID"] = 1] = "VALID";
})(Padding = exports.Padding || (exports.Padding = {}));
var ActivationFunctionType;
(function (ActivationFunctionType) {
    ActivationFunctionType[ActivationFunctionType["NONE"] = 0] = "NONE";
    ActivationFunctionType[ActivationFunctionType["RELU"] = 1] = "RELU";
    ActivationFunctionType[ActivationFunctionType["RELU_N1_TO_1"] = 2] = "RELU_N1_TO_1";
    ActivationFunctionType[ActivationFunctionType["RELU6"] = 3] = "RELU6";
    ActivationFunctionType[ActivationFunctionType["TANH"] = 4] = "TANH";
    ActivationFunctionType[ActivationFunctionType["SIGN_BIT"] = 5] = "SIGN_BIT";
})(ActivationFunctionType = exports.ActivationFunctionType || (exports.ActivationFunctionType = {}));
var LSHProjectionType;
(function (LSHProjectionType) {
    LSHProjectionType[LSHProjectionType["UNKNOWN"] = 0] = "UNKNOWN";
    LSHProjectionType[LSHProjectionType["SPARSE"] = 1] = "SPARSE";
    LSHProjectionType[LSHProjectionType["DENSE"] = 2] = "DENSE";
})(LSHProjectionType = exports.LSHProjectionType || (exports.LSHProjectionType = {}));
var FullyConnectedOptionsWeightsFormat;
(function (FullyConnectedOptionsWeightsFormat) {
    FullyConnectedOptionsWeightsFormat[FullyConnectedOptionsWeightsFormat["DEFAULT"] = 0] = "DEFAULT";
    FullyConnectedOptionsWeightsFormat[FullyConnectedOptionsWeightsFormat["SHUFFLED4x16INT8"] = 1] = "SHUFFLED4x16INT8";
    FullyConnectedOptionsWeightsFormat[FullyConnectedOptionsWeightsFormat["SHUFFLED16x1FLOAT32"] = 127] = "SHUFFLED16x1FLOAT32";
})(FullyConnectedOptionsWeightsFormat = exports.FullyConnectedOptionsWeightsFormat || (exports.FullyConnectedOptionsWeightsFormat = {}));
var LSTMKernelType;
(function (LSTMKernelType) {
    LSTMKernelType[LSTMKernelType["FULL"] = 0] = "FULL";
    LSTMKernelType[LSTMKernelType["BASIC"] = 1] = "BASIC";
})(LSTMKernelType = exports.LSTMKernelType || (exports.LSTMKernelType = {}));
var CombinerType;
(function (CombinerType) {
    CombinerType[CombinerType["SUM"] = 0] = "SUM";
    CombinerType[CombinerType["MEAN"] = 1] = "MEAN";
    CombinerType[CombinerType["SQRTN"] = 2] = "SQRTN";
})(CombinerType = exports.CombinerType || (exports.CombinerType = {}));
var MirrorPadMode;
(function (MirrorPadMode) {
    MirrorPadMode[MirrorPadMode["REFLECT"] = 0] = "REFLECT";
    MirrorPadMode[MirrorPadMode["SYMMETRIC"] = 1] = "SYMMETRIC";
})(MirrorPadMode = exports.MirrorPadMode || (exports.MirrorPadMode = {}));
var CustomOptionsFormat;
(function (CustomOptionsFormat) {
    CustomOptionsFormat[CustomOptionsFormat["FLEXBUFFERS"] = 0] = "FLEXBUFFERS";
})(CustomOptionsFormat = exports.CustomOptionsFormat || (exports.CustomOptionsFormat = {}));
var DataFormat;
(function (DataFormat) {
    DataFormat[DataFormat["CHANNELS_LAST"] = 0] = "CHANNELS_LAST";
    DataFormat[DataFormat["CHANNELS_FIRST"] = 1] = "CHANNELS_FIRST";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
var CustomQuantization = /** @class */ (function () {
    function CustomQuantization() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CustomQuantization.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CustomQuantization.getRootAsCustomQuantization = function (bb, obj) {
        return (obj || new CustomQuantization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CustomQuantization.getSizePrefixedRootAsCustomQuantization = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CustomQuantization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CustomQuantization.prototype.custom = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    CustomQuantization.prototype.customLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CustomQuantization.prototype.customArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    CustomQuantization.startCustomQuantization = function (builder) {
        builder.startObject(1);
    };
    CustomQuantization.addCustom = function (builder, customOffset) {
        builder.addFieldOffset(0, customOffset, 0);
    };
    CustomQuantization.createCustomVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    CustomQuantization.startCustomVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    CustomQuantization.endCustomQuantization = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CustomQuantization.createCustomQuantization = function (builder, customOffset) {
        CustomQuantization.startCustomQuantization(builder);
        CustomQuantization.addCustom(builder, customOffset);
        return CustomQuantization.endCustomQuantization(builder);
    };
    CustomQuantization.prototype.unpack = function () {
        return new CustomQuantizationT(this.bb.createScalarList(this.custom.bind(this), this.customLength()));
    };
    CustomQuantization.prototype.unpackTo = function (_o) {
        _o.custom = this.bb.createScalarList(this.custom.bind(this), this.customLength());
    };
    return CustomQuantization;
}());
exports.CustomQuantization = CustomQuantization;
var CustomQuantizationT = /** @class */ (function () {
    function CustomQuantizationT(custom) {
        if (custom === void 0) { custom = []; }
        this.custom = custom;
    }
    CustomQuantizationT.prototype.pack = function (builder) {
        var custom = CustomQuantization.createCustomVector(builder, this.custom);
        return CustomQuantization.createCustomQuantization(builder, custom);
    };
    return CustomQuantizationT;
}());
exports.CustomQuantizationT = CustomQuantizationT;
var QuantizationParameters = /** @class */ (function () {
    function QuantizationParameters() {
        this.bb = null;
        this.bb_pos = 0;
    }
    QuantizationParameters.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    QuantizationParameters.getRootAsQuantizationParameters = function (bb, obj) {
        return (obj || new QuantizationParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizationParameters.getSizePrefixedRootAsQuantizationParameters = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new QuantizationParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizationParameters.prototype.min = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.minLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.minArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.max = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.maxLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.maxArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.scale = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.scaleLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.scaleArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.zeroPoint = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    };
    QuantizationParameters.prototype.zeroPointLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.detailsType = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : QuantizationDetails.NONE;
    };
    QuantizationParameters.prototype.details = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    QuantizationParameters.prototype.quantizedDimension = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.startQuantizationParameters = function (builder) {
        builder.startObject(7);
    };
    QuantizationParameters.addMin = function (builder, minOffset) {
        builder.addFieldOffset(0, minOffset, 0);
    };
    QuantizationParameters.createMinVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startMinVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addMax = function (builder, maxOffset) {
        builder.addFieldOffset(1, maxOffset, 0);
    };
    QuantizationParameters.createMaxVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startMaxVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addScale = function (builder, scaleOffset) {
        builder.addFieldOffset(2, scaleOffset, 0);
    };
    QuantizationParameters.createScaleVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startScaleVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addZeroPoint = function (builder, zeroPointOffset) {
        builder.addFieldOffset(3, zeroPointOffset, 0);
    };
    QuantizationParameters.createZeroPointVector = function (builder, data) {
        builder.startVector(8, data.length, 8);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startZeroPointVector = function (builder, numElems) {
        builder.startVector(8, numElems, 8);
    };
    QuantizationParameters.addDetailsType = function (builder, detailsType) {
        builder.addFieldInt8(4, detailsType, QuantizationDetails.NONE);
    };
    QuantizationParameters.addDetails = function (builder, detailsOffset) {
        builder.addFieldOffset(5, detailsOffset, 0);
    };
    QuantizationParameters.addQuantizedDimension = function (builder, quantizedDimension) {
        builder.addFieldInt32(6, quantizedDimension, 0);
    };
    QuantizationParameters.endQuantizationParameters = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    QuantizationParameters.createQuantizationParameters = function (builder, minOffset, maxOffset, scaleOffset, zeroPointOffset, detailsType, detailsOffset, quantizedDimension) {
        QuantizationParameters.startQuantizationParameters(builder);
        QuantizationParameters.addMin(builder, minOffset);
        QuantizationParameters.addMax(builder, maxOffset);
        QuantizationParameters.addScale(builder, scaleOffset);
        QuantizationParameters.addZeroPoint(builder, zeroPointOffset);
        QuantizationParameters.addDetailsType(builder, detailsType);
        QuantizationParameters.addDetails(builder, detailsOffset);
        QuantizationParameters.addQuantizedDimension(builder, quantizedDimension);
        return QuantizationParameters.endQuantizationParameters(builder);
    };
    QuantizationParameters.prototype.unpack = function () {
        var _this = this;
        return new QuantizationParametersT(this.bb.createScalarList(this.min.bind(this), this.minLength()), this.bb.createScalarList(this.max.bind(this), this.maxLength()), this.bb.createScalarList(this.scale.bind(this), this.scaleLength()), this.bb.createScalarList(this.zeroPoint.bind(this), this.zeroPointLength()), this.detailsType(), (function () {
            var temp = unionToQuantizationDetails(_this.detailsType(), _this.details.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.quantizedDimension());
    };
    QuantizationParameters.prototype.unpackTo = function (_o) {
        var _this = this;
        _o.min = this.bb.createScalarList(this.min.bind(this), this.minLength());
        _o.max = this.bb.createScalarList(this.max.bind(this), this.maxLength());
        _o.scale = this.bb.createScalarList(this.scale.bind(this), this.scaleLength());
        _o.zeroPoint = this.bb.createScalarList(this.zeroPoint.bind(this), this.zeroPointLength());
        _o.detailsType = this.detailsType();
        _o.details = (function () {
            var temp = unionToQuantizationDetails(_this.detailsType(), _this.details.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.quantizedDimension = this.quantizedDimension();
    };
    return QuantizationParameters;
}());
exports.QuantizationParameters = QuantizationParameters;
var QuantizationParametersT = /** @class */ (function () {
    function QuantizationParametersT(min, max, scale, zeroPoint, detailsType, details, quantizedDimension) {
        if (min === void 0) { min = []; }
        if (max === void 0) { max = []; }
        if (scale === void 0) { scale = []; }
        if (zeroPoint === void 0) { zeroPoint = []; }
        if (detailsType === void 0) { detailsType = QuantizationDetails.NONE; }
        if (details === void 0) { details = null; }
        if (quantizedDimension === void 0) { quantizedDimension = 0; }
        this.min = min;
        this.max = max;
        this.scale = scale;
        this.zeroPoint = zeroPoint;
        this.detailsType = detailsType;
        this.details = details;
        this.quantizedDimension = quantizedDimension;
    }
    QuantizationParametersT.prototype.pack = function (builder) {
        var min = QuantizationParameters.createMinVector(builder, this.min);
        var max = QuantizationParameters.createMaxVector(builder, this.max);
        var scale = QuantizationParameters.createScaleVector(builder, this.scale);
        var zeroPoint = QuantizationParameters.createZeroPointVector(builder, this.zeroPoint);
        var details = builder.createObjectOffset(this.details);
        return QuantizationParameters.createQuantizationParameters(builder, min, max, scale, zeroPoint, this.detailsType, details, this.quantizedDimension);
    };
    return QuantizationParametersT;
}());
exports.QuantizationParametersT = QuantizationParametersT;
var Int32Vector = /** @class */ (function () {
    function Int32Vector() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Int32Vector.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Int32Vector.getRootAsInt32Vector = function (bb, obj) {
        return (obj || new Int32Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int32Vector.getSizePrefixedRootAsInt32Vector = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Int32Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int32Vector.prototype.values = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Int32Vector.prototype.valuesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Int32Vector.prototype.valuesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Int32Vector.startInt32Vector = function (builder) {
        builder.startObject(1);
    };
    Int32Vector.addValues = function (builder, valuesOffset) {
        builder.addFieldOffset(0, valuesOffset, 0);
    };
    Int32Vector.createValuesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Int32Vector.startValuesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Int32Vector.endInt32Vector = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Int32Vector.createInt32Vector = function (builder, valuesOffset) {
        Int32Vector.startInt32Vector(builder);
        Int32Vector.addValues(builder, valuesOffset);
        return Int32Vector.endInt32Vector(builder);
    };
    Int32Vector.prototype.unpack = function () {
        return new Int32VectorT(this.bb.createScalarList(this.values.bind(this), this.valuesLength()));
    };
    Int32Vector.prototype.unpackTo = function (_o) {
        _o.values = this.bb.createScalarList(this.values.bind(this), this.valuesLength());
    };
    return Int32Vector;
}());
exports.Int32Vector = Int32Vector;
var Int32VectorT = /** @class */ (function () {
    function Int32VectorT(values) {
        if (values === void 0) { values = []; }
        this.values = values;
    }
    Int32VectorT.prototype.pack = function (builder) {
        var values = Int32Vector.createValuesVector(builder, this.values);
        return Int32Vector.createInt32Vector(builder, values);
    };
    return Int32VectorT;
}());
exports.Int32VectorT = Int32VectorT;
var Uint16Vector = /** @class */ (function () {
    function Uint16Vector() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Uint16Vector.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Uint16Vector.getRootAsUint16Vector = function (bb, obj) {
        return (obj || new Uint16Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Uint16Vector.getSizePrefixedRootAsUint16Vector = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Uint16Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Uint16Vector.prototype.values = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb.__vector(this.bb_pos + offset) + index * 2) : 0;
    };
    Uint16Vector.prototype.valuesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Uint16Vector.prototype.valuesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint16Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Uint16Vector.startUint16Vector = function (builder) {
        builder.startObject(1);
    };
    Uint16Vector.addValues = function (builder, valuesOffset) {
        builder.addFieldOffset(0, valuesOffset, 0);
    };
    Uint16Vector.createValuesVector = function (builder, data) {
        builder.startVector(2, data.length, 2);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt16(data[i]);
        }
        return builder.endVector();
    };
    Uint16Vector.startValuesVector = function (builder, numElems) {
        builder.startVector(2, numElems, 2);
    };
    Uint16Vector.endUint16Vector = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Uint16Vector.createUint16Vector = function (builder, valuesOffset) {
        Uint16Vector.startUint16Vector(builder);
        Uint16Vector.addValues(builder, valuesOffset);
        return Uint16Vector.endUint16Vector(builder);
    };
    Uint16Vector.prototype.unpack = function () {
        return new Uint16VectorT(this.bb.createScalarList(this.values.bind(this), this.valuesLength()));
    };
    Uint16Vector.prototype.unpackTo = function (_o) {
        _o.values = this.bb.createScalarList(this.values.bind(this), this.valuesLength());
    };
    return Uint16Vector;
}());
exports.Uint16Vector = Uint16Vector;
var Uint16VectorT = /** @class */ (function () {
    function Uint16VectorT(values) {
        if (values === void 0) { values = []; }
        this.values = values;
    }
    Uint16VectorT.prototype.pack = function (builder) {
        var values = Uint16Vector.createValuesVector(builder, this.values);
        return Uint16Vector.createUint16Vector(builder, values);
    };
    return Uint16VectorT;
}());
exports.Uint16VectorT = Uint16VectorT;
var Uint8Vector = /** @class */ (function () {
    function Uint8Vector() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Uint8Vector.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Uint8Vector.getRootAsUint8Vector = function (bb, obj) {
        return (obj || new Uint8Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Uint8Vector.getSizePrefixedRootAsUint8Vector = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Uint8Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Uint8Vector.prototype.values = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Uint8Vector.prototype.valuesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Uint8Vector.prototype.valuesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Uint8Vector.startUint8Vector = function (builder) {
        builder.startObject(1);
    };
    Uint8Vector.addValues = function (builder, valuesOffset) {
        builder.addFieldOffset(0, valuesOffset, 0);
    };
    Uint8Vector.createValuesVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Uint8Vector.startValuesVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Uint8Vector.endUint8Vector = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Uint8Vector.createUint8Vector = function (builder, valuesOffset) {
        Uint8Vector.startUint8Vector(builder);
        Uint8Vector.addValues(builder, valuesOffset);
        return Uint8Vector.endUint8Vector(builder);
    };
    Uint8Vector.prototype.unpack = function () {
        return new Uint8VectorT(this.bb.createScalarList(this.values.bind(this), this.valuesLength()));
    };
    Uint8Vector.prototype.unpackTo = function (_o) {
        _o.values = this.bb.createScalarList(this.values.bind(this), this.valuesLength());
    };
    return Uint8Vector;
}());
exports.Uint8Vector = Uint8Vector;
var Uint8VectorT = /** @class */ (function () {
    function Uint8VectorT(values) {
        if (values === void 0) { values = []; }
        this.values = values;
    }
    Uint8VectorT.prototype.pack = function (builder) {
        var values = Uint8Vector.createValuesVector(builder, this.values);
        return Uint8Vector.createUint8Vector(builder, values);
    };
    return Uint8VectorT;
}());
exports.Uint8VectorT = Uint8VectorT;
var DimensionMetadata = /** @class */ (function () {
    function DimensionMetadata() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DimensionMetadata.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DimensionMetadata.getRootAsDimensionMetadata = function (bb, obj) {
        return (obj || new DimensionMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DimensionMetadata.getSizePrefixedRootAsDimensionMetadata = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DimensionMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DimensionMetadata.prototype.format = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : DimensionType.DENSE;
    };
    DimensionMetadata.prototype.denseSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DimensionMetadata.prototype.arraySegmentsType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SparseIndexVector.NONE;
    };
    DimensionMetadata.prototype.arraySegments = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    DimensionMetadata.prototype.arrayIndicesType = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SparseIndexVector.NONE;
    };
    DimensionMetadata.prototype.arrayIndices = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    DimensionMetadata.startDimensionMetadata = function (builder) {
        builder.startObject(6);
    };
    DimensionMetadata.addFormat = function (builder, format) {
        builder.addFieldInt8(0, format, DimensionType.DENSE);
    };
    DimensionMetadata.addDenseSize = function (builder, denseSize) {
        builder.addFieldInt32(1, denseSize, 0);
    };
    DimensionMetadata.addArraySegmentsType = function (builder, arraySegmentsType) {
        builder.addFieldInt8(2, arraySegmentsType, SparseIndexVector.NONE);
    };
    DimensionMetadata.addArraySegments = function (builder, arraySegmentsOffset) {
        builder.addFieldOffset(3, arraySegmentsOffset, 0);
    };
    DimensionMetadata.addArrayIndicesType = function (builder, arrayIndicesType) {
        builder.addFieldInt8(4, arrayIndicesType, SparseIndexVector.NONE);
    };
    DimensionMetadata.addArrayIndices = function (builder, arrayIndicesOffset) {
        builder.addFieldOffset(5, arrayIndicesOffset, 0);
    };
    DimensionMetadata.endDimensionMetadata = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DimensionMetadata.createDimensionMetadata = function (builder, format, denseSize, arraySegmentsType, arraySegmentsOffset, arrayIndicesType, arrayIndicesOffset) {
        DimensionMetadata.startDimensionMetadata(builder);
        DimensionMetadata.addFormat(builder, format);
        DimensionMetadata.addDenseSize(builder, denseSize);
        DimensionMetadata.addArraySegmentsType(builder, arraySegmentsType);
        DimensionMetadata.addArraySegments(builder, arraySegmentsOffset);
        DimensionMetadata.addArrayIndicesType(builder, arrayIndicesType);
        DimensionMetadata.addArrayIndices(builder, arrayIndicesOffset);
        return DimensionMetadata.endDimensionMetadata(builder);
    };
    DimensionMetadata.prototype.unpack = function () {
        var _this = this;
        return new DimensionMetadataT(this.format(), this.denseSize(), this.arraySegmentsType(), (function () {
            var temp = unionToSparseIndexVector(_this.arraySegmentsType(), _this.arraySegments.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.arrayIndicesType(), (function () {
            var temp = unionToSparseIndexVector(_this.arrayIndicesType(), _this.arrayIndices.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })());
    };
    DimensionMetadata.prototype.unpackTo = function (_o) {
        var _this = this;
        _o.format = this.format();
        _o.denseSize = this.denseSize();
        _o.arraySegmentsType = this.arraySegmentsType();
        _o.arraySegments = (function () {
            var temp = unionToSparseIndexVector(_this.arraySegmentsType(), _this.arraySegments.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.arrayIndicesType = this.arrayIndicesType();
        _o.arrayIndices = (function () {
            var temp = unionToSparseIndexVector(_this.arrayIndicesType(), _this.arrayIndices.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
    };
    return DimensionMetadata;
}());
exports.DimensionMetadata = DimensionMetadata;
var DimensionMetadataT = /** @class */ (function () {
    function DimensionMetadataT(format, denseSize, arraySegmentsType, arraySegments, arrayIndicesType, arrayIndices) {
        if (format === void 0) { format = DimensionType.DENSE; }
        if (denseSize === void 0) { denseSize = 0; }
        if (arraySegmentsType === void 0) { arraySegmentsType = SparseIndexVector.NONE; }
        if (arraySegments === void 0) { arraySegments = null; }
        if (arrayIndicesType === void 0) { arrayIndicesType = SparseIndexVector.NONE; }
        if (arrayIndices === void 0) { arrayIndices = null; }
        this.format = format;
        this.denseSize = denseSize;
        this.arraySegmentsType = arraySegmentsType;
        this.arraySegments = arraySegments;
        this.arrayIndicesType = arrayIndicesType;
        this.arrayIndices = arrayIndices;
    }
    DimensionMetadataT.prototype.pack = function (builder) {
        var arraySegments = builder.createObjectOffset(this.arraySegments);
        var arrayIndices = builder.createObjectOffset(this.arrayIndices);
        return DimensionMetadata.createDimensionMetadata(builder, this.format, this.denseSize, this.arraySegmentsType, arraySegments, this.arrayIndicesType, arrayIndices);
    };
    return DimensionMetadataT;
}());
exports.DimensionMetadataT = DimensionMetadataT;
var SparsityParameters = /** @class */ (function () {
    function SparsityParameters() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SparsityParameters.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SparsityParameters.getRootAsSparsityParameters = function (bb, obj) {
        return (obj || new SparsityParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SparsityParameters.getSizePrefixedRootAsSparsityParameters = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SparsityParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SparsityParameters.prototype.traversalOrder = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SparsityParameters.prototype.traversalOrderLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SparsityParameters.prototype.traversalOrderArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SparsityParameters.prototype.blockMap = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SparsityParameters.prototype.blockMapLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SparsityParameters.prototype.blockMapArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SparsityParameters.prototype.dimMetadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new DimensionMetadata()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SparsityParameters.prototype.dimMetadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SparsityParameters.startSparsityParameters = function (builder) {
        builder.startObject(3);
    };
    SparsityParameters.addTraversalOrder = function (builder, traversalOrderOffset) {
        builder.addFieldOffset(0, traversalOrderOffset, 0);
    };
    SparsityParameters.createTraversalOrderVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SparsityParameters.startTraversalOrderVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SparsityParameters.addBlockMap = function (builder, blockMapOffset) {
        builder.addFieldOffset(1, blockMapOffset, 0);
    };
    SparsityParameters.createBlockMapVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SparsityParameters.startBlockMapVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SparsityParameters.addDimMetadata = function (builder, dimMetadataOffset) {
        builder.addFieldOffset(2, dimMetadataOffset, 0);
    };
    SparsityParameters.createDimMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SparsityParameters.startDimMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SparsityParameters.endSparsityParameters = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SparsityParameters.createSparsityParameters = function (builder, traversalOrderOffset, blockMapOffset, dimMetadataOffset) {
        SparsityParameters.startSparsityParameters(builder);
        SparsityParameters.addTraversalOrder(builder, traversalOrderOffset);
        SparsityParameters.addBlockMap(builder, blockMapOffset);
        SparsityParameters.addDimMetadata(builder, dimMetadataOffset);
        return SparsityParameters.endSparsityParameters(builder);
    };
    SparsityParameters.prototype.unpack = function () {
        return new SparsityParametersT(this.bb.createScalarList(this.traversalOrder.bind(this), this.traversalOrderLength()), this.bb.createScalarList(this.blockMap.bind(this), this.blockMapLength()), this.bb.createObjList(this.dimMetadata.bind(this), this.dimMetadataLength()));
    };
    SparsityParameters.prototype.unpackTo = function (_o) {
        _o.traversalOrder = this.bb.createScalarList(this.traversalOrder.bind(this), this.traversalOrderLength());
        _o.blockMap = this.bb.createScalarList(this.blockMap.bind(this), this.blockMapLength());
        _o.dimMetadata = this.bb.createObjList(this.dimMetadata.bind(this), this.dimMetadataLength());
    };
    return SparsityParameters;
}());
exports.SparsityParameters = SparsityParameters;
var SparsityParametersT = /** @class */ (function () {
    function SparsityParametersT(traversalOrder, blockMap, dimMetadata) {
        if (traversalOrder === void 0) { traversalOrder = []; }
        if (blockMap === void 0) { blockMap = []; }
        if (dimMetadata === void 0) { dimMetadata = []; }
        this.traversalOrder = traversalOrder;
        this.blockMap = blockMap;
        this.dimMetadata = dimMetadata;
    }
    SparsityParametersT.prototype.pack = function (builder) {
        var traversalOrder = SparsityParameters.createTraversalOrderVector(builder, this.traversalOrder);
        var blockMap = SparsityParameters.createBlockMapVector(builder, this.blockMap);
        var dimMetadata = SparsityParameters.createDimMetadataVector(builder, builder.createObjectOffsetList(this.dimMetadata));
        return SparsityParameters.createSparsityParameters(builder, traversalOrder, blockMap, dimMetadata);
    };
    return SparsityParametersT;
}());
exports.SparsityParametersT = SparsityParametersT;
var Tensor = /** @class */ (function () {
    function Tensor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Tensor.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Tensor.getRootAsTensor = function (bb, obj) {
        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Tensor.getSizePrefixedRootAsTensor = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Tensor.prototype.shape = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Tensor.prototype.shapeLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Tensor.prototype.shapeArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Tensor.prototype.type = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    Tensor.prototype.buffer = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Tensor.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Tensor.prototype.quantization = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new QuantizationParameters()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Tensor.prototype.isVariable = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Tensor.prototype.sparsity = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new SparsityParameters()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Tensor.prototype.shapeSignature = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Tensor.prototype.shapeSignatureLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Tensor.prototype.shapeSignatureArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Tensor.startTensor = function (builder) {
        builder.startObject(8);
    };
    Tensor.addShape = function (builder, shapeOffset) {
        builder.addFieldOffset(0, shapeOffset, 0);
    };
    Tensor.createShapeVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Tensor.startShapeVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Tensor.addType = function (builder, type) {
        builder.addFieldInt8(1, type, TensorType.FLOAT32);
    };
    Tensor.addBuffer = function (builder, buffer) {
        builder.addFieldInt32(2, buffer, 0);
    };
    Tensor.addName = function (builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    };
    Tensor.addQuantization = function (builder, quantizationOffset) {
        builder.addFieldOffset(4, quantizationOffset, 0);
    };
    Tensor.addIsVariable = function (builder, isVariable) {
        builder.addFieldInt8(5, +isVariable, +false);
    };
    Tensor.addSparsity = function (builder, sparsityOffset) {
        builder.addFieldOffset(6, sparsityOffset, 0);
    };
    Tensor.addShapeSignature = function (builder, shapeSignatureOffset) {
        builder.addFieldOffset(7, shapeSignatureOffset, 0);
    };
    Tensor.createShapeSignatureVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Tensor.startShapeSignatureVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Tensor.endTensor = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Tensor.prototype.unpack = function () {
        return new TensorT(this.bb.createScalarList(this.shape.bind(this), this.shapeLength()), this.type(), this.buffer(), this.name(), (this.quantization() !== null ? this.quantization().unpack() : null), this.isVariable(), (this.sparsity() !== null ? this.sparsity().unpack() : null), this.bb.createScalarList(this.shapeSignature.bind(this), this.shapeSignatureLength()));
    };
    Tensor.prototype.unpackTo = function (_o) {
        _o.shape = this.bb.createScalarList(this.shape.bind(this), this.shapeLength());
        _o.type = this.type();
        _o.buffer = this.buffer();
        _o.name = this.name();
        _o.quantization = (this.quantization() !== null ? this.quantization().unpack() : null);
        _o.isVariable = this.isVariable();
        _o.sparsity = (this.sparsity() !== null ? this.sparsity().unpack() : null);
        _o.shapeSignature = this.bb.createScalarList(this.shapeSignature.bind(this), this.shapeSignatureLength());
    };
    return Tensor;
}());
exports.Tensor = Tensor;
var TensorT = /** @class */ (function () {
    function TensorT(shape, type, buffer, name, quantization, isVariable, sparsity, shapeSignature) {
        if (shape === void 0) { shape = []; }
        if (type === void 0) { type = TensorType.FLOAT32; }
        if (buffer === void 0) { buffer = 0; }
        if (name === void 0) { name = null; }
        if (quantization === void 0) { quantization = null; }
        if (isVariable === void 0) { isVariable = false; }
        if (sparsity === void 0) { sparsity = null; }
        if (shapeSignature === void 0) { shapeSignature = []; }
        this.shape = shape;
        this.type = type;
        this.buffer = buffer;
        this.name = name;
        this.quantization = quantization;
        this.isVariable = isVariable;
        this.sparsity = sparsity;
        this.shapeSignature = shapeSignature;
    }
    TensorT.prototype.pack = function (builder) {
        var shape = Tensor.createShapeVector(builder, this.shape);
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        var quantization = (this.quantization !== null ? this.quantization.pack(builder) : 0);
        var sparsity = (this.sparsity !== null ? this.sparsity.pack(builder) : 0);
        var shapeSignature = Tensor.createShapeSignatureVector(builder, this.shapeSignature);
        Tensor.startTensor(builder);
        Tensor.addShape(builder, shape);
        Tensor.addType(builder, this.type);
        Tensor.addBuffer(builder, this.buffer);
        Tensor.addName(builder, name);
        Tensor.addQuantization(builder, quantization);
        Tensor.addIsVariable(builder, this.isVariable);
        Tensor.addSparsity(builder, sparsity);
        Tensor.addShapeSignature(builder, shapeSignature);
        return Tensor.endTensor(builder);
    };
    return TensorT;
}());
exports.TensorT = TensorT;
var Conv2DOptions = /** @class */ (function () {
    function Conv2DOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Conv2DOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Conv2DOptions.getRootAsConv2DOptions = function (bb, obj) {
        return (obj || new Conv2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Conv2DOptions.getSizePrefixedRootAsConv2DOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Conv2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Conv2DOptions.prototype.padding = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Padding.SAME;
    };
    Conv2DOptions.prototype.strideW = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Conv2DOptions.prototype.strideH = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Conv2DOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    Conv2DOptions.prototype.dilationWFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    Conv2DOptions.prototype.dilationHFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    Conv2DOptions.startConv2DOptions = function (builder) {
        builder.startObject(6);
    };
    Conv2DOptions.addPadding = function (builder, padding) {
        builder.addFieldInt8(0, padding, Padding.SAME);
    };
    Conv2DOptions.addStrideW = function (builder, strideW) {
        builder.addFieldInt32(1, strideW, 0);
    };
    Conv2DOptions.addStrideH = function (builder, strideH) {
        builder.addFieldInt32(2, strideH, 0);
    };
    Conv2DOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(3, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    Conv2DOptions.addDilationWFactor = function (builder, dilationWFactor) {
        builder.addFieldInt32(4, dilationWFactor, 1);
    };
    Conv2DOptions.addDilationHFactor = function (builder, dilationHFactor) {
        builder.addFieldInt32(5, dilationHFactor, 1);
    };
    Conv2DOptions.endConv2DOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Conv2DOptions.createConv2DOptions = function (builder, padding, strideW, strideH, fusedActivationFunction, dilationWFactor, dilationHFactor) {
        Conv2DOptions.startConv2DOptions(builder);
        Conv2DOptions.addPadding(builder, padding);
        Conv2DOptions.addStrideW(builder, strideW);
        Conv2DOptions.addStrideH(builder, strideH);
        Conv2DOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        Conv2DOptions.addDilationWFactor(builder, dilationWFactor);
        Conv2DOptions.addDilationHFactor(builder, dilationHFactor);
        return Conv2DOptions.endConv2DOptions(builder);
    };
    Conv2DOptions.prototype.unpack = function () {
        return new Conv2DOptionsT(this.padding(), this.strideW(), this.strideH(), this.fusedActivationFunction(), this.dilationWFactor(), this.dilationHFactor());
    };
    Conv2DOptions.prototype.unpackTo = function (_o) {
        _o.padding = this.padding();
        _o.strideW = this.strideW();
        _o.strideH = this.strideH();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.dilationWFactor = this.dilationWFactor();
        _o.dilationHFactor = this.dilationHFactor();
    };
    return Conv2DOptions;
}());
exports.Conv2DOptions = Conv2DOptions;
var Conv2DOptionsT = /** @class */ (function () {
    function Conv2DOptionsT(padding, strideW, strideH, fusedActivationFunction, dilationWFactor, dilationHFactor) {
        if (padding === void 0) { padding = Padding.SAME; }
        if (strideW === void 0) { strideW = 0; }
        if (strideH === void 0) { strideH = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (dilationWFactor === void 0) { dilationWFactor = 1; }
        if (dilationHFactor === void 0) { dilationHFactor = 1; }
        this.padding = padding;
        this.strideW = strideW;
        this.strideH = strideH;
        this.fusedActivationFunction = fusedActivationFunction;
        this.dilationWFactor = dilationWFactor;
        this.dilationHFactor = dilationHFactor;
    }
    Conv2DOptionsT.prototype.pack = function (builder) {
        return Conv2DOptions.createConv2DOptions(builder, this.padding, this.strideW, this.strideH, this.fusedActivationFunction, this.dilationWFactor, this.dilationHFactor);
    };
    return Conv2DOptionsT;
}());
exports.Conv2DOptionsT = Conv2DOptionsT;
var Conv3DOptions = /** @class */ (function () {
    function Conv3DOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Conv3DOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Conv3DOptions.getRootAsConv3DOptions = function (bb, obj) {
        return (obj || new Conv3DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Conv3DOptions.getSizePrefixedRootAsConv3DOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Conv3DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Conv3DOptions.prototype.padding = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Padding.SAME;
    };
    Conv3DOptions.prototype.strideD = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Conv3DOptions.prototype.strideW = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Conv3DOptions.prototype.strideH = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Conv3DOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    Conv3DOptions.prototype.dilationDFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    Conv3DOptions.prototype.dilationWFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    Conv3DOptions.prototype.dilationHFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    Conv3DOptions.startConv3DOptions = function (builder) {
        builder.startObject(8);
    };
    Conv3DOptions.addPadding = function (builder, padding) {
        builder.addFieldInt8(0, padding, Padding.SAME);
    };
    Conv3DOptions.addStrideD = function (builder, strideD) {
        builder.addFieldInt32(1, strideD, 0);
    };
    Conv3DOptions.addStrideW = function (builder, strideW) {
        builder.addFieldInt32(2, strideW, 0);
    };
    Conv3DOptions.addStrideH = function (builder, strideH) {
        builder.addFieldInt32(3, strideH, 0);
    };
    Conv3DOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(4, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    Conv3DOptions.addDilationDFactor = function (builder, dilationDFactor) {
        builder.addFieldInt32(5, dilationDFactor, 1);
    };
    Conv3DOptions.addDilationWFactor = function (builder, dilationWFactor) {
        builder.addFieldInt32(6, dilationWFactor, 1);
    };
    Conv3DOptions.addDilationHFactor = function (builder, dilationHFactor) {
        builder.addFieldInt32(7, dilationHFactor, 1);
    };
    Conv3DOptions.endConv3DOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Conv3DOptions.createConv3DOptions = function (builder, padding, strideD, strideW, strideH, fusedActivationFunction, dilationDFactor, dilationWFactor, dilationHFactor) {
        Conv3DOptions.startConv3DOptions(builder);
        Conv3DOptions.addPadding(builder, padding);
        Conv3DOptions.addStrideD(builder, strideD);
        Conv3DOptions.addStrideW(builder, strideW);
        Conv3DOptions.addStrideH(builder, strideH);
        Conv3DOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        Conv3DOptions.addDilationDFactor(builder, dilationDFactor);
        Conv3DOptions.addDilationWFactor(builder, dilationWFactor);
        Conv3DOptions.addDilationHFactor(builder, dilationHFactor);
        return Conv3DOptions.endConv3DOptions(builder);
    };
    Conv3DOptions.prototype.unpack = function () {
        return new Conv3DOptionsT(this.padding(), this.strideD(), this.strideW(), this.strideH(), this.fusedActivationFunction(), this.dilationDFactor(), this.dilationWFactor(), this.dilationHFactor());
    };
    Conv3DOptions.prototype.unpackTo = function (_o) {
        _o.padding = this.padding();
        _o.strideD = this.strideD();
        _o.strideW = this.strideW();
        _o.strideH = this.strideH();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.dilationDFactor = this.dilationDFactor();
        _o.dilationWFactor = this.dilationWFactor();
        _o.dilationHFactor = this.dilationHFactor();
    };
    return Conv3DOptions;
}());
exports.Conv3DOptions = Conv3DOptions;
var Conv3DOptionsT = /** @class */ (function () {
    function Conv3DOptionsT(padding, strideD, strideW, strideH, fusedActivationFunction, dilationDFactor, dilationWFactor, dilationHFactor) {
        if (padding === void 0) { padding = Padding.SAME; }
        if (strideD === void 0) { strideD = 0; }
        if (strideW === void 0) { strideW = 0; }
        if (strideH === void 0) { strideH = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (dilationDFactor === void 0) { dilationDFactor = 1; }
        if (dilationWFactor === void 0) { dilationWFactor = 1; }
        if (dilationHFactor === void 0) { dilationHFactor = 1; }
        this.padding = padding;
        this.strideD = strideD;
        this.strideW = strideW;
        this.strideH = strideH;
        this.fusedActivationFunction = fusedActivationFunction;
        this.dilationDFactor = dilationDFactor;
        this.dilationWFactor = dilationWFactor;
        this.dilationHFactor = dilationHFactor;
    }
    Conv3DOptionsT.prototype.pack = function (builder) {
        return Conv3DOptions.createConv3DOptions(builder, this.padding, this.strideD, this.strideW, this.strideH, this.fusedActivationFunction, this.dilationDFactor, this.dilationWFactor, this.dilationHFactor);
    };
    return Conv3DOptionsT;
}());
exports.Conv3DOptionsT = Conv3DOptionsT;
var Pool2DOptions = /** @class */ (function () {
    function Pool2DOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Pool2DOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Pool2DOptions.getRootAsPool2DOptions = function (bb, obj) {
        return (obj || new Pool2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Pool2DOptions.getSizePrefixedRootAsPool2DOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Pool2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Pool2DOptions.prototype.padding = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Padding.SAME;
    };
    Pool2DOptions.prototype.strideW = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Pool2DOptions.prototype.strideH = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Pool2DOptions.prototype.filterWidth = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Pool2DOptions.prototype.filterHeight = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Pool2DOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    Pool2DOptions.startPool2DOptions = function (builder) {
        builder.startObject(6);
    };
    Pool2DOptions.addPadding = function (builder, padding) {
        builder.addFieldInt8(0, padding, Padding.SAME);
    };
    Pool2DOptions.addStrideW = function (builder, strideW) {
        builder.addFieldInt32(1, strideW, 0);
    };
    Pool2DOptions.addStrideH = function (builder, strideH) {
        builder.addFieldInt32(2, strideH, 0);
    };
    Pool2DOptions.addFilterWidth = function (builder, filterWidth) {
        builder.addFieldInt32(3, filterWidth, 0);
    };
    Pool2DOptions.addFilterHeight = function (builder, filterHeight) {
        builder.addFieldInt32(4, filterHeight, 0);
    };
    Pool2DOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(5, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    Pool2DOptions.endPool2DOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Pool2DOptions.createPool2DOptions = function (builder, padding, strideW, strideH, filterWidth, filterHeight, fusedActivationFunction) {
        Pool2DOptions.startPool2DOptions(builder);
        Pool2DOptions.addPadding(builder, padding);
        Pool2DOptions.addStrideW(builder, strideW);
        Pool2DOptions.addStrideH(builder, strideH);
        Pool2DOptions.addFilterWidth(builder, filterWidth);
        Pool2DOptions.addFilterHeight(builder, filterHeight);
        Pool2DOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return Pool2DOptions.endPool2DOptions(builder);
    };
    Pool2DOptions.prototype.unpack = function () {
        return new Pool2DOptionsT(this.padding(), this.strideW(), this.strideH(), this.filterWidth(), this.filterHeight(), this.fusedActivationFunction());
    };
    Pool2DOptions.prototype.unpackTo = function (_o) {
        _o.padding = this.padding();
        _o.strideW = this.strideW();
        _o.strideH = this.strideH();
        _o.filterWidth = this.filterWidth();
        _o.filterHeight = this.filterHeight();
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return Pool2DOptions;
}());
exports.Pool2DOptions = Pool2DOptions;
var Pool2DOptionsT = /** @class */ (function () {
    function Pool2DOptionsT(padding, strideW, strideH, filterWidth, filterHeight, fusedActivationFunction) {
        if (padding === void 0) { padding = Padding.SAME; }
        if (strideW === void 0) { strideW = 0; }
        if (strideH === void 0) { strideH = 0; }
        if (filterWidth === void 0) { filterWidth = 0; }
        if (filterHeight === void 0) { filterHeight = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.padding = padding;
        this.strideW = strideW;
        this.strideH = strideH;
        this.filterWidth = filterWidth;
        this.filterHeight = filterHeight;
        this.fusedActivationFunction = fusedActivationFunction;
    }
    Pool2DOptionsT.prototype.pack = function (builder) {
        return Pool2DOptions.createPool2DOptions(builder, this.padding, this.strideW, this.strideH, this.filterWidth, this.filterHeight, this.fusedActivationFunction);
    };
    return Pool2DOptionsT;
}());
exports.Pool2DOptionsT = Pool2DOptionsT;
var DepthwiseConv2DOptions = /** @class */ (function () {
    function DepthwiseConv2DOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DepthwiseConv2DOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DepthwiseConv2DOptions.getRootAsDepthwiseConv2DOptions = function (bb, obj) {
        return (obj || new DepthwiseConv2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DepthwiseConv2DOptions.getSizePrefixedRootAsDepthwiseConv2DOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DepthwiseConv2DOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DepthwiseConv2DOptions.prototype.padding = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Padding.SAME;
    };
    DepthwiseConv2DOptions.prototype.strideW = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DepthwiseConv2DOptions.prototype.strideH = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DepthwiseConv2DOptions.prototype.depthMultiplier = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DepthwiseConv2DOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    DepthwiseConv2DOptions.prototype.dilationWFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    DepthwiseConv2DOptions.prototype.dilationHFactor = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    DepthwiseConv2DOptions.startDepthwiseConv2DOptions = function (builder) {
        builder.startObject(7);
    };
    DepthwiseConv2DOptions.addPadding = function (builder, padding) {
        builder.addFieldInt8(0, padding, Padding.SAME);
    };
    DepthwiseConv2DOptions.addStrideW = function (builder, strideW) {
        builder.addFieldInt32(1, strideW, 0);
    };
    DepthwiseConv2DOptions.addStrideH = function (builder, strideH) {
        builder.addFieldInt32(2, strideH, 0);
    };
    DepthwiseConv2DOptions.addDepthMultiplier = function (builder, depthMultiplier) {
        builder.addFieldInt32(3, depthMultiplier, 0);
    };
    DepthwiseConv2DOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(4, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    DepthwiseConv2DOptions.addDilationWFactor = function (builder, dilationWFactor) {
        builder.addFieldInt32(5, dilationWFactor, 1);
    };
    DepthwiseConv2DOptions.addDilationHFactor = function (builder, dilationHFactor) {
        builder.addFieldInt32(6, dilationHFactor, 1);
    };
    DepthwiseConv2DOptions.endDepthwiseConv2DOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DepthwiseConv2DOptions.createDepthwiseConv2DOptions = function (builder, padding, strideW, strideH, depthMultiplier, fusedActivationFunction, dilationWFactor, dilationHFactor) {
        DepthwiseConv2DOptions.startDepthwiseConv2DOptions(builder);
        DepthwiseConv2DOptions.addPadding(builder, padding);
        DepthwiseConv2DOptions.addStrideW(builder, strideW);
        DepthwiseConv2DOptions.addStrideH(builder, strideH);
        DepthwiseConv2DOptions.addDepthMultiplier(builder, depthMultiplier);
        DepthwiseConv2DOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        DepthwiseConv2DOptions.addDilationWFactor(builder, dilationWFactor);
        DepthwiseConv2DOptions.addDilationHFactor(builder, dilationHFactor);
        return DepthwiseConv2DOptions.endDepthwiseConv2DOptions(builder);
    };
    DepthwiseConv2DOptions.prototype.unpack = function () {
        return new DepthwiseConv2DOptionsT(this.padding(), this.strideW(), this.strideH(), this.depthMultiplier(), this.fusedActivationFunction(), this.dilationWFactor(), this.dilationHFactor());
    };
    DepthwiseConv2DOptions.prototype.unpackTo = function (_o) {
        _o.padding = this.padding();
        _o.strideW = this.strideW();
        _o.strideH = this.strideH();
        _o.depthMultiplier = this.depthMultiplier();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.dilationWFactor = this.dilationWFactor();
        _o.dilationHFactor = this.dilationHFactor();
    };
    return DepthwiseConv2DOptions;
}());
exports.DepthwiseConv2DOptions = DepthwiseConv2DOptions;
var DepthwiseConv2DOptionsT = /** @class */ (function () {
    function DepthwiseConv2DOptionsT(padding, strideW, strideH, depthMultiplier, fusedActivationFunction, dilationWFactor, dilationHFactor) {
        if (padding === void 0) { padding = Padding.SAME; }
        if (strideW === void 0) { strideW = 0; }
        if (strideH === void 0) { strideH = 0; }
        if (depthMultiplier === void 0) { depthMultiplier = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (dilationWFactor === void 0) { dilationWFactor = 1; }
        if (dilationHFactor === void 0) { dilationHFactor = 1; }
        this.padding = padding;
        this.strideW = strideW;
        this.strideH = strideH;
        this.depthMultiplier = depthMultiplier;
        this.fusedActivationFunction = fusedActivationFunction;
        this.dilationWFactor = dilationWFactor;
        this.dilationHFactor = dilationHFactor;
    }
    DepthwiseConv2DOptionsT.prototype.pack = function (builder) {
        return DepthwiseConv2DOptions.createDepthwiseConv2DOptions(builder, this.padding, this.strideW, this.strideH, this.depthMultiplier, this.fusedActivationFunction, this.dilationWFactor, this.dilationHFactor);
    };
    return DepthwiseConv2DOptionsT;
}());
exports.DepthwiseConv2DOptionsT = DepthwiseConv2DOptionsT;
var ConcatEmbeddingsOptions = /** @class */ (function () {
    function ConcatEmbeddingsOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ConcatEmbeddingsOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ConcatEmbeddingsOptions.getRootAsConcatEmbeddingsOptions = function (bb, obj) {
        return (obj || new ConcatEmbeddingsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ConcatEmbeddingsOptions.getSizePrefixedRootAsConcatEmbeddingsOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConcatEmbeddingsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ConcatEmbeddingsOptions.prototype.numChannels = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ConcatEmbeddingsOptions.prototype.numColumnsPerChannel = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    ConcatEmbeddingsOptions.prototype.numColumnsPerChannelLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    ConcatEmbeddingsOptions.prototype.numColumnsPerChannelArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    ConcatEmbeddingsOptions.prototype.embeddingDimPerChannel = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    ConcatEmbeddingsOptions.prototype.embeddingDimPerChannelLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    ConcatEmbeddingsOptions.prototype.embeddingDimPerChannelArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    ConcatEmbeddingsOptions.startConcatEmbeddingsOptions = function (builder) {
        builder.startObject(3);
    };
    ConcatEmbeddingsOptions.addNumChannels = function (builder, numChannels) {
        builder.addFieldInt32(0, numChannels, 0);
    };
    ConcatEmbeddingsOptions.addNumColumnsPerChannel = function (builder, numColumnsPerChannelOffset) {
        builder.addFieldOffset(1, numColumnsPerChannelOffset, 0);
    };
    ConcatEmbeddingsOptions.createNumColumnsPerChannelVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    ConcatEmbeddingsOptions.startNumColumnsPerChannelVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ConcatEmbeddingsOptions.addEmbeddingDimPerChannel = function (builder, embeddingDimPerChannelOffset) {
        builder.addFieldOffset(2, embeddingDimPerChannelOffset, 0);
    };
    ConcatEmbeddingsOptions.createEmbeddingDimPerChannelVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    ConcatEmbeddingsOptions.startEmbeddingDimPerChannelVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ConcatEmbeddingsOptions.endConcatEmbeddingsOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ConcatEmbeddingsOptions.createConcatEmbeddingsOptions = function (builder, numChannels, numColumnsPerChannelOffset, embeddingDimPerChannelOffset) {
        ConcatEmbeddingsOptions.startConcatEmbeddingsOptions(builder);
        ConcatEmbeddingsOptions.addNumChannels(builder, numChannels);
        ConcatEmbeddingsOptions.addNumColumnsPerChannel(builder, numColumnsPerChannelOffset);
        ConcatEmbeddingsOptions.addEmbeddingDimPerChannel(builder, embeddingDimPerChannelOffset);
        return ConcatEmbeddingsOptions.endConcatEmbeddingsOptions(builder);
    };
    ConcatEmbeddingsOptions.prototype.unpack = function () {
        return new ConcatEmbeddingsOptionsT(this.numChannels(), this.bb.createScalarList(this.numColumnsPerChannel.bind(this), this.numColumnsPerChannelLength()), this.bb.createScalarList(this.embeddingDimPerChannel.bind(this), this.embeddingDimPerChannelLength()));
    };
    ConcatEmbeddingsOptions.prototype.unpackTo = function (_o) {
        _o.numChannels = this.numChannels();
        _o.numColumnsPerChannel = this.bb.createScalarList(this.numColumnsPerChannel.bind(this), this.numColumnsPerChannelLength());
        _o.embeddingDimPerChannel = this.bb.createScalarList(this.embeddingDimPerChannel.bind(this), this.embeddingDimPerChannelLength());
    };
    return ConcatEmbeddingsOptions;
}());
exports.ConcatEmbeddingsOptions = ConcatEmbeddingsOptions;
var ConcatEmbeddingsOptionsT = /** @class */ (function () {
    function ConcatEmbeddingsOptionsT(numChannels, numColumnsPerChannel, embeddingDimPerChannel) {
        if (numChannels === void 0) { numChannels = 0; }
        if (numColumnsPerChannel === void 0) { numColumnsPerChannel = []; }
        if (embeddingDimPerChannel === void 0) { embeddingDimPerChannel = []; }
        this.numChannels = numChannels;
        this.numColumnsPerChannel = numColumnsPerChannel;
        this.embeddingDimPerChannel = embeddingDimPerChannel;
    }
    ConcatEmbeddingsOptionsT.prototype.pack = function (builder) {
        var numColumnsPerChannel = ConcatEmbeddingsOptions.createNumColumnsPerChannelVector(builder, this.numColumnsPerChannel);
        var embeddingDimPerChannel = ConcatEmbeddingsOptions.createEmbeddingDimPerChannelVector(builder, this.embeddingDimPerChannel);
        return ConcatEmbeddingsOptions.createConcatEmbeddingsOptions(builder, this.numChannels, numColumnsPerChannel, embeddingDimPerChannel);
    };
    return ConcatEmbeddingsOptionsT;
}());
exports.ConcatEmbeddingsOptionsT = ConcatEmbeddingsOptionsT;
var LSHProjectionOptions = /** @class */ (function () {
    function LSHProjectionOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LSHProjectionOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LSHProjectionOptions.getRootAsLSHProjectionOptions = function (bb, obj) {
        return (obj || new LSHProjectionOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSHProjectionOptions.getSizePrefixedRootAsLSHProjectionOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LSHProjectionOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSHProjectionOptions.prototype.type = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : LSHProjectionType.UNKNOWN;
    };
    LSHProjectionOptions.startLSHProjectionOptions = function (builder) {
        builder.startObject(1);
    };
    LSHProjectionOptions.addType = function (builder, type) {
        builder.addFieldInt8(0, type, LSHProjectionType.UNKNOWN);
    };
    LSHProjectionOptions.endLSHProjectionOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LSHProjectionOptions.createLSHProjectionOptions = function (builder, type) {
        LSHProjectionOptions.startLSHProjectionOptions(builder);
        LSHProjectionOptions.addType(builder, type);
        return LSHProjectionOptions.endLSHProjectionOptions(builder);
    };
    LSHProjectionOptions.prototype.unpack = function () {
        return new LSHProjectionOptionsT(this.type());
    };
    LSHProjectionOptions.prototype.unpackTo = function (_o) {
        _o.type = this.type();
    };
    return LSHProjectionOptions;
}());
exports.LSHProjectionOptions = LSHProjectionOptions;
var LSHProjectionOptionsT = /** @class */ (function () {
    function LSHProjectionOptionsT(type) {
        if (type === void 0) { type = LSHProjectionType.UNKNOWN; }
        this.type = type;
    }
    LSHProjectionOptionsT.prototype.pack = function (builder) {
        return LSHProjectionOptions.createLSHProjectionOptions(builder, this.type);
    };
    return LSHProjectionOptionsT;
}());
exports.LSHProjectionOptionsT = LSHProjectionOptionsT;
var SVDFOptions = /** @class */ (function () {
    function SVDFOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SVDFOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SVDFOptions.getRootAsSVDFOptions = function (bb, obj) {
        return (obj || new SVDFOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVDFOptions.getSizePrefixedRootAsSVDFOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SVDFOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVDFOptions.prototype.rank = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SVDFOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    SVDFOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SVDFOptions.startSVDFOptions = function (builder) {
        builder.startObject(3);
    };
    SVDFOptions.addRank = function (builder, rank) {
        builder.addFieldInt32(0, rank, 0);
    };
    SVDFOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    SVDFOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
    };
    SVDFOptions.endSVDFOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SVDFOptions.createSVDFOptions = function (builder, rank, fusedActivationFunction, asymmetricQuantizeInputs) {
        SVDFOptions.startSVDFOptions(builder);
        SVDFOptions.addRank(builder, rank);
        SVDFOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        SVDFOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return SVDFOptions.endSVDFOptions(builder);
    };
    SVDFOptions.prototype.unpack = function () {
        return new SVDFOptionsT(this.rank(), this.fusedActivationFunction(), this.asymmetricQuantizeInputs());
    };
    SVDFOptions.prototype.unpackTo = function (_o) {
        _o.rank = this.rank();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return SVDFOptions;
}());
exports.SVDFOptions = SVDFOptions;
var SVDFOptionsT = /** @class */ (function () {
    function SVDFOptionsT(rank, fusedActivationFunction, asymmetricQuantizeInputs) {
        if (rank === void 0) { rank = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.rank = rank;
        this.fusedActivationFunction = fusedActivationFunction;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    SVDFOptionsT.prototype.pack = function (builder) {
        return SVDFOptions.createSVDFOptions(builder, this.rank, this.fusedActivationFunction, this.asymmetricQuantizeInputs);
    };
    return SVDFOptionsT;
}());
exports.SVDFOptionsT = SVDFOptionsT;
var RNNOptions = /** @class */ (function () {
    function RNNOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RNNOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RNNOptions.getRootAsRNNOptions = function (bb, obj) {
        return (obj || new RNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RNNOptions.getSizePrefixedRootAsRNNOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RNNOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    RNNOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    RNNOptions.startRNNOptions = function (builder) {
        builder.startObject(2);
    };
    RNNOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    RNNOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(1, +asymmetricQuantizeInputs, +false);
    };
    RNNOptions.endRNNOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RNNOptions.createRNNOptions = function (builder, fusedActivationFunction, asymmetricQuantizeInputs) {
        RNNOptions.startRNNOptions(builder);
        RNNOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        RNNOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return RNNOptions.endRNNOptions(builder);
    };
    RNNOptions.prototype.unpack = function () {
        return new RNNOptionsT(this.fusedActivationFunction(), this.asymmetricQuantizeInputs());
    };
    RNNOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return RNNOptions;
}());
exports.RNNOptions = RNNOptions;
var RNNOptionsT = /** @class */ (function () {
    function RNNOptionsT(fusedActivationFunction, asymmetricQuantizeInputs) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    RNNOptionsT.prototype.pack = function (builder) {
        return RNNOptions.createRNNOptions(builder, this.fusedActivationFunction, this.asymmetricQuantizeInputs);
    };
    return RNNOptionsT;
}());
exports.RNNOptionsT = RNNOptionsT;
var SequenceRNNOptions = /** @class */ (function () {
    function SequenceRNNOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SequenceRNNOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SequenceRNNOptions.getRootAsSequenceRNNOptions = function (bb, obj) {
        return (obj || new SequenceRNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SequenceRNNOptions.getSizePrefixedRootAsSequenceRNNOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SequenceRNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SequenceRNNOptions.prototype.timeMajor = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SequenceRNNOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    SequenceRNNOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SequenceRNNOptions.startSequenceRNNOptions = function (builder) {
        builder.startObject(3);
    };
    SequenceRNNOptions.addTimeMajor = function (builder, timeMajor) {
        builder.addFieldInt8(0, +timeMajor, +false);
    };
    SequenceRNNOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    SequenceRNNOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
    };
    SequenceRNNOptions.endSequenceRNNOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SequenceRNNOptions.createSequenceRNNOptions = function (builder, timeMajor, fusedActivationFunction, asymmetricQuantizeInputs) {
        SequenceRNNOptions.startSequenceRNNOptions(builder);
        SequenceRNNOptions.addTimeMajor(builder, timeMajor);
        SequenceRNNOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        SequenceRNNOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return SequenceRNNOptions.endSequenceRNNOptions(builder);
    };
    SequenceRNNOptions.prototype.unpack = function () {
        return new SequenceRNNOptionsT(this.timeMajor(), this.fusedActivationFunction(), this.asymmetricQuantizeInputs());
    };
    SequenceRNNOptions.prototype.unpackTo = function (_o) {
        _o.timeMajor = this.timeMajor();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return SequenceRNNOptions;
}());
exports.SequenceRNNOptions = SequenceRNNOptions;
var SequenceRNNOptionsT = /** @class */ (function () {
    function SequenceRNNOptionsT(timeMajor, fusedActivationFunction, asymmetricQuantizeInputs) {
        if (timeMajor === void 0) { timeMajor = false; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.timeMajor = timeMajor;
        this.fusedActivationFunction = fusedActivationFunction;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    SequenceRNNOptionsT.prototype.pack = function (builder) {
        return SequenceRNNOptions.createSequenceRNNOptions(builder, this.timeMajor, this.fusedActivationFunction, this.asymmetricQuantizeInputs);
    };
    return SequenceRNNOptionsT;
}());
exports.SequenceRNNOptionsT = SequenceRNNOptionsT;
var BidirectionalSequenceRNNOptions = /** @class */ (function () {
    function BidirectionalSequenceRNNOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BidirectionalSequenceRNNOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BidirectionalSequenceRNNOptions.getRootAsBidirectionalSequenceRNNOptions = function (bb, obj) {
        return (obj || new BidirectionalSequenceRNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BidirectionalSequenceRNNOptions.getSizePrefixedRootAsBidirectionalSequenceRNNOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BidirectionalSequenceRNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BidirectionalSequenceRNNOptions.prototype.timeMajor = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BidirectionalSequenceRNNOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    BidirectionalSequenceRNNOptions.prototype.mergeOutputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BidirectionalSequenceRNNOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BidirectionalSequenceRNNOptions.startBidirectionalSequenceRNNOptions = function (builder) {
        builder.startObject(4);
    };
    BidirectionalSequenceRNNOptions.addTimeMajor = function (builder, timeMajor) {
        builder.addFieldInt8(0, +timeMajor, +false);
    };
    BidirectionalSequenceRNNOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    BidirectionalSequenceRNNOptions.addMergeOutputs = function (builder, mergeOutputs) {
        builder.addFieldInt8(2, +mergeOutputs, +false);
    };
    BidirectionalSequenceRNNOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(3, +asymmetricQuantizeInputs, +false);
    };
    BidirectionalSequenceRNNOptions.endBidirectionalSequenceRNNOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BidirectionalSequenceRNNOptions.createBidirectionalSequenceRNNOptions = function (builder, timeMajor, fusedActivationFunction, mergeOutputs, asymmetricQuantizeInputs) {
        BidirectionalSequenceRNNOptions.startBidirectionalSequenceRNNOptions(builder);
        BidirectionalSequenceRNNOptions.addTimeMajor(builder, timeMajor);
        BidirectionalSequenceRNNOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        BidirectionalSequenceRNNOptions.addMergeOutputs(builder, mergeOutputs);
        BidirectionalSequenceRNNOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return BidirectionalSequenceRNNOptions.endBidirectionalSequenceRNNOptions(builder);
    };
    BidirectionalSequenceRNNOptions.prototype.unpack = function () {
        return new BidirectionalSequenceRNNOptionsT(this.timeMajor(), this.fusedActivationFunction(), this.mergeOutputs(), this.asymmetricQuantizeInputs());
    };
    BidirectionalSequenceRNNOptions.prototype.unpackTo = function (_o) {
        _o.timeMajor = this.timeMajor();
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.mergeOutputs = this.mergeOutputs();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return BidirectionalSequenceRNNOptions;
}());
exports.BidirectionalSequenceRNNOptions = BidirectionalSequenceRNNOptions;
var BidirectionalSequenceRNNOptionsT = /** @class */ (function () {
    function BidirectionalSequenceRNNOptionsT(timeMajor, fusedActivationFunction, mergeOutputs, asymmetricQuantizeInputs) {
        if (timeMajor === void 0) { timeMajor = false; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (mergeOutputs === void 0) { mergeOutputs = false; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.timeMajor = timeMajor;
        this.fusedActivationFunction = fusedActivationFunction;
        this.mergeOutputs = mergeOutputs;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    BidirectionalSequenceRNNOptionsT.prototype.pack = function (builder) {
        return BidirectionalSequenceRNNOptions.createBidirectionalSequenceRNNOptions(builder, this.timeMajor, this.fusedActivationFunction, this.mergeOutputs, this.asymmetricQuantizeInputs);
    };
    return BidirectionalSequenceRNNOptionsT;
}());
exports.BidirectionalSequenceRNNOptionsT = BidirectionalSequenceRNNOptionsT;
var FullyConnectedOptions = /** @class */ (function () {
    function FullyConnectedOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FullyConnectedOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FullyConnectedOptions.getRootAsFullyConnectedOptions = function (bb, obj) {
        return (obj || new FullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FullyConnectedOptions.getSizePrefixedRootAsFullyConnectedOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FullyConnectedOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    FullyConnectedOptions.prototype.weightsFormat = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : FullyConnectedOptionsWeightsFormat.DEFAULT;
    };
    FullyConnectedOptions.prototype.keepNumDims = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    FullyConnectedOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    FullyConnectedOptions.startFullyConnectedOptions = function (builder) {
        builder.startObject(4);
    };
    FullyConnectedOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    FullyConnectedOptions.addWeightsFormat = function (builder, weightsFormat) {
        builder.addFieldInt8(1, weightsFormat, FullyConnectedOptionsWeightsFormat.DEFAULT);
    };
    FullyConnectedOptions.addKeepNumDims = function (builder, keepNumDims) {
        builder.addFieldInt8(2, +keepNumDims, +false);
    };
    FullyConnectedOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(3, +asymmetricQuantizeInputs, +false);
    };
    FullyConnectedOptions.endFullyConnectedOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FullyConnectedOptions.createFullyConnectedOptions = function (builder, fusedActivationFunction, weightsFormat, keepNumDims, asymmetricQuantizeInputs) {
        FullyConnectedOptions.startFullyConnectedOptions(builder);
        FullyConnectedOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        FullyConnectedOptions.addWeightsFormat(builder, weightsFormat);
        FullyConnectedOptions.addKeepNumDims(builder, keepNumDims);
        FullyConnectedOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return FullyConnectedOptions.endFullyConnectedOptions(builder);
    };
    FullyConnectedOptions.prototype.unpack = function () {
        return new FullyConnectedOptionsT(this.fusedActivationFunction(), this.weightsFormat(), this.keepNumDims(), this.asymmetricQuantizeInputs());
    };
    FullyConnectedOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.weightsFormat = this.weightsFormat();
        _o.keepNumDims = this.keepNumDims();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return FullyConnectedOptions;
}());
exports.FullyConnectedOptions = FullyConnectedOptions;
var FullyConnectedOptionsT = /** @class */ (function () {
    function FullyConnectedOptionsT(fusedActivationFunction, weightsFormat, keepNumDims, asymmetricQuantizeInputs) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (weightsFormat === void 0) { weightsFormat = FullyConnectedOptionsWeightsFormat.DEFAULT; }
        if (keepNumDims === void 0) { keepNumDims = false; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.weightsFormat = weightsFormat;
        this.keepNumDims = keepNumDims;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    FullyConnectedOptionsT.prototype.pack = function (builder) {
        return FullyConnectedOptions.createFullyConnectedOptions(builder, this.fusedActivationFunction, this.weightsFormat, this.keepNumDims, this.asymmetricQuantizeInputs);
    };
    return FullyConnectedOptionsT;
}());
exports.FullyConnectedOptionsT = FullyConnectedOptionsT;
var SoftmaxOptions = /** @class */ (function () {
    function SoftmaxOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SoftmaxOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SoftmaxOptions.getRootAsSoftmaxOptions = function (bb, obj) {
        return (obj || new SoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SoftmaxOptions.getSizePrefixedRootAsSoftmaxOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SoftmaxOptions.prototype.beta = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    SoftmaxOptions.startSoftmaxOptions = function (builder) {
        builder.startObject(1);
    };
    SoftmaxOptions.addBeta = function (builder, beta) {
        builder.addFieldFloat32(0, beta, 0.0);
    };
    SoftmaxOptions.endSoftmaxOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SoftmaxOptions.createSoftmaxOptions = function (builder, beta) {
        SoftmaxOptions.startSoftmaxOptions(builder);
        SoftmaxOptions.addBeta(builder, beta);
        return SoftmaxOptions.endSoftmaxOptions(builder);
    };
    SoftmaxOptions.prototype.unpack = function () {
        return new SoftmaxOptionsT(this.beta());
    };
    SoftmaxOptions.prototype.unpackTo = function (_o) {
        _o.beta = this.beta();
    };
    return SoftmaxOptions;
}());
exports.SoftmaxOptions = SoftmaxOptions;
var SoftmaxOptionsT = /** @class */ (function () {
    function SoftmaxOptionsT(beta) {
        if (beta === void 0) { beta = 0.0; }
        this.beta = beta;
    }
    SoftmaxOptionsT.prototype.pack = function (builder) {
        return SoftmaxOptions.createSoftmaxOptions(builder, this.beta);
    };
    return SoftmaxOptionsT;
}());
exports.SoftmaxOptionsT = SoftmaxOptionsT;
var ConcatenationOptions = /** @class */ (function () {
    function ConcatenationOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ConcatenationOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ConcatenationOptions.getRootAsConcatenationOptions = function (bb, obj) {
        return (obj || new ConcatenationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ConcatenationOptions.getSizePrefixedRootAsConcatenationOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ConcatenationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ConcatenationOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ConcatenationOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    ConcatenationOptions.startConcatenationOptions = function (builder) {
        builder.startObject(2);
    };
    ConcatenationOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(0, axis, 0);
    };
    ConcatenationOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    ConcatenationOptions.endConcatenationOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ConcatenationOptions.createConcatenationOptions = function (builder, axis, fusedActivationFunction) {
        ConcatenationOptions.startConcatenationOptions(builder);
        ConcatenationOptions.addAxis(builder, axis);
        ConcatenationOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return ConcatenationOptions.endConcatenationOptions(builder);
    };
    ConcatenationOptions.prototype.unpack = function () {
        return new ConcatenationOptionsT(this.axis(), this.fusedActivationFunction());
    };
    ConcatenationOptions.prototype.unpackTo = function (_o) {
        _o.axis = this.axis();
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return ConcatenationOptions;
}());
exports.ConcatenationOptions = ConcatenationOptions;
var ConcatenationOptionsT = /** @class */ (function () {
    function ConcatenationOptionsT(axis, fusedActivationFunction) {
        if (axis === void 0) { axis = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.axis = axis;
        this.fusedActivationFunction = fusedActivationFunction;
    }
    ConcatenationOptionsT.prototype.pack = function (builder) {
        return ConcatenationOptions.createConcatenationOptions(builder, this.axis, this.fusedActivationFunction);
    };
    return ConcatenationOptionsT;
}());
exports.ConcatenationOptionsT = ConcatenationOptionsT;
var AddOptions = /** @class */ (function () {
    function AddOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AddOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AddOptions.getRootAsAddOptions = function (bb, obj) {
        return (obj || new AddOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AddOptions.getSizePrefixedRootAsAddOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AddOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AddOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    AddOptions.prototype.potScaleInt16 = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    };
    AddOptions.startAddOptions = function (builder) {
        builder.startObject(2);
    };
    AddOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    AddOptions.addPotScaleInt16 = function (builder, potScaleInt16) {
        builder.addFieldInt8(1, +potScaleInt16, +true);
    };
    AddOptions.endAddOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AddOptions.createAddOptions = function (builder, fusedActivationFunction, potScaleInt16) {
        AddOptions.startAddOptions(builder);
        AddOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        AddOptions.addPotScaleInt16(builder, potScaleInt16);
        return AddOptions.endAddOptions(builder);
    };
    AddOptions.prototype.unpack = function () {
        return new AddOptionsT(this.fusedActivationFunction(), this.potScaleInt16());
    };
    AddOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.potScaleInt16 = this.potScaleInt16();
    };
    return AddOptions;
}());
exports.AddOptions = AddOptions;
var AddOptionsT = /** @class */ (function () {
    function AddOptionsT(fusedActivationFunction, potScaleInt16) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (potScaleInt16 === void 0) { potScaleInt16 = true; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.potScaleInt16 = potScaleInt16;
    }
    AddOptionsT.prototype.pack = function (builder) {
        return AddOptions.createAddOptions(builder, this.fusedActivationFunction, this.potScaleInt16);
    };
    return AddOptionsT;
}());
exports.AddOptionsT = AddOptionsT;
var MulOptions = /** @class */ (function () {
    function MulOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MulOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MulOptions.getRootAsMulOptions = function (bb, obj) {
        return (obj || new MulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MulOptions.getSizePrefixedRootAsMulOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MulOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    MulOptions.startMulOptions = function (builder) {
        builder.startObject(1);
    };
    MulOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    MulOptions.endMulOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MulOptions.createMulOptions = function (builder, fusedActivationFunction) {
        MulOptions.startMulOptions(builder);
        MulOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return MulOptions.endMulOptions(builder);
    };
    MulOptions.prototype.unpack = function () {
        return new MulOptionsT(this.fusedActivationFunction());
    };
    MulOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return MulOptions;
}());
exports.MulOptions = MulOptions;
var MulOptionsT = /** @class */ (function () {
    function MulOptionsT(fusedActivationFunction) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.fusedActivationFunction = fusedActivationFunction;
    }
    MulOptionsT.prototype.pack = function (builder) {
        return MulOptions.createMulOptions(builder, this.fusedActivationFunction);
    };
    return MulOptionsT;
}());
exports.MulOptionsT = MulOptionsT;
var L2NormOptions = /** @class */ (function () {
    function L2NormOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    L2NormOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    L2NormOptions.getRootAsL2NormOptions = function (bb, obj) {
        return (obj || new L2NormOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    L2NormOptions.getSizePrefixedRootAsL2NormOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new L2NormOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    L2NormOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    L2NormOptions.startL2NormOptions = function (builder) {
        builder.startObject(1);
    };
    L2NormOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    L2NormOptions.endL2NormOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    L2NormOptions.createL2NormOptions = function (builder, fusedActivationFunction) {
        L2NormOptions.startL2NormOptions(builder);
        L2NormOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return L2NormOptions.endL2NormOptions(builder);
    };
    L2NormOptions.prototype.unpack = function () {
        return new L2NormOptionsT(this.fusedActivationFunction());
    };
    L2NormOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return L2NormOptions;
}());
exports.L2NormOptions = L2NormOptions;
var L2NormOptionsT = /** @class */ (function () {
    function L2NormOptionsT(fusedActivationFunction) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.fusedActivationFunction = fusedActivationFunction;
    }
    L2NormOptionsT.prototype.pack = function (builder) {
        return L2NormOptions.createL2NormOptions(builder, this.fusedActivationFunction);
    };
    return L2NormOptionsT;
}());
exports.L2NormOptionsT = L2NormOptionsT;
var LocalResponseNormalizationOptions = /** @class */ (function () {
    function LocalResponseNormalizationOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LocalResponseNormalizationOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LocalResponseNormalizationOptions.getRootAsLocalResponseNormalizationOptions = function (bb, obj) {
        return (obj || new LocalResponseNormalizationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LocalResponseNormalizationOptions.getSizePrefixedRootAsLocalResponseNormalizationOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LocalResponseNormalizationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LocalResponseNormalizationOptions.prototype.radius = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    LocalResponseNormalizationOptions.prototype.bias = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LocalResponseNormalizationOptions.prototype.alpha = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LocalResponseNormalizationOptions.prototype.beta = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LocalResponseNormalizationOptions.startLocalResponseNormalizationOptions = function (builder) {
        builder.startObject(4);
    };
    LocalResponseNormalizationOptions.addRadius = function (builder, radius) {
        builder.addFieldInt32(0, radius, 0);
    };
    LocalResponseNormalizationOptions.addBias = function (builder, bias) {
        builder.addFieldFloat32(1, bias, 0.0);
    };
    LocalResponseNormalizationOptions.addAlpha = function (builder, alpha) {
        builder.addFieldFloat32(2, alpha, 0.0);
    };
    LocalResponseNormalizationOptions.addBeta = function (builder, beta) {
        builder.addFieldFloat32(3, beta, 0.0);
    };
    LocalResponseNormalizationOptions.endLocalResponseNormalizationOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LocalResponseNormalizationOptions.createLocalResponseNormalizationOptions = function (builder, radius, bias, alpha, beta) {
        LocalResponseNormalizationOptions.startLocalResponseNormalizationOptions(builder);
        LocalResponseNormalizationOptions.addRadius(builder, radius);
        LocalResponseNormalizationOptions.addBias(builder, bias);
        LocalResponseNormalizationOptions.addAlpha(builder, alpha);
        LocalResponseNormalizationOptions.addBeta(builder, beta);
        return LocalResponseNormalizationOptions.endLocalResponseNormalizationOptions(builder);
    };
    LocalResponseNormalizationOptions.prototype.unpack = function () {
        return new LocalResponseNormalizationOptionsT(this.radius(), this.bias(), this.alpha(), this.beta());
    };
    LocalResponseNormalizationOptions.prototype.unpackTo = function (_o) {
        _o.radius = this.radius();
        _o.bias = this.bias();
        _o.alpha = this.alpha();
        _o.beta = this.beta();
    };
    return LocalResponseNormalizationOptions;
}());
exports.LocalResponseNormalizationOptions = LocalResponseNormalizationOptions;
var LocalResponseNormalizationOptionsT = /** @class */ (function () {
    function LocalResponseNormalizationOptionsT(radius, bias, alpha, beta) {
        if (radius === void 0) { radius = 0; }
        if (bias === void 0) { bias = 0.0; }
        if (alpha === void 0) { alpha = 0.0; }
        if (beta === void 0) { beta = 0.0; }
        this.radius = radius;
        this.bias = bias;
        this.alpha = alpha;
        this.beta = beta;
    }
    LocalResponseNormalizationOptionsT.prototype.pack = function (builder) {
        return LocalResponseNormalizationOptions.createLocalResponseNormalizationOptions(builder, this.radius, this.bias, this.alpha, this.beta);
    };
    return LocalResponseNormalizationOptionsT;
}());
exports.LocalResponseNormalizationOptionsT = LocalResponseNormalizationOptionsT;
var LSTMOptions = /** @class */ (function () {
    function LSTMOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LSTMOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LSTMOptions.getRootAsLSTMOptions = function (bb, obj) {
        return (obj || new LSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSTMOptions.getSizePrefixedRootAsLSTMOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSTMOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    LSTMOptions.prototype.cellClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LSTMOptions.prototype.projClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LSTMOptions.prototype.kernelType = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : LSTMKernelType.FULL;
    };
    LSTMOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    LSTMOptions.startLSTMOptions = function (builder) {
        builder.startObject(5);
    };
    LSTMOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    LSTMOptions.addCellClip = function (builder, cellClip) {
        builder.addFieldFloat32(1, cellClip, 0.0);
    };
    LSTMOptions.addProjClip = function (builder, projClip) {
        builder.addFieldFloat32(2, projClip, 0.0);
    };
    LSTMOptions.addKernelType = function (builder, kernelType) {
        builder.addFieldInt8(3, kernelType, LSTMKernelType.FULL);
    };
    LSTMOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(4, +asymmetricQuantizeInputs, +false);
    };
    LSTMOptions.endLSTMOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LSTMOptions.createLSTMOptions = function (builder, fusedActivationFunction, cellClip, projClip, kernelType, asymmetricQuantizeInputs) {
        LSTMOptions.startLSTMOptions(builder);
        LSTMOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        LSTMOptions.addCellClip(builder, cellClip);
        LSTMOptions.addProjClip(builder, projClip);
        LSTMOptions.addKernelType(builder, kernelType);
        LSTMOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return LSTMOptions.endLSTMOptions(builder);
    };
    LSTMOptions.prototype.unpack = function () {
        return new LSTMOptionsT(this.fusedActivationFunction(), this.cellClip(), this.projClip(), this.kernelType(), this.asymmetricQuantizeInputs());
    };
    LSTMOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.cellClip = this.cellClip();
        _o.projClip = this.projClip();
        _o.kernelType = this.kernelType();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return LSTMOptions;
}());
exports.LSTMOptions = LSTMOptions;
var LSTMOptionsT = /** @class */ (function () {
    function LSTMOptionsT(fusedActivationFunction, cellClip, projClip, kernelType, asymmetricQuantizeInputs) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (cellClip === void 0) { cellClip = 0.0; }
        if (projClip === void 0) { projClip = 0.0; }
        if (kernelType === void 0) { kernelType = LSTMKernelType.FULL; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.cellClip = cellClip;
        this.projClip = projClip;
        this.kernelType = kernelType;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    LSTMOptionsT.prototype.pack = function (builder) {
        return LSTMOptions.createLSTMOptions(builder, this.fusedActivationFunction, this.cellClip, this.projClip, this.kernelType, this.asymmetricQuantizeInputs);
    };
    return LSTMOptionsT;
}());
exports.LSTMOptionsT = LSTMOptionsT;
var UnidirectionalSequenceLSTMOptions = /** @class */ (function () {
    function UnidirectionalSequenceLSTMOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    UnidirectionalSequenceLSTMOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    UnidirectionalSequenceLSTMOptions.getRootAsUnidirectionalSequenceLSTMOptions = function (bb, obj) {
        return (obj || new UnidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnidirectionalSequenceLSTMOptions.getSizePrefixedRootAsUnidirectionalSequenceLSTMOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UnidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnidirectionalSequenceLSTMOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    UnidirectionalSequenceLSTMOptions.prototype.cellClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    UnidirectionalSequenceLSTMOptions.prototype.projClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    UnidirectionalSequenceLSTMOptions.prototype.timeMajor = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    UnidirectionalSequenceLSTMOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    UnidirectionalSequenceLSTMOptions.startUnidirectionalSequenceLSTMOptions = function (builder) {
        builder.startObject(5);
    };
    UnidirectionalSequenceLSTMOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    UnidirectionalSequenceLSTMOptions.addCellClip = function (builder, cellClip) {
        builder.addFieldFloat32(1, cellClip, 0.0);
    };
    UnidirectionalSequenceLSTMOptions.addProjClip = function (builder, projClip) {
        builder.addFieldFloat32(2, projClip, 0.0);
    };
    UnidirectionalSequenceLSTMOptions.addTimeMajor = function (builder, timeMajor) {
        builder.addFieldInt8(3, +timeMajor, +false);
    };
    UnidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(4, +asymmetricQuantizeInputs, +false);
    };
    UnidirectionalSequenceLSTMOptions.endUnidirectionalSequenceLSTMOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    UnidirectionalSequenceLSTMOptions.createUnidirectionalSequenceLSTMOptions = function (builder, fusedActivationFunction, cellClip, projClip, timeMajor, asymmetricQuantizeInputs) {
        UnidirectionalSequenceLSTMOptions.startUnidirectionalSequenceLSTMOptions(builder);
        UnidirectionalSequenceLSTMOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        UnidirectionalSequenceLSTMOptions.addCellClip(builder, cellClip);
        UnidirectionalSequenceLSTMOptions.addProjClip(builder, projClip);
        UnidirectionalSequenceLSTMOptions.addTimeMajor(builder, timeMajor);
        UnidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return UnidirectionalSequenceLSTMOptions.endUnidirectionalSequenceLSTMOptions(builder);
    };
    UnidirectionalSequenceLSTMOptions.prototype.unpack = function () {
        return new UnidirectionalSequenceLSTMOptionsT(this.fusedActivationFunction(), this.cellClip(), this.projClip(), this.timeMajor(), this.asymmetricQuantizeInputs());
    };
    UnidirectionalSequenceLSTMOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.cellClip = this.cellClip();
        _o.projClip = this.projClip();
        _o.timeMajor = this.timeMajor();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return UnidirectionalSequenceLSTMOptions;
}());
exports.UnidirectionalSequenceLSTMOptions = UnidirectionalSequenceLSTMOptions;
var UnidirectionalSequenceLSTMOptionsT = /** @class */ (function () {
    function UnidirectionalSequenceLSTMOptionsT(fusedActivationFunction, cellClip, projClip, timeMajor, asymmetricQuantizeInputs) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (cellClip === void 0) { cellClip = 0.0; }
        if (projClip === void 0) { projClip = 0.0; }
        if (timeMajor === void 0) { timeMajor = false; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.cellClip = cellClip;
        this.projClip = projClip;
        this.timeMajor = timeMajor;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    UnidirectionalSequenceLSTMOptionsT.prototype.pack = function (builder) {
        return UnidirectionalSequenceLSTMOptions.createUnidirectionalSequenceLSTMOptions(builder, this.fusedActivationFunction, this.cellClip, this.projClip, this.timeMajor, this.asymmetricQuantizeInputs);
    };
    return UnidirectionalSequenceLSTMOptionsT;
}());
exports.UnidirectionalSequenceLSTMOptionsT = UnidirectionalSequenceLSTMOptionsT;
var BidirectionalSequenceLSTMOptions = /** @class */ (function () {
    function BidirectionalSequenceLSTMOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BidirectionalSequenceLSTMOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BidirectionalSequenceLSTMOptions.getRootAsBidirectionalSequenceLSTMOptions = function (bb, obj) {
        return (obj || new BidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BidirectionalSequenceLSTMOptions.getSizePrefixedRootAsBidirectionalSequenceLSTMOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BidirectionalSequenceLSTMOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    BidirectionalSequenceLSTMOptions.prototype.cellClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    BidirectionalSequenceLSTMOptions.prototype.projClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    BidirectionalSequenceLSTMOptions.prototype.mergeOutputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BidirectionalSequenceLSTMOptions.prototype.timeMajor = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    };
    BidirectionalSequenceLSTMOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BidirectionalSequenceLSTMOptions.startBidirectionalSequenceLSTMOptions = function (builder) {
        builder.startObject(6);
    };
    BidirectionalSequenceLSTMOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    BidirectionalSequenceLSTMOptions.addCellClip = function (builder, cellClip) {
        builder.addFieldFloat32(1, cellClip, 0.0);
    };
    BidirectionalSequenceLSTMOptions.addProjClip = function (builder, projClip) {
        builder.addFieldFloat32(2, projClip, 0.0);
    };
    BidirectionalSequenceLSTMOptions.addMergeOutputs = function (builder, mergeOutputs) {
        builder.addFieldInt8(3, +mergeOutputs, +false);
    };
    BidirectionalSequenceLSTMOptions.addTimeMajor = function (builder, timeMajor) {
        builder.addFieldInt8(4, +timeMajor, +true);
    };
    BidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(5, +asymmetricQuantizeInputs, +false);
    };
    BidirectionalSequenceLSTMOptions.endBidirectionalSequenceLSTMOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BidirectionalSequenceLSTMOptions.createBidirectionalSequenceLSTMOptions = function (builder, fusedActivationFunction, cellClip, projClip, mergeOutputs, timeMajor, asymmetricQuantizeInputs) {
        BidirectionalSequenceLSTMOptions.startBidirectionalSequenceLSTMOptions(builder);
        BidirectionalSequenceLSTMOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        BidirectionalSequenceLSTMOptions.addCellClip(builder, cellClip);
        BidirectionalSequenceLSTMOptions.addProjClip(builder, projClip);
        BidirectionalSequenceLSTMOptions.addMergeOutputs(builder, mergeOutputs);
        BidirectionalSequenceLSTMOptions.addTimeMajor(builder, timeMajor);
        BidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return BidirectionalSequenceLSTMOptions.endBidirectionalSequenceLSTMOptions(builder);
    };
    BidirectionalSequenceLSTMOptions.prototype.unpack = function () {
        return new BidirectionalSequenceLSTMOptionsT(this.fusedActivationFunction(), this.cellClip(), this.projClip(), this.mergeOutputs(), this.timeMajor(), this.asymmetricQuantizeInputs());
    };
    BidirectionalSequenceLSTMOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.cellClip = this.cellClip();
        _o.projClip = this.projClip();
        _o.mergeOutputs = this.mergeOutputs();
        _o.timeMajor = this.timeMajor();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return BidirectionalSequenceLSTMOptions;
}());
exports.BidirectionalSequenceLSTMOptions = BidirectionalSequenceLSTMOptions;
var BidirectionalSequenceLSTMOptionsT = /** @class */ (function () {
    function BidirectionalSequenceLSTMOptionsT(fusedActivationFunction, cellClip, projClip, mergeOutputs, timeMajor, asymmetricQuantizeInputs) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (cellClip === void 0) { cellClip = 0.0; }
        if (projClip === void 0) { projClip = 0.0; }
        if (mergeOutputs === void 0) { mergeOutputs = false; }
        if (timeMajor === void 0) { timeMajor = true; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.cellClip = cellClip;
        this.projClip = projClip;
        this.mergeOutputs = mergeOutputs;
        this.timeMajor = timeMajor;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    BidirectionalSequenceLSTMOptionsT.prototype.pack = function (builder) {
        return BidirectionalSequenceLSTMOptions.createBidirectionalSequenceLSTMOptions(builder, this.fusedActivationFunction, this.cellClip, this.projClip, this.mergeOutputs, this.timeMajor, this.asymmetricQuantizeInputs);
    };
    return BidirectionalSequenceLSTMOptionsT;
}());
exports.BidirectionalSequenceLSTMOptionsT = BidirectionalSequenceLSTMOptionsT;
var ResizeBilinearOptions = /** @class */ (function () {
    function ResizeBilinearOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ResizeBilinearOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ResizeBilinearOptions.getRootAsResizeBilinearOptions = function (bb, obj) {
        return (obj || new ResizeBilinearOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ResizeBilinearOptions.getSizePrefixedRootAsResizeBilinearOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ResizeBilinearOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ResizeBilinearOptions.prototype.alignCorners = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    ResizeBilinearOptions.prototype.halfPixelCenters = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    ResizeBilinearOptions.startResizeBilinearOptions = function (builder) {
        builder.startObject(4);
    };
    ResizeBilinearOptions.addAlignCorners = function (builder, alignCorners) {
        builder.addFieldInt8(2, +alignCorners, +false);
    };
    ResizeBilinearOptions.addHalfPixelCenters = function (builder, halfPixelCenters) {
        builder.addFieldInt8(3, +halfPixelCenters, +false);
    };
    ResizeBilinearOptions.endResizeBilinearOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ResizeBilinearOptions.createResizeBilinearOptions = function (builder, alignCorners, halfPixelCenters) {
        ResizeBilinearOptions.startResizeBilinearOptions(builder);
        ResizeBilinearOptions.addAlignCorners(builder, alignCorners);
        ResizeBilinearOptions.addHalfPixelCenters(builder, halfPixelCenters);
        return ResizeBilinearOptions.endResizeBilinearOptions(builder);
    };
    ResizeBilinearOptions.prototype.unpack = function () {
        return new ResizeBilinearOptionsT(this.alignCorners(), this.halfPixelCenters());
    };
    ResizeBilinearOptions.prototype.unpackTo = function (_o) {
        _o.alignCorners = this.alignCorners();
        _o.halfPixelCenters = this.halfPixelCenters();
    };
    return ResizeBilinearOptions;
}());
exports.ResizeBilinearOptions = ResizeBilinearOptions;
var ResizeBilinearOptionsT = /** @class */ (function () {
    function ResizeBilinearOptionsT(alignCorners, halfPixelCenters) {
        if (alignCorners === void 0) { alignCorners = false; }
        if (halfPixelCenters === void 0) { halfPixelCenters = false; }
        this.alignCorners = alignCorners;
        this.halfPixelCenters = halfPixelCenters;
    }
    ResizeBilinearOptionsT.prototype.pack = function (builder) {
        return ResizeBilinearOptions.createResizeBilinearOptions(builder, this.alignCorners, this.halfPixelCenters);
    };
    return ResizeBilinearOptionsT;
}());
exports.ResizeBilinearOptionsT = ResizeBilinearOptionsT;
var ResizeNearestNeighborOptions = /** @class */ (function () {
    function ResizeNearestNeighborOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ResizeNearestNeighborOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ResizeNearestNeighborOptions.getRootAsResizeNearestNeighborOptions = function (bb, obj) {
        return (obj || new ResizeNearestNeighborOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ResizeNearestNeighborOptions.getSizePrefixedRootAsResizeNearestNeighborOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ResizeNearestNeighborOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ResizeNearestNeighborOptions.prototype.alignCorners = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    ResizeNearestNeighborOptions.prototype.halfPixelCenters = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    ResizeNearestNeighborOptions.startResizeNearestNeighborOptions = function (builder) {
        builder.startObject(2);
    };
    ResizeNearestNeighborOptions.addAlignCorners = function (builder, alignCorners) {
        builder.addFieldInt8(0, +alignCorners, +false);
    };
    ResizeNearestNeighborOptions.addHalfPixelCenters = function (builder, halfPixelCenters) {
        builder.addFieldInt8(1, +halfPixelCenters, +false);
    };
    ResizeNearestNeighborOptions.endResizeNearestNeighborOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ResizeNearestNeighborOptions.createResizeNearestNeighborOptions = function (builder, alignCorners, halfPixelCenters) {
        ResizeNearestNeighborOptions.startResizeNearestNeighborOptions(builder);
        ResizeNearestNeighborOptions.addAlignCorners(builder, alignCorners);
        ResizeNearestNeighborOptions.addHalfPixelCenters(builder, halfPixelCenters);
        return ResizeNearestNeighborOptions.endResizeNearestNeighborOptions(builder);
    };
    ResizeNearestNeighborOptions.prototype.unpack = function () {
        return new ResizeNearestNeighborOptionsT(this.alignCorners(), this.halfPixelCenters());
    };
    ResizeNearestNeighborOptions.prototype.unpackTo = function (_o) {
        _o.alignCorners = this.alignCorners();
        _o.halfPixelCenters = this.halfPixelCenters();
    };
    return ResizeNearestNeighborOptions;
}());
exports.ResizeNearestNeighborOptions = ResizeNearestNeighborOptions;
var ResizeNearestNeighborOptionsT = /** @class */ (function () {
    function ResizeNearestNeighborOptionsT(alignCorners, halfPixelCenters) {
        if (alignCorners === void 0) { alignCorners = false; }
        if (halfPixelCenters === void 0) { halfPixelCenters = false; }
        this.alignCorners = alignCorners;
        this.halfPixelCenters = halfPixelCenters;
    }
    ResizeNearestNeighborOptionsT.prototype.pack = function (builder) {
        return ResizeNearestNeighborOptions.createResizeNearestNeighborOptions(builder, this.alignCorners, this.halfPixelCenters);
    };
    return ResizeNearestNeighborOptionsT;
}());
exports.ResizeNearestNeighborOptionsT = ResizeNearestNeighborOptionsT;
var CallOptions = /** @class */ (function () {
    function CallOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CallOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CallOptions.getRootAsCallOptions = function (bb, obj) {
        return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CallOptions.getSizePrefixedRootAsCallOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CallOptions.prototype.subgraph = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    CallOptions.startCallOptions = function (builder) {
        builder.startObject(1);
    };
    CallOptions.addSubgraph = function (builder, subgraph) {
        builder.addFieldInt32(0, subgraph, 0);
    };
    CallOptions.endCallOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CallOptions.createCallOptions = function (builder, subgraph) {
        CallOptions.startCallOptions(builder);
        CallOptions.addSubgraph(builder, subgraph);
        return CallOptions.endCallOptions(builder);
    };
    CallOptions.prototype.unpack = function () {
        return new CallOptionsT(this.subgraph());
    };
    CallOptions.prototype.unpackTo = function (_o) {
        _o.subgraph = this.subgraph();
    };
    return CallOptions;
}());
exports.CallOptions = CallOptions;
var CallOptionsT = /** @class */ (function () {
    function CallOptionsT(subgraph) {
        if (subgraph === void 0) { subgraph = 0; }
        this.subgraph = subgraph;
    }
    CallOptionsT.prototype.pack = function (builder) {
        return CallOptions.createCallOptions(builder, this.subgraph);
    };
    return CallOptionsT;
}());
exports.CallOptionsT = CallOptionsT;
var PadOptions = /** @class */ (function () {
    function PadOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PadOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PadOptions.getRootAsPadOptions = function (bb, obj) {
        return (obj || new PadOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PadOptions.getSizePrefixedRootAsPadOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PadOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PadOptions.startPadOptions = function (builder) {
        builder.startObject(0);
    };
    PadOptions.endPadOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PadOptions.createPadOptions = function (builder) {
        PadOptions.startPadOptions(builder);
        return PadOptions.endPadOptions(builder);
    };
    PadOptions.prototype.unpack = function () {
        return new PadOptionsT();
    };
    PadOptions.prototype.unpackTo = function (_o) { };
    return PadOptions;
}());
exports.PadOptions = PadOptions;
var PadOptionsT = /** @class */ (function () {
    function PadOptionsT() {
    }
    PadOptionsT.prototype.pack = function (builder) {
        return PadOptions.createPadOptions(builder);
    };
    return PadOptionsT;
}());
exports.PadOptionsT = PadOptionsT;
var PadV2Options = /** @class */ (function () {
    function PadV2Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PadV2Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PadV2Options.getRootAsPadV2Options = function (bb, obj) {
        return (obj || new PadV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PadV2Options.getSizePrefixedRootAsPadV2Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PadV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PadV2Options.startPadV2Options = function (builder) {
        builder.startObject(0);
    };
    PadV2Options.endPadV2Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PadV2Options.createPadV2Options = function (builder) {
        PadV2Options.startPadV2Options(builder);
        return PadV2Options.endPadV2Options(builder);
    };
    PadV2Options.prototype.unpack = function () {
        return new PadV2OptionsT();
    };
    PadV2Options.prototype.unpackTo = function (_o) { };
    return PadV2Options;
}());
exports.PadV2Options = PadV2Options;
var PadV2OptionsT = /** @class */ (function () {
    function PadV2OptionsT() {
    }
    PadV2OptionsT.prototype.pack = function (builder) {
        return PadV2Options.createPadV2Options(builder);
    };
    return PadV2OptionsT;
}());
exports.PadV2OptionsT = PadV2OptionsT;
var ReshapeOptions = /** @class */ (function () {
    function ReshapeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ReshapeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ReshapeOptions.getRootAsReshapeOptions = function (bb, obj) {
        return (obj || new ReshapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReshapeOptions.getSizePrefixedRootAsReshapeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReshapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReshapeOptions.prototype.newShape = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    ReshapeOptions.prototype.newShapeLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    ReshapeOptions.prototype.newShapeArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    ReshapeOptions.startReshapeOptions = function (builder) {
        builder.startObject(1);
    };
    ReshapeOptions.addNewShape = function (builder, newShapeOffset) {
        builder.addFieldOffset(0, newShapeOffset, 0);
    };
    ReshapeOptions.createNewShapeVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    ReshapeOptions.startNewShapeVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ReshapeOptions.endReshapeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ReshapeOptions.createReshapeOptions = function (builder, newShapeOffset) {
        ReshapeOptions.startReshapeOptions(builder);
        ReshapeOptions.addNewShape(builder, newShapeOffset);
        return ReshapeOptions.endReshapeOptions(builder);
    };
    ReshapeOptions.prototype.unpack = function () {
        return new ReshapeOptionsT(this.bb.createScalarList(this.newShape.bind(this), this.newShapeLength()));
    };
    ReshapeOptions.prototype.unpackTo = function (_o) {
        _o.newShape = this.bb.createScalarList(this.newShape.bind(this), this.newShapeLength());
    };
    return ReshapeOptions;
}());
exports.ReshapeOptions = ReshapeOptions;
var ReshapeOptionsT = /** @class */ (function () {
    function ReshapeOptionsT(newShape) {
        if (newShape === void 0) { newShape = []; }
        this.newShape = newShape;
    }
    ReshapeOptionsT.prototype.pack = function (builder) {
        var newShape = ReshapeOptions.createNewShapeVector(builder, this.newShape);
        return ReshapeOptions.createReshapeOptions(builder, newShape);
    };
    return ReshapeOptionsT;
}());
exports.ReshapeOptionsT = ReshapeOptionsT;
var SpaceToBatchNDOptions = /** @class */ (function () {
    function SpaceToBatchNDOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SpaceToBatchNDOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SpaceToBatchNDOptions.getRootAsSpaceToBatchNDOptions = function (bb, obj) {
        return (obj || new SpaceToBatchNDOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpaceToBatchNDOptions.getSizePrefixedRootAsSpaceToBatchNDOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SpaceToBatchNDOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpaceToBatchNDOptions.startSpaceToBatchNDOptions = function (builder) {
        builder.startObject(0);
    };
    SpaceToBatchNDOptions.endSpaceToBatchNDOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SpaceToBatchNDOptions.createSpaceToBatchNDOptions = function (builder) {
        SpaceToBatchNDOptions.startSpaceToBatchNDOptions(builder);
        return SpaceToBatchNDOptions.endSpaceToBatchNDOptions(builder);
    };
    SpaceToBatchNDOptions.prototype.unpack = function () {
        return new SpaceToBatchNDOptionsT();
    };
    SpaceToBatchNDOptions.prototype.unpackTo = function (_o) { };
    return SpaceToBatchNDOptions;
}());
exports.SpaceToBatchNDOptions = SpaceToBatchNDOptions;
var SpaceToBatchNDOptionsT = /** @class */ (function () {
    function SpaceToBatchNDOptionsT() {
    }
    SpaceToBatchNDOptionsT.prototype.pack = function (builder) {
        return SpaceToBatchNDOptions.createSpaceToBatchNDOptions(builder);
    };
    return SpaceToBatchNDOptionsT;
}());
exports.SpaceToBatchNDOptionsT = SpaceToBatchNDOptionsT;
var BatchToSpaceNDOptions = /** @class */ (function () {
    function BatchToSpaceNDOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BatchToSpaceNDOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BatchToSpaceNDOptions.getRootAsBatchToSpaceNDOptions = function (bb, obj) {
        return (obj || new BatchToSpaceNDOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BatchToSpaceNDOptions.getSizePrefixedRootAsBatchToSpaceNDOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BatchToSpaceNDOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BatchToSpaceNDOptions.startBatchToSpaceNDOptions = function (builder) {
        builder.startObject(0);
    };
    BatchToSpaceNDOptions.endBatchToSpaceNDOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BatchToSpaceNDOptions.createBatchToSpaceNDOptions = function (builder) {
        BatchToSpaceNDOptions.startBatchToSpaceNDOptions(builder);
        return BatchToSpaceNDOptions.endBatchToSpaceNDOptions(builder);
    };
    BatchToSpaceNDOptions.prototype.unpack = function () {
        return new BatchToSpaceNDOptionsT();
    };
    BatchToSpaceNDOptions.prototype.unpackTo = function (_o) { };
    return BatchToSpaceNDOptions;
}());
exports.BatchToSpaceNDOptions = BatchToSpaceNDOptions;
var BatchToSpaceNDOptionsT = /** @class */ (function () {
    function BatchToSpaceNDOptionsT() {
    }
    BatchToSpaceNDOptionsT.prototype.pack = function (builder) {
        return BatchToSpaceNDOptions.createBatchToSpaceNDOptions(builder);
    };
    return BatchToSpaceNDOptionsT;
}());
exports.BatchToSpaceNDOptionsT = BatchToSpaceNDOptionsT;
var SkipGramOptions = /** @class */ (function () {
    function SkipGramOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SkipGramOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SkipGramOptions.getRootAsSkipGramOptions = function (bb, obj) {
        return (obj || new SkipGramOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SkipGramOptions.getSizePrefixedRootAsSkipGramOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SkipGramOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SkipGramOptions.prototype.ngramSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SkipGramOptions.prototype.maxSkipSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SkipGramOptions.prototype.includeAllNgrams = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SkipGramOptions.startSkipGramOptions = function (builder) {
        builder.startObject(3);
    };
    SkipGramOptions.addNgramSize = function (builder, ngramSize) {
        builder.addFieldInt32(0, ngramSize, 0);
    };
    SkipGramOptions.addMaxSkipSize = function (builder, maxSkipSize) {
        builder.addFieldInt32(1, maxSkipSize, 0);
    };
    SkipGramOptions.addIncludeAllNgrams = function (builder, includeAllNgrams) {
        builder.addFieldInt8(2, +includeAllNgrams, +false);
    };
    SkipGramOptions.endSkipGramOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SkipGramOptions.createSkipGramOptions = function (builder, ngramSize, maxSkipSize, includeAllNgrams) {
        SkipGramOptions.startSkipGramOptions(builder);
        SkipGramOptions.addNgramSize(builder, ngramSize);
        SkipGramOptions.addMaxSkipSize(builder, maxSkipSize);
        SkipGramOptions.addIncludeAllNgrams(builder, includeAllNgrams);
        return SkipGramOptions.endSkipGramOptions(builder);
    };
    SkipGramOptions.prototype.unpack = function () {
        return new SkipGramOptionsT(this.ngramSize(), this.maxSkipSize(), this.includeAllNgrams());
    };
    SkipGramOptions.prototype.unpackTo = function (_o) {
        _o.ngramSize = this.ngramSize();
        _o.maxSkipSize = this.maxSkipSize();
        _o.includeAllNgrams = this.includeAllNgrams();
    };
    return SkipGramOptions;
}());
exports.SkipGramOptions = SkipGramOptions;
var SkipGramOptionsT = /** @class */ (function () {
    function SkipGramOptionsT(ngramSize, maxSkipSize, includeAllNgrams) {
        if (ngramSize === void 0) { ngramSize = 0; }
        if (maxSkipSize === void 0) { maxSkipSize = 0; }
        if (includeAllNgrams === void 0) { includeAllNgrams = false; }
        this.ngramSize = ngramSize;
        this.maxSkipSize = maxSkipSize;
        this.includeAllNgrams = includeAllNgrams;
    }
    SkipGramOptionsT.prototype.pack = function (builder) {
        return SkipGramOptions.createSkipGramOptions(builder, this.ngramSize, this.maxSkipSize, this.includeAllNgrams);
    };
    return SkipGramOptionsT;
}());
exports.SkipGramOptionsT = SkipGramOptionsT;
var SpaceToDepthOptions = /** @class */ (function () {
    function SpaceToDepthOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SpaceToDepthOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SpaceToDepthOptions.getRootAsSpaceToDepthOptions = function (bb, obj) {
        return (obj || new SpaceToDepthOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpaceToDepthOptions.getSizePrefixedRootAsSpaceToDepthOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SpaceToDepthOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SpaceToDepthOptions.prototype.blockSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SpaceToDepthOptions.startSpaceToDepthOptions = function (builder) {
        builder.startObject(1);
    };
    SpaceToDepthOptions.addBlockSize = function (builder, blockSize) {
        builder.addFieldInt32(0, blockSize, 0);
    };
    SpaceToDepthOptions.endSpaceToDepthOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SpaceToDepthOptions.createSpaceToDepthOptions = function (builder, blockSize) {
        SpaceToDepthOptions.startSpaceToDepthOptions(builder);
        SpaceToDepthOptions.addBlockSize(builder, blockSize);
        return SpaceToDepthOptions.endSpaceToDepthOptions(builder);
    };
    SpaceToDepthOptions.prototype.unpack = function () {
        return new SpaceToDepthOptionsT(this.blockSize());
    };
    SpaceToDepthOptions.prototype.unpackTo = function (_o) {
        _o.blockSize = this.blockSize();
    };
    return SpaceToDepthOptions;
}());
exports.SpaceToDepthOptions = SpaceToDepthOptions;
var SpaceToDepthOptionsT = /** @class */ (function () {
    function SpaceToDepthOptionsT(blockSize) {
        if (blockSize === void 0) { blockSize = 0; }
        this.blockSize = blockSize;
    }
    SpaceToDepthOptionsT.prototype.pack = function (builder) {
        return SpaceToDepthOptions.createSpaceToDepthOptions(builder, this.blockSize);
    };
    return SpaceToDepthOptionsT;
}());
exports.SpaceToDepthOptionsT = SpaceToDepthOptionsT;
var DepthToSpaceOptions = /** @class */ (function () {
    function DepthToSpaceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DepthToSpaceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DepthToSpaceOptions.getRootAsDepthToSpaceOptions = function (bb, obj) {
        return (obj || new DepthToSpaceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DepthToSpaceOptions.getSizePrefixedRootAsDepthToSpaceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DepthToSpaceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DepthToSpaceOptions.prototype.blockSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DepthToSpaceOptions.startDepthToSpaceOptions = function (builder) {
        builder.startObject(1);
    };
    DepthToSpaceOptions.addBlockSize = function (builder, blockSize) {
        builder.addFieldInt32(0, blockSize, 0);
    };
    DepthToSpaceOptions.endDepthToSpaceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DepthToSpaceOptions.createDepthToSpaceOptions = function (builder, blockSize) {
        DepthToSpaceOptions.startDepthToSpaceOptions(builder);
        DepthToSpaceOptions.addBlockSize(builder, blockSize);
        return DepthToSpaceOptions.endDepthToSpaceOptions(builder);
    };
    DepthToSpaceOptions.prototype.unpack = function () {
        return new DepthToSpaceOptionsT(this.blockSize());
    };
    DepthToSpaceOptions.prototype.unpackTo = function (_o) {
        _o.blockSize = this.blockSize();
    };
    return DepthToSpaceOptions;
}());
exports.DepthToSpaceOptions = DepthToSpaceOptions;
var DepthToSpaceOptionsT = /** @class */ (function () {
    function DepthToSpaceOptionsT(blockSize) {
        if (blockSize === void 0) { blockSize = 0; }
        this.blockSize = blockSize;
    }
    DepthToSpaceOptionsT.prototype.pack = function (builder) {
        return DepthToSpaceOptions.createDepthToSpaceOptions(builder, this.blockSize);
    };
    return DepthToSpaceOptionsT;
}());
exports.DepthToSpaceOptionsT = DepthToSpaceOptionsT;
var SubOptions = /** @class */ (function () {
    function SubOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SubOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SubOptions.getRootAsSubOptions = function (bb, obj) {
        return (obj || new SubOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubOptions.getSizePrefixedRootAsSubOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SubOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    SubOptions.prototype.potScaleInt16 = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    };
    SubOptions.startSubOptions = function (builder) {
        builder.startObject(2);
    };
    SubOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    SubOptions.addPotScaleInt16 = function (builder, potScaleInt16) {
        builder.addFieldInt8(1, +potScaleInt16, +true);
    };
    SubOptions.endSubOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SubOptions.createSubOptions = function (builder, fusedActivationFunction, potScaleInt16) {
        SubOptions.startSubOptions(builder);
        SubOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        SubOptions.addPotScaleInt16(builder, potScaleInt16);
        return SubOptions.endSubOptions(builder);
    };
    SubOptions.prototype.unpack = function () {
        return new SubOptionsT(this.fusedActivationFunction(), this.potScaleInt16());
    };
    SubOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
        _o.potScaleInt16 = this.potScaleInt16();
    };
    return SubOptions;
}());
exports.SubOptions = SubOptions;
var SubOptionsT = /** @class */ (function () {
    function SubOptionsT(fusedActivationFunction, potScaleInt16) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        if (potScaleInt16 === void 0) { potScaleInt16 = true; }
        this.fusedActivationFunction = fusedActivationFunction;
        this.potScaleInt16 = potScaleInt16;
    }
    SubOptionsT.prototype.pack = function (builder) {
        return SubOptions.createSubOptions(builder, this.fusedActivationFunction, this.potScaleInt16);
    };
    return SubOptionsT;
}());
exports.SubOptionsT = SubOptionsT;
var DivOptions = /** @class */ (function () {
    function DivOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DivOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DivOptions.getRootAsDivOptions = function (bb, obj) {
        return (obj || new DivOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DivOptions.getSizePrefixedRootAsDivOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DivOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DivOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    DivOptions.startDivOptions = function (builder) {
        builder.startObject(1);
    };
    DivOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    DivOptions.endDivOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DivOptions.createDivOptions = function (builder, fusedActivationFunction) {
        DivOptions.startDivOptions(builder);
        DivOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return DivOptions.endDivOptions(builder);
    };
    DivOptions.prototype.unpack = function () {
        return new DivOptionsT(this.fusedActivationFunction());
    };
    DivOptions.prototype.unpackTo = function (_o) {
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return DivOptions;
}());
exports.DivOptions = DivOptions;
var DivOptionsT = /** @class */ (function () {
    function DivOptionsT(fusedActivationFunction) {
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.fusedActivationFunction = fusedActivationFunction;
    }
    DivOptionsT.prototype.pack = function (builder) {
        return DivOptions.createDivOptions(builder, this.fusedActivationFunction);
    };
    return DivOptionsT;
}());
exports.DivOptionsT = DivOptionsT;
var TopKV2Options = /** @class */ (function () {
    function TopKV2Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TopKV2Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TopKV2Options.getRootAsTopKV2Options = function (bb, obj) {
        return (obj || new TopKV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TopKV2Options.getSizePrefixedRootAsTopKV2Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TopKV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TopKV2Options.startTopKV2Options = function (builder) {
        builder.startObject(0);
    };
    TopKV2Options.endTopKV2Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TopKV2Options.createTopKV2Options = function (builder) {
        TopKV2Options.startTopKV2Options(builder);
        return TopKV2Options.endTopKV2Options(builder);
    };
    TopKV2Options.prototype.unpack = function () {
        return new TopKV2OptionsT();
    };
    TopKV2Options.prototype.unpackTo = function (_o) { };
    return TopKV2Options;
}());
exports.TopKV2Options = TopKV2Options;
var TopKV2OptionsT = /** @class */ (function () {
    function TopKV2OptionsT() {
    }
    TopKV2OptionsT.prototype.pack = function (builder) {
        return TopKV2Options.createTopKV2Options(builder);
    };
    return TopKV2OptionsT;
}());
exports.TopKV2OptionsT = TopKV2OptionsT;
var EmbeddingLookupSparseOptions = /** @class */ (function () {
    function EmbeddingLookupSparseOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    EmbeddingLookupSparseOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    EmbeddingLookupSparseOptions.getRootAsEmbeddingLookupSparseOptions = function (bb, obj) {
        return (obj || new EmbeddingLookupSparseOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    EmbeddingLookupSparseOptions.getSizePrefixedRootAsEmbeddingLookupSparseOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EmbeddingLookupSparseOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    EmbeddingLookupSparseOptions.prototype.combiner = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : CombinerType.SUM;
    };
    EmbeddingLookupSparseOptions.startEmbeddingLookupSparseOptions = function (builder) {
        builder.startObject(1);
    };
    EmbeddingLookupSparseOptions.addCombiner = function (builder, combiner) {
        builder.addFieldInt8(0, combiner, CombinerType.SUM);
    };
    EmbeddingLookupSparseOptions.endEmbeddingLookupSparseOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    EmbeddingLookupSparseOptions.createEmbeddingLookupSparseOptions = function (builder, combiner) {
        EmbeddingLookupSparseOptions.startEmbeddingLookupSparseOptions(builder);
        EmbeddingLookupSparseOptions.addCombiner(builder, combiner);
        return EmbeddingLookupSparseOptions.endEmbeddingLookupSparseOptions(builder);
    };
    EmbeddingLookupSparseOptions.prototype.unpack = function () {
        return new EmbeddingLookupSparseOptionsT(this.combiner());
    };
    EmbeddingLookupSparseOptions.prototype.unpackTo = function (_o) {
        _o.combiner = this.combiner();
    };
    return EmbeddingLookupSparseOptions;
}());
exports.EmbeddingLookupSparseOptions = EmbeddingLookupSparseOptions;
var EmbeddingLookupSparseOptionsT = /** @class */ (function () {
    function EmbeddingLookupSparseOptionsT(combiner) {
        if (combiner === void 0) { combiner = CombinerType.SUM; }
        this.combiner = combiner;
    }
    EmbeddingLookupSparseOptionsT.prototype.pack = function (builder) {
        return EmbeddingLookupSparseOptions.createEmbeddingLookupSparseOptions(builder, this.combiner);
    };
    return EmbeddingLookupSparseOptionsT;
}());
exports.EmbeddingLookupSparseOptionsT = EmbeddingLookupSparseOptionsT;
var GatherOptions = /** @class */ (function () {
    function GatherOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GatherOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GatherOptions.getRootAsGatherOptions = function (bb, obj) {
        return (obj || new GatherOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GatherOptions.getSizePrefixedRootAsGatherOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GatherOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GatherOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GatherOptions.prototype.batchDims = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GatherOptions.startGatherOptions = function (builder) {
        builder.startObject(2);
    };
    GatherOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(0, axis, 0);
    };
    GatherOptions.addBatchDims = function (builder, batchDims) {
        builder.addFieldInt32(1, batchDims, 0);
    };
    GatherOptions.endGatherOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GatherOptions.createGatherOptions = function (builder, axis, batchDims) {
        GatherOptions.startGatherOptions(builder);
        GatherOptions.addAxis(builder, axis);
        GatherOptions.addBatchDims(builder, batchDims);
        return GatherOptions.endGatherOptions(builder);
    };
    GatherOptions.prototype.unpack = function () {
        return new GatherOptionsT(this.axis(), this.batchDims());
    };
    GatherOptions.prototype.unpackTo = function (_o) {
        _o.axis = this.axis();
        _o.batchDims = this.batchDims();
    };
    return GatherOptions;
}());
exports.GatherOptions = GatherOptions;
var GatherOptionsT = /** @class */ (function () {
    function GatherOptionsT(axis, batchDims) {
        if (axis === void 0) { axis = 0; }
        if (batchDims === void 0) { batchDims = 0; }
        this.axis = axis;
        this.batchDims = batchDims;
    }
    GatherOptionsT.prototype.pack = function (builder) {
        return GatherOptions.createGatherOptions(builder, this.axis, this.batchDims);
    };
    return GatherOptionsT;
}());
exports.GatherOptionsT = GatherOptionsT;
var TransposeOptions = /** @class */ (function () {
    function TransposeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TransposeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TransposeOptions.getRootAsTransposeOptions = function (bb, obj) {
        return (obj || new TransposeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TransposeOptions.getSizePrefixedRootAsTransposeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TransposeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TransposeOptions.startTransposeOptions = function (builder) {
        builder.startObject(0);
    };
    TransposeOptions.endTransposeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TransposeOptions.createTransposeOptions = function (builder) {
        TransposeOptions.startTransposeOptions(builder);
        return TransposeOptions.endTransposeOptions(builder);
    };
    TransposeOptions.prototype.unpack = function () {
        return new TransposeOptionsT();
    };
    TransposeOptions.prototype.unpackTo = function (_o) { };
    return TransposeOptions;
}());
exports.TransposeOptions = TransposeOptions;
var TransposeOptionsT = /** @class */ (function () {
    function TransposeOptionsT() {
    }
    TransposeOptionsT.prototype.pack = function (builder) {
        return TransposeOptions.createTransposeOptions(builder);
    };
    return TransposeOptionsT;
}());
exports.TransposeOptionsT = TransposeOptionsT;
var ExpOptions = /** @class */ (function () {
    function ExpOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ExpOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ExpOptions.getRootAsExpOptions = function (bb, obj) {
        return (obj || new ExpOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ExpOptions.getSizePrefixedRootAsExpOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ExpOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ExpOptions.startExpOptions = function (builder) {
        builder.startObject(0);
    };
    ExpOptions.endExpOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ExpOptions.createExpOptions = function (builder) {
        ExpOptions.startExpOptions(builder);
        return ExpOptions.endExpOptions(builder);
    };
    ExpOptions.prototype.unpack = function () {
        return new ExpOptionsT();
    };
    ExpOptions.prototype.unpackTo = function (_o) { };
    return ExpOptions;
}());
exports.ExpOptions = ExpOptions;
var ExpOptionsT = /** @class */ (function () {
    function ExpOptionsT() {
    }
    ExpOptionsT.prototype.pack = function (builder) {
        return ExpOptions.createExpOptions(builder);
    };
    return ExpOptionsT;
}());
exports.ExpOptionsT = ExpOptionsT;
var CosOptions = /** @class */ (function () {
    function CosOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CosOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CosOptions.getRootAsCosOptions = function (bb, obj) {
        return (obj || new CosOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CosOptions.getSizePrefixedRootAsCosOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CosOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CosOptions.startCosOptions = function (builder) {
        builder.startObject(0);
    };
    CosOptions.endCosOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CosOptions.createCosOptions = function (builder) {
        CosOptions.startCosOptions(builder);
        return CosOptions.endCosOptions(builder);
    };
    CosOptions.prototype.unpack = function () {
        return new CosOptionsT();
    };
    CosOptions.prototype.unpackTo = function (_o) { };
    return CosOptions;
}());
exports.CosOptions = CosOptions;
var CosOptionsT = /** @class */ (function () {
    function CosOptionsT() {
    }
    CosOptionsT.prototype.pack = function (builder) {
        return CosOptions.createCosOptions(builder);
    };
    return CosOptionsT;
}());
exports.CosOptionsT = CosOptionsT;
var ReducerOptions = /** @class */ (function () {
    function ReducerOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ReducerOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ReducerOptions.getRootAsReducerOptions = function (bb, obj) {
        return (obj || new ReducerOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReducerOptions.getSizePrefixedRootAsReducerOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReducerOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReducerOptions.prototype.keepDims = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    ReducerOptions.startReducerOptions = function (builder) {
        builder.startObject(1);
    };
    ReducerOptions.addKeepDims = function (builder, keepDims) {
        builder.addFieldInt8(0, +keepDims, +false);
    };
    ReducerOptions.endReducerOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ReducerOptions.createReducerOptions = function (builder, keepDims) {
        ReducerOptions.startReducerOptions(builder);
        ReducerOptions.addKeepDims(builder, keepDims);
        return ReducerOptions.endReducerOptions(builder);
    };
    ReducerOptions.prototype.unpack = function () {
        return new ReducerOptionsT(this.keepDims());
    };
    ReducerOptions.prototype.unpackTo = function (_o) {
        _o.keepDims = this.keepDims();
    };
    return ReducerOptions;
}());
exports.ReducerOptions = ReducerOptions;
var ReducerOptionsT = /** @class */ (function () {
    function ReducerOptionsT(keepDims) {
        if (keepDims === void 0) { keepDims = false; }
        this.keepDims = keepDims;
    }
    ReducerOptionsT.prototype.pack = function (builder) {
        return ReducerOptions.createReducerOptions(builder, this.keepDims);
    };
    return ReducerOptionsT;
}());
exports.ReducerOptionsT = ReducerOptionsT;
var SqueezeOptions = /** @class */ (function () {
    function SqueezeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SqueezeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SqueezeOptions.getRootAsSqueezeOptions = function (bb, obj) {
        return (obj || new SqueezeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SqueezeOptions.getSizePrefixedRootAsSqueezeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SqueezeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SqueezeOptions.prototype.squeezeDims = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SqueezeOptions.prototype.squeezeDimsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SqueezeOptions.prototype.squeezeDimsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SqueezeOptions.startSqueezeOptions = function (builder) {
        builder.startObject(1);
    };
    SqueezeOptions.addSqueezeDims = function (builder, squeezeDimsOffset) {
        builder.addFieldOffset(0, squeezeDimsOffset, 0);
    };
    SqueezeOptions.createSqueezeDimsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SqueezeOptions.startSqueezeDimsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SqueezeOptions.endSqueezeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SqueezeOptions.createSqueezeOptions = function (builder, squeezeDimsOffset) {
        SqueezeOptions.startSqueezeOptions(builder);
        SqueezeOptions.addSqueezeDims(builder, squeezeDimsOffset);
        return SqueezeOptions.endSqueezeOptions(builder);
    };
    SqueezeOptions.prototype.unpack = function () {
        return new SqueezeOptionsT(this.bb.createScalarList(this.squeezeDims.bind(this), this.squeezeDimsLength()));
    };
    SqueezeOptions.prototype.unpackTo = function (_o) {
        _o.squeezeDims = this.bb.createScalarList(this.squeezeDims.bind(this), this.squeezeDimsLength());
    };
    return SqueezeOptions;
}());
exports.SqueezeOptions = SqueezeOptions;
var SqueezeOptionsT = /** @class */ (function () {
    function SqueezeOptionsT(squeezeDims) {
        if (squeezeDims === void 0) { squeezeDims = []; }
        this.squeezeDims = squeezeDims;
    }
    SqueezeOptionsT.prototype.pack = function (builder) {
        var squeezeDims = SqueezeOptions.createSqueezeDimsVector(builder, this.squeezeDims);
        return SqueezeOptions.createSqueezeOptions(builder, squeezeDims);
    };
    return SqueezeOptionsT;
}());
exports.SqueezeOptionsT = SqueezeOptionsT;
var SplitOptions = /** @class */ (function () {
    function SplitOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SplitOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SplitOptions.getRootAsSplitOptions = function (bb, obj) {
        return (obj || new SplitOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SplitOptions.getSizePrefixedRootAsSplitOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SplitOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SplitOptions.prototype.numSplits = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SplitOptions.startSplitOptions = function (builder) {
        builder.startObject(1);
    };
    SplitOptions.addNumSplits = function (builder, numSplits) {
        builder.addFieldInt32(0, numSplits, 0);
    };
    SplitOptions.endSplitOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SplitOptions.createSplitOptions = function (builder, numSplits) {
        SplitOptions.startSplitOptions(builder);
        SplitOptions.addNumSplits(builder, numSplits);
        return SplitOptions.endSplitOptions(builder);
    };
    SplitOptions.prototype.unpack = function () {
        return new SplitOptionsT(this.numSplits());
    };
    SplitOptions.prototype.unpackTo = function (_o) {
        _o.numSplits = this.numSplits();
    };
    return SplitOptions;
}());
exports.SplitOptions = SplitOptions;
var SplitOptionsT = /** @class */ (function () {
    function SplitOptionsT(numSplits) {
        if (numSplits === void 0) { numSplits = 0; }
        this.numSplits = numSplits;
    }
    SplitOptionsT.prototype.pack = function (builder) {
        return SplitOptions.createSplitOptions(builder, this.numSplits);
    };
    return SplitOptionsT;
}());
exports.SplitOptionsT = SplitOptionsT;
var SplitVOptions = /** @class */ (function () {
    function SplitVOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SplitVOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SplitVOptions.getRootAsSplitVOptions = function (bb, obj) {
        return (obj || new SplitVOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SplitVOptions.getSizePrefixedRootAsSplitVOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SplitVOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SplitVOptions.prototype.numSplits = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SplitVOptions.startSplitVOptions = function (builder) {
        builder.startObject(1);
    };
    SplitVOptions.addNumSplits = function (builder, numSplits) {
        builder.addFieldInt32(0, numSplits, 0);
    };
    SplitVOptions.endSplitVOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SplitVOptions.createSplitVOptions = function (builder, numSplits) {
        SplitVOptions.startSplitVOptions(builder);
        SplitVOptions.addNumSplits(builder, numSplits);
        return SplitVOptions.endSplitVOptions(builder);
    };
    SplitVOptions.prototype.unpack = function () {
        return new SplitVOptionsT(this.numSplits());
    };
    SplitVOptions.prototype.unpackTo = function (_o) {
        _o.numSplits = this.numSplits();
    };
    return SplitVOptions;
}());
exports.SplitVOptions = SplitVOptions;
var SplitVOptionsT = /** @class */ (function () {
    function SplitVOptionsT(numSplits) {
        if (numSplits === void 0) { numSplits = 0; }
        this.numSplits = numSplits;
    }
    SplitVOptionsT.prototype.pack = function (builder) {
        return SplitVOptions.createSplitVOptions(builder, this.numSplits);
    };
    return SplitVOptionsT;
}());
exports.SplitVOptionsT = SplitVOptionsT;
var StridedSliceOptions = /** @class */ (function () {
    function StridedSliceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    StridedSliceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    StridedSliceOptions.getRootAsStridedSliceOptions = function (bb, obj) {
        return (obj || new StridedSliceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    StridedSliceOptions.getSizePrefixedRootAsStridedSliceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StridedSliceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    StridedSliceOptions.prototype.beginMask = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    StridedSliceOptions.prototype.endMask = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    StridedSliceOptions.prototype.ellipsisMask = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    StridedSliceOptions.prototype.newAxisMask = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    StridedSliceOptions.prototype.shrinkAxisMask = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    StridedSliceOptions.startStridedSliceOptions = function (builder) {
        builder.startObject(5);
    };
    StridedSliceOptions.addBeginMask = function (builder, beginMask) {
        builder.addFieldInt32(0, beginMask, 0);
    };
    StridedSliceOptions.addEndMask = function (builder, endMask) {
        builder.addFieldInt32(1, endMask, 0);
    };
    StridedSliceOptions.addEllipsisMask = function (builder, ellipsisMask) {
        builder.addFieldInt32(2, ellipsisMask, 0);
    };
    StridedSliceOptions.addNewAxisMask = function (builder, newAxisMask) {
        builder.addFieldInt32(3, newAxisMask, 0);
    };
    StridedSliceOptions.addShrinkAxisMask = function (builder, shrinkAxisMask) {
        builder.addFieldInt32(4, shrinkAxisMask, 0);
    };
    StridedSliceOptions.endStridedSliceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    StridedSliceOptions.createStridedSliceOptions = function (builder, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
        StridedSliceOptions.startStridedSliceOptions(builder);
        StridedSliceOptions.addBeginMask(builder, beginMask);
        StridedSliceOptions.addEndMask(builder, endMask);
        StridedSliceOptions.addEllipsisMask(builder, ellipsisMask);
        StridedSliceOptions.addNewAxisMask(builder, newAxisMask);
        StridedSliceOptions.addShrinkAxisMask(builder, shrinkAxisMask);
        return StridedSliceOptions.endStridedSliceOptions(builder);
    };
    StridedSliceOptions.prototype.unpack = function () {
        return new StridedSliceOptionsT(this.beginMask(), this.endMask(), this.ellipsisMask(), this.newAxisMask(), this.shrinkAxisMask());
    };
    StridedSliceOptions.prototype.unpackTo = function (_o) {
        _o.beginMask = this.beginMask();
        _o.endMask = this.endMask();
        _o.ellipsisMask = this.ellipsisMask();
        _o.newAxisMask = this.newAxisMask();
        _o.shrinkAxisMask = this.shrinkAxisMask();
    };
    return StridedSliceOptions;
}());
exports.StridedSliceOptions = StridedSliceOptions;
var StridedSliceOptionsT = /** @class */ (function () {
    function StridedSliceOptionsT(beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
        if (beginMask === void 0) { beginMask = 0; }
        if (endMask === void 0) { endMask = 0; }
        if (ellipsisMask === void 0) { ellipsisMask = 0; }
        if (newAxisMask === void 0) { newAxisMask = 0; }
        if (shrinkAxisMask === void 0) { shrinkAxisMask = 0; }
        this.beginMask = beginMask;
        this.endMask = endMask;
        this.ellipsisMask = ellipsisMask;
        this.newAxisMask = newAxisMask;
        this.shrinkAxisMask = shrinkAxisMask;
    }
    StridedSliceOptionsT.prototype.pack = function (builder) {
        return StridedSliceOptions.createStridedSliceOptions(builder, this.beginMask, this.endMask, this.ellipsisMask, this.newAxisMask, this.shrinkAxisMask);
    };
    return StridedSliceOptionsT;
}());
exports.StridedSliceOptionsT = StridedSliceOptionsT;
var LogSoftmaxOptions = /** @class */ (function () {
    function LogSoftmaxOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LogSoftmaxOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LogSoftmaxOptions.getRootAsLogSoftmaxOptions = function (bb, obj) {
        return (obj || new LogSoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogSoftmaxOptions.getSizePrefixedRootAsLogSoftmaxOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LogSoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogSoftmaxOptions.startLogSoftmaxOptions = function (builder) {
        builder.startObject(0);
    };
    LogSoftmaxOptions.endLogSoftmaxOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LogSoftmaxOptions.createLogSoftmaxOptions = function (builder) {
        LogSoftmaxOptions.startLogSoftmaxOptions(builder);
        return LogSoftmaxOptions.endLogSoftmaxOptions(builder);
    };
    LogSoftmaxOptions.prototype.unpack = function () {
        return new LogSoftmaxOptionsT();
    };
    LogSoftmaxOptions.prototype.unpackTo = function (_o) { };
    return LogSoftmaxOptions;
}());
exports.LogSoftmaxOptions = LogSoftmaxOptions;
var LogSoftmaxOptionsT = /** @class */ (function () {
    function LogSoftmaxOptionsT() {
    }
    LogSoftmaxOptionsT.prototype.pack = function (builder) {
        return LogSoftmaxOptions.createLogSoftmaxOptions(builder);
    };
    return LogSoftmaxOptionsT;
}());
exports.LogSoftmaxOptionsT = LogSoftmaxOptionsT;
var CastOptions = /** @class */ (function () {
    function CastOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CastOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CastOptions.getRootAsCastOptions = function (bb, obj) {
        return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CastOptions.getSizePrefixedRootAsCastOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CastOptions.prototype.inDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    CastOptions.prototype.outDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    CastOptions.startCastOptions = function (builder) {
        builder.startObject(2);
    };
    CastOptions.addInDataType = function (builder, inDataType) {
        builder.addFieldInt8(0, inDataType, TensorType.FLOAT32);
    };
    CastOptions.addOutDataType = function (builder, outDataType) {
        builder.addFieldInt8(1, outDataType, TensorType.FLOAT32);
    };
    CastOptions.endCastOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CastOptions.createCastOptions = function (builder, inDataType, outDataType) {
        CastOptions.startCastOptions(builder);
        CastOptions.addInDataType(builder, inDataType);
        CastOptions.addOutDataType(builder, outDataType);
        return CastOptions.endCastOptions(builder);
    };
    CastOptions.prototype.unpack = function () {
        return new CastOptionsT(this.inDataType(), this.outDataType());
    };
    CastOptions.prototype.unpackTo = function (_o) {
        _o.inDataType = this.inDataType();
        _o.outDataType = this.outDataType();
    };
    return CastOptions;
}());
exports.CastOptions = CastOptions;
var CastOptionsT = /** @class */ (function () {
    function CastOptionsT(inDataType, outDataType) {
        if (inDataType === void 0) { inDataType = TensorType.FLOAT32; }
        if (outDataType === void 0) { outDataType = TensorType.FLOAT32; }
        this.inDataType = inDataType;
        this.outDataType = outDataType;
    }
    CastOptionsT.prototype.pack = function (builder) {
        return CastOptions.createCastOptions(builder, this.inDataType, this.outDataType);
    };
    return CastOptionsT;
}());
exports.CastOptionsT = CastOptionsT;
var DequantizeOptions = /** @class */ (function () {
    function DequantizeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DequantizeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DequantizeOptions.getRootAsDequantizeOptions = function (bb, obj) {
        return (obj || new DequantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DequantizeOptions.getSizePrefixedRootAsDequantizeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DequantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DequantizeOptions.startDequantizeOptions = function (builder) {
        builder.startObject(0);
    };
    DequantizeOptions.endDequantizeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DequantizeOptions.createDequantizeOptions = function (builder) {
        DequantizeOptions.startDequantizeOptions(builder);
        return DequantizeOptions.endDequantizeOptions(builder);
    };
    DequantizeOptions.prototype.unpack = function () {
        return new DequantizeOptionsT();
    };
    DequantizeOptions.prototype.unpackTo = function (_o) { };
    return DequantizeOptions;
}());
exports.DequantizeOptions = DequantizeOptions;
var DequantizeOptionsT = /** @class */ (function () {
    function DequantizeOptionsT() {
    }
    DequantizeOptionsT.prototype.pack = function (builder) {
        return DequantizeOptions.createDequantizeOptions(builder);
    };
    return DequantizeOptionsT;
}());
exports.DequantizeOptionsT = DequantizeOptionsT;
var MaximumMinimumOptions = /** @class */ (function () {
    function MaximumMinimumOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MaximumMinimumOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MaximumMinimumOptions.getRootAsMaximumMinimumOptions = function (bb, obj) {
        return (obj || new MaximumMinimumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MaximumMinimumOptions.getSizePrefixedRootAsMaximumMinimumOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MaximumMinimumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MaximumMinimumOptions.startMaximumMinimumOptions = function (builder) {
        builder.startObject(0);
    };
    MaximumMinimumOptions.endMaximumMinimumOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MaximumMinimumOptions.createMaximumMinimumOptions = function (builder) {
        MaximumMinimumOptions.startMaximumMinimumOptions(builder);
        return MaximumMinimumOptions.endMaximumMinimumOptions(builder);
    };
    MaximumMinimumOptions.prototype.unpack = function () {
        return new MaximumMinimumOptionsT();
    };
    MaximumMinimumOptions.prototype.unpackTo = function (_o) { };
    return MaximumMinimumOptions;
}());
exports.MaximumMinimumOptions = MaximumMinimumOptions;
var MaximumMinimumOptionsT = /** @class */ (function () {
    function MaximumMinimumOptionsT() {
    }
    MaximumMinimumOptionsT.prototype.pack = function (builder) {
        return MaximumMinimumOptions.createMaximumMinimumOptions(builder);
    };
    return MaximumMinimumOptionsT;
}());
exports.MaximumMinimumOptionsT = MaximumMinimumOptionsT;
var TileOptions = /** @class */ (function () {
    function TileOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TileOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TileOptions.getRootAsTileOptions = function (bb, obj) {
        return (obj || new TileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TileOptions.getSizePrefixedRootAsTileOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TileOptions.startTileOptions = function (builder) {
        builder.startObject(0);
    };
    TileOptions.endTileOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TileOptions.createTileOptions = function (builder) {
        TileOptions.startTileOptions(builder);
        return TileOptions.endTileOptions(builder);
    };
    TileOptions.prototype.unpack = function () {
        return new TileOptionsT();
    };
    TileOptions.prototype.unpackTo = function (_o) { };
    return TileOptions;
}());
exports.TileOptions = TileOptions;
var TileOptionsT = /** @class */ (function () {
    function TileOptionsT() {
    }
    TileOptionsT.prototype.pack = function (builder) {
        return TileOptions.createTileOptions(builder);
    };
    return TileOptionsT;
}());
exports.TileOptionsT = TileOptionsT;
var ArgMaxOptions = /** @class */ (function () {
    function ArgMaxOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ArgMaxOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ArgMaxOptions.getRootAsArgMaxOptions = function (bb, obj) {
        return (obj || new ArgMaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ArgMaxOptions.getSizePrefixedRootAsArgMaxOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ArgMaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ArgMaxOptions.prototype.outputType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    ArgMaxOptions.startArgMaxOptions = function (builder) {
        builder.startObject(1);
    };
    ArgMaxOptions.addOutputType = function (builder, outputType) {
        builder.addFieldInt8(0, outputType, TensorType.FLOAT32);
    };
    ArgMaxOptions.endArgMaxOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ArgMaxOptions.createArgMaxOptions = function (builder, outputType) {
        ArgMaxOptions.startArgMaxOptions(builder);
        ArgMaxOptions.addOutputType(builder, outputType);
        return ArgMaxOptions.endArgMaxOptions(builder);
    };
    ArgMaxOptions.prototype.unpack = function () {
        return new ArgMaxOptionsT(this.outputType());
    };
    ArgMaxOptions.prototype.unpackTo = function (_o) {
        _o.outputType = this.outputType();
    };
    return ArgMaxOptions;
}());
exports.ArgMaxOptions = ArgMaxOptions;
var ArgMaxOptionsT = /** @class */ (function () {
    function ArgMaxOptionsT(outputType) {
        if (outputType === void 0) { outputType = TensorType.FLOAT32; }
        this.outputType = outputType;
    }
    ArgMaxOptionsT.prototype.pack = function (builder) {
        return ArgMaxOptions.createArgMaxOptions(builder, this.outputType);
    };
    return ArgMaxOptionsT;
}());
exports.ArgMaxOptionsT = ArgMaxOptionsT;
var ArgMinOptions = /** @class */ (function () {
    function ArgMinOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ArgMinOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ArgMinOptions.getRootAsArgMinOptions = function (bb, obj) {
        return (obj || new ArgMinOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ArgMinOptions.getSizePrefixedRootAsArgMinOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ArgMinOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ArgMinOptions.prototype.outputType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    ArgMinOptions.startArgMinOptions = function (builder) {
        builder.startObject(1);
    };
    ArgMinOptions.addOutputType = function (builder, outputType) {
        builder.addFieldInt8(0, outputType, TensorType.FLOAT32);
    };
    ArgMinOptions.endArgMinOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ArgMinOptions.createArgMinOptions = function (builder, outputType) {
        ArgMinOptions.startArgMinOptions(builder);
        ArgMinOptions.addOutputType(builder, outputType);
        return ArgMinOptions.endArgMinOptions(builder);
    };
    ArgMinOptions.prototype.unpack = function () {
        return new ArgMinOptionsT(this.outputType());
    };
    ArgMinOptions.prototype.unpackTo = function (_o) {
        _o.outputType = this.outputType();
    };
    return ArgMinOptions;
}());
exports.ArgMinOptions = ArgMinOptions;
var ArgMinOptionsT = /** @class */ (function () {
    function ArgMinOptionsT(outputType) {
        if (outputType === void 0) { outputType = TensorType.FLOAT32; }
        this.outputType = outputType;
    }
    ArgMinOptionsT.prototype.pack = function (builder) {
        return ArgMinOptions.createArgMinOptions(builder, this.outputType);
    };
    return ArgMinOptionsT;
}());
exports.ArgMinOptionsT = ArgMinOptionsT;
var GreaterOptions = /** @class */ (function () {
    function GreaterOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GreaterOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GreaterOptions.getRootAsGreaterOptions = function (bb, obj) {
        return (obj || new GreaterOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GreaterOptions.getSizePrefixedRootAsGreaterOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GreaterOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GreaterOptions.startGreaterOptions = function (builder) {
        builder.startObject(0);
    };
    GreaterOptions.endGreaterOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GreaterOptions.createGreaterOptions = function (builder) {
        GreaterOptions.startGreaterOptions(builder);
        return GreaterOptions.endGreaterOptions(builder);
    };
    GreaterOptions.prototype.unpack = function () {
        return new GreaterOptionsT();
    };
    GreaterOptions.prototype.unpackTo = function (_o) { };
    return GreaterOptions;
}());
exports.GreaterOptions = GreaterOptions;
var GreaterOptionsT = /** @class */ (function () {
    function GreaterOptionsT() {
    }
    GreaterOptionsT.prototype.pack = function (builder) {
        return GreaterOptions.createGreaterOptions(builder);
    };
    return GreaterOptionsT;
}());
exports.GreaterOptionsT = GreaterOptionsT;
var GreaterEqualOptions = /** @class */ (function () {
    function GreaterEqualOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GreaterEqualOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GreaterEqualOptions.getRootAsGreaterEqualOptions = function (bb, obj) {
        return (obj || new GreaterEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GreaterEqualOptions.getSizePrefixedRootAsGreaterEqualOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GreaterEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GreaterEqualOptions.startGreaterEqualOptions = function (builder) {
        builder.startObject(0);
    };
    GreaterEqualOptions.endGreaterEqualOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GreaterEqualOptions.createGreaterEqualOptions = function (builder) {
        GreaterEqualOptions.startGreaterEqualOptions(builder);
        return GreaterEqualOptions.endGreaterEqualOptions(builder);
    };
    GreaterEqualOptions.prototype.unpack = function () {
        return new GreaterEqualOptionsT();
    };
    GreaterEqualOptions.prototype.unpackTo = function (_o) { };
    return GreaterEqualOptions;
}());
exports.GreaterEqualOptions = GreaterEqualOptions;
var GreaterEqualOptionsT = /** @class */ (function () {
    function GreaterEqualOptionsT() {
    }
    GreaterEqualOptionsT.prototype.pack = function (builder) {
        return GreaterEqualOptions.createGreaterEqualOptions(builder);
    };
    return GreaterEqualOptionsT;
}());
exports.GreaterEqualOptionsT = GreaterEqualOptionsT;
var LessOptions = /** @class */ (function () {
    function LessOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LessOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LessOptions.getRootAsLessOptions = function (bb, obj) {
        return (obj || new LessOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LessOptions.getSizePrefixedRootAsLessOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LessOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LessOptions.startLessOptions = function (builder) {
        builder.startObject(0);
    };
    LessOptions.endLessOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LessOptions.createLessOptions = function (builder) {
        LessOptions.startLessOptions(builder);
        return LessOptions.endLessOptions(builder);
    };
    LessOptions.prototype.unpack = function () {
        return new LessOptionsT();
    };
    LessOptions.prototype.unpackTo = function (_o) { };
    return LessOptions;
}());
exports.LessOptions = LessOptions;
var LessOptionsT = /** @class */ (function () {
    function LessOptionsT() {
    }
    LessOptionsT.prototype.pack = function (builder) {
        return LessOptions.createLessOptions(builder);
    };
    return LessOptionsT;
}());
exports.LessOptionsT = LessOptionsT;
var LessEqualOptions = /** @class */ (function () {
    function LessEqualOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LessEqualOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LessEqualOptions.getRootAsLessEqualOptions = function (bb, obj) {
        return (obj || new LessEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LessEqualOptions.getSizePrefixedRootAsLessEqualOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LessEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LessEqualOptions.startLessEqualOptions = function (builder) {
        builder.startObject(0);
    };
    LessEqualOptions.endLessEqualOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LessEqualOptions.createLessEqualOptions = function (builder) {
        LessEqualOptions.startLessEqualOptions(builder);
        return LessEqualOptions.endLessEqualOptions(builder);
    };
    LessEqualOptions.prototype.unpack = function () {
        return new LessEqualOptionsT();
    };
    LessEqualOptions.prototype.unpackTo = function (_o) { };
    return LessEqualOptions;
}());
exports.LessEqualOptions = LessEqualOptions;
var LessEqualOptionsT = /** @class */ (function () {
    function LessEqualOptionsT() {
    }
    LessEqualOptionsT.prototype.pack = function (builder) {
        return LessEqualOptions.createLessEqualOptions(builder);
    };
    return LessEqualOptionsT;
}());
exports.LessEqualOptionsT = LessEqualOptionsT;
var NegOptions = /** @class */ (function () {
    function NegOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    NegOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    NegOptions.getRootAsNegOptions = function (bb, obj) {
        return (obj || new NegOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NegOptions.getSizePrefixedRootAsNegOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NegOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NegOptions.startNegOptions = function (builder) {
        builder.startObject(0);
    };
    NegOptions.endNegOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    NegOptions.createNegOptions = function (builder) {
        NegOptions.startNegOptions(builder);
        return NegOptions.endNegOptions(builder);
    };
    NegOptions.prototype.unpack = function () {
        return new NegOptionsT();
    };
    NegOptions.prototype.unpackTo = function (_o) { };
    return NegOptions;
}());
exports.NegOptions = NegOptions;
var NegOptionsT = /** @class */ (function () {
    function NegOptionsT() {
    }
    NegOptionsT.prototype.pack = function (builder) {
        return NegOptions.createNegOptions(builder);
    };
    return NegOptionsT;
}());
exports.NegOptionsT = NegOptionsT;
var SelectOptions = /** @class */ (function () {
    function SelectOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SelectOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SelectOptions.getRootAsSelectOptions = function (bb, obj) {
        return (obj || new SelectOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SelectOptions.getSizePrefixedRootAsSelectOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SelectOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SelectOptions.startSelectOptions = function (builder) {
        builder.startObject(0);
    };
    SelectOptions.endSelectOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SelectOptions.createSelectOptions = function (builder) {
        SelectOptions.startSelectOptions(builder);
        return SelectOptions.endSelectOptions(builder);
    };
    SelectOptions.prototype.unpack = function () {
        return new SelectOptionsT();
    };
    SelectOptions.prototype.unpackTo = function (_o) { };
    return SelectOptions;
}());
exports.SelectOptions = SelectOptions;
var SelectOptionsT = /** @class */ (function () {
    function SelectOptionsT() {
    }
    SelectOptionsT.prototype.pack = function (builder) {
        return SelectOptions.createSelectOptions(builder);
    };
    return SelectOptionsT;
}());
exports.SelectOptionsT = SelectOptionsT;
var SliceOptions = /** @class */ (function () {
    function SliceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SliceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SliceOptions.getRootAsSliceOptions = function (bb, obj) {
        return (obj || new SliceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SliceOptions.getSizePrefixedRootAsSliceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SliceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SliceOptions.startSliceOptions = function (builder) {
        builder.startObject(0);
    };
    SliceOptions.endSliceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SliceOptions.createSliceOptions = function (builder) {
        SliceOptions.startSliceOptions(builder);
        return SliceOptions.endSliceOptions(builder);
    };
    SliceOptions.prototype.unpack = function () {
        return new SliceOptionsT();
    };
    SliceOptions.prototype.unpackTo = function (_o) { };
    return SliceOptions;
}());
exports.SliceOptions = SliceOptions;
var SliceOptionsT = /** @class */ (function () {
    function SliceOptionsT() {
    }
    SliceOptionsT.prototype.pack = function (builder) {
        return SliceOptions.createSliceOptions(builder);
    };
    return SliceOptionsT;
}());
exports.SliceOptionsT = SliceOptionsT;
var TransposeConvOptions = /** @class */ (function () {
    function TransposeConvOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TransposeConvOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TransposeConvOptions.getRootAsTransposeConvOptions = function (bb, obj) {
        return (obj || new TransposeConvOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TransposeConvOptions.getSizePrefixedRootAsTransposeConvOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TransposeConvOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TransposeConvOptions.prototype.padding = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Padding.SAME;
    };
    TransposeConvOptions.prototype.strideW = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TransposeConvOptions.prototype.strideH = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    TransposeConvOptions.startTransposeConvOptions = function (builder) {
        builder.startObject(3);
    };
    TransposeConvOptions.addPadding = function (builder, padding) {
        builder.addFieldInt8(0, padding, Padding.SAME);
    };
    TransposeConvOptions.addStrideW = function (builder, strideW) {
        builder.addFieldInt32(1, strideW, 0);
    };
    TransposeConvOptions.addStrideH = function (builder, strideH) {
        builder.addFieldInt32(2, strideH, 0);
    };
    TransposeConvOptions.endTransposeConvOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TransposeConvOptions.createTransposeConvOptions = function (builder, padding, strideW, strideH) {
        TransposeConvOptions.startTransposeConvOptions(builder);
        TransposeConvOptions.addPadding(builder, padding);
        TransposeConvOptions.addStrideW(builder, strideW);
        TransposeConvOptions.addStrideH(builder, strideH);
        return TransposeConvOptions.endTransposeConvOptions(builder);
    };
    TransposeConvOptions.prototype.unpack = function () {
        return new TransposeConvOptionsT(this.padding(), this.strideW(), this.strideH());
    };
    TransposeConvOptions.prototype.unpackTo = function (_o) {
        _o.padding = this.padding();
        _o.strideW = this.strideW();
        _o.strideH = this.strideH();
    };
    return TransposeConvOptions;
}());
exports.TransposeConvOptions = TransposeConvOptions;
var TransposeConvOptionsT = /** @class */ (function () {
    function TransposeConvOptionsT(padding, strideW, strideH) {
        if (padding === void 0) { padding = Padding.SAME; }
        if (strideW === void 0) { strideW = 0; }
        if (strideH === void 0) { strideH = 0; }
        this.padding = padding;
        this.strideW = strideW;
        this.strideH = strideH;
    }
    TransposeConvOptionsT.prototype.pack = function (builder) {
        return TransposeConvOptions.createTransposeConvOptions(builder, this.padding, this.strideW, this.strideH);
    };
    return TransposeConvOptionsT;
}());
exports.TransposeConvOptionsT = TransposeConvOptionsT;
var ExpandDimsOptions = /** @class */ (function () {
    function ExpandDimsOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ExpandDimsOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ExpandDimsOptions.getRootAsExpandDimsOptions = function (bb, obj) {
        return (obj || new ExpandDimsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ExpandDimsOptions.getSizePrefixedRootAsExpandDimsOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ExpandDimsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ExpandDimsOptions.startExpandDimsOptions = function (builder) {
        builder.startObject(0);
    };
    ExpandDimsOptions.endExpandDimsOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ExpandDimsOptions.createExpandDimsOptions = function (builder) {
        ExpandDimsOptions.startExpandDimsOptions(builder);
        return ExpandDimsOptions.endExpandDimsOptions(builder);
    };
    ExpandDimsOptions.prototype.unpack = function () {
        return new ExpandDimsOptionsT();
    };
    ExpandDimsOptions.prototype.unpackTo = function (_o) { };
    return ExpandDimsOptions;
}());
exports.ExpandDimsOptions = ExpandDimsOptions;
var ExpandDimsOptionsT = /** @class */ (function () {
    function ExpandDimsOptionsT() {
    }
    ExpandDimsOptionsT.prototype.pack = function (builder) {
        return ExpandDimsOptions.createExpandDimsOptions(builder);
    };
    return ExpandDimsOptionsT;
}());
exports.ExpandDimsOptionsT = ExpandDimsOptionsT;
var SparseToDenseOptions = /** @class */ (function () {
    function SparseToDenseOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SparseToDenseOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SparseToDenseOptions.getRootAsSparseToDenseOptions = function (bb, obj) {
        return (obj || new SparseToDenseOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SparseToDenseOptions.getSizePrefixedRootAsSparseToDenseOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SparseToDenseOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SparseToDenseOptions.prototype.validateIndices = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SparseToDenseOptions.startSparseToDenseOptions = function (builder) {
        builder.startObject(1);
    };
    SparseToDenseOptions.addValidateIndices = function (builder, validateIndices) {
        builder.addFieldInt8(0, +validateIndices, +false);
    };
    SparseToDenseOptions.endSparseToDenseOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SparseToDenseOptions.createSparseToDenseOptions = function (builder, validateIndices) {
        SparseToDenseOptions.startSparseToDenseOptions(builder);
        SparseToDenseOptions.addValidateIndices(builder, validateIndices);
        return SparseToDenseOptions.endSparseToDenseOptions(builder);
    };
    SparseToDenseOptions.prototype.unpack = function () {
        return new SparseToDenseOptionsT(this.validateIndices());
    };
    SparseToDenseOptions.prototype.unpackTo = function (_o) {
        _o.validateIndices = this.validateIndices();
    };
    return SparseToDenseOptions;
}());
exports.SparseToDenseOptions = SparseToDenseOptions;
var SparseToDenseOptionsT = /** @class */ (function () {
    function SparseToDenseOptionsT(validateIndices) {
        if (validateIndices === void 0) { validateIndices = false; }
        this.validateIndices = validateIndices;
    }
    SparseToDenseOptionsT.prototype.pack = function (builder) {
        return SparseToDenseOptions.createSparseToDenseOptions(builder, this.validateIndices);
    };
    return SparseToDenseOptionsT;
}());
exports.SparseToDenseOptionsT = SparseToDenseOptionsT;
var EqualOptions = /** @class */ (function () {
    function EqualOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    EqualOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    EqualOptions.getRootAsEqualOptions = function (bb, obj) {
        return (obj || new EqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    EqualOptions.getSizePrefixedRootAsEqualOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    EqualOptions.startEqualOptions = function (builder) {
        builder.startObject(0);
    };
    EqualOptions.endEqualOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    EqualOptions.createEqualOptions = function (builder) {
        EqualOptions.startEqualOptions(builder);
        return EqualOptions.endEqualOptions(builder);
    };
    EqualOptions.prototype.unpack = function () {
        return new EqualOptionsT();
    };
    EqualOptions.prototype.unpackTo = function (_o) { };
    return EqualOptions;
}());
exports.EqualOptions = EqualOptions;
var EqualOptionsT = /** @class */ (function () {
    function EqualOptionsT() {
    }
    EqualOptionsT.prototype.pack = function (builder) {
        return EqualOptions.createEqualOptions(builder);
    };
    return EqualOptionsT;
}());
exports.EqualOptionsT = EqualOptionsT;
var NotEqualOptions = /** @class */ (function () {
    function NotEqualOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    NotEqualOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    NotEqualOptions.getRootAsNotEqualOptions = function (bb, obj) {
        return (obj || new NotEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NotEqualOptions.getSizePrefixedRootAsNotEqualOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NotEqualOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NotEqualOptions.startNotEqualOptions = function (builder) {
        builder.startObject(0);
    };
    NotEqualOptions.endNotEqualOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    NotEqualOptions.createNotEqualOptions = function (builder) {
        NotEqualOptions.startNotEqualOptions(builder);
        return NotEqualOptions.endNotEqualOptions(builder);
    };
    NotEqualOptions.prototype.unpack = function () {
        return new NotEqualOptionsT();
    };
    NotEqualOptions.prototype.unpackTo = function (_o) { };
    return NotEqualOptions;
}());
exports.NotEqualOptions = NotEqualOptions;
var NotEqualOptionsT = /** @class */ (function () {
    function NotEqualOptionsT() {
    }
    NotEqualOptionsT.prototype.pack = function (builder) {
        return NotEqualOptions.createNotEqualOptions(builder);
    };
    return NotEqualOptionsT;
}());
exports.NotEqualOptionsT = NotEqualOptionsT;
var ShapeOptions = /** @class */ (function () {
    function ShapeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ShapeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ShapeOptions.getRootAsShapeOptions = function (bb, obj) {
        return (obj || new ShapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ShapeOptions.getSizePrefixedRootAsShapeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ShapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ShapeOptions.prototype.outType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    ShapeOptions.startShapeOptions = function (builder) {
        builder.startObject(1);
    };
    ShapeOptions.addOutType = function (builder, outType) {
        builder.addFieldInt8(0, outType, TensorType.FLOAT32);
    };
    ShapeOptions.endShapeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ShapeOptions.createShapeOptions = function (builder, outType) {
        ShapeOptions.startShapeOptions(builder);
        ShapeOptions.addOutType(builder, outType);
        return ShapeOptions.endShapeOptions(builder);
    };
    ShapeOptions.prototype.unpack = function () {
        return new ShapeOptionsT(this.outType());
    };
    ShapeOptions.prototype.unpackTo = function (_o) {
        _o.outType = this.outType();
    };
    return ShapeOptions;
}());
exports.ShapeOptions = ShapeOptions;
var ShapeOptionsT = /** @class */ (function () {
    function ShapeOptionsT(outType) {
        if (outType === void 0) { outType = TensorType.FLOAT32; }
        this.outType = outType;
    }
    ShapeOptionsT.prototype.pack = function (builder) {
        return ShapeOptions.createShapeOptions(builder, this.outType);
    };
    return ShapeOptionsT;
}());
exports.ShapeOptionsT = ShapeOptionsT;
var RankOptions = /** @class */ (function () {
    function RankOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RankOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RankOptions.getRootAsRankOptions = function (bb, obj) {
        return (obj || new RankOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RankOptions.getSizePrefixedRootAsRankOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RankOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RankOptions.startRankOptions = function (builder) {
        builder.startObject(0);
    };
    RankOptions.endRankOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RankOptions.createRankOptions = function (builder) {
        RankOptions.startRankOptions(builder);
        return RankOptions.endRankOptions(builder);
    };
    RankOptions.prototype.unpack = function () {
        return new RankOptionsT();
    };
    RankOptions.prototype.unpackTo = function (_o) { };
    return RankOptions;
}());
exports.RankOptions = RankOptions;
var RankOptionsT = /** @class */ (function () {
    function RankOptionsT() {
    }
    RankOptionsT.prototype.pack = function (builder) {
        return RankOptions.createRankOptions(builder);
    };
    return RankOptionsT;
}());
exports.RankOptionsT = RankOptionsT;
var PowOptions = /** @class */ (function () {
    function PowOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PowOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PowOptions.getRootAsPowOptions = function (bb, obj) {
        return (obj || new PowOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PowOptions.getSizePrefixedRootAsPowOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PowOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PowOptions.startPowOptions = function (builder) {
        builder.startObject(0);
    };
    PowOptions.endPowOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PowOptions.createPowOptions = function (builder) {
        PowOptions.startPowOptions(builder);
        return PowOptions.endPowOptions(builder);
    };
    PowOptions.prototype.unpack = function () {
        return new PowOptionsT();
    };
    PowOptions.prototype.unpackTo = function (_o) { };
    return PowOptions;
}());
exports.PowOptions = PowOptions;
var PowOptionsT = /** @class */ (function () {
    function PowOptionsT() {
    }
    PowOptionsT.prototype.pack = function (builder) {
        return PowOptions.createPowOptions(builder);
    };
    return PowOptionsT;
}());
exports.PowOptionsT = PowOptionsT;
var FakeQuantOptions = /** @class */ (function () {
    function FakeQuantOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FakeQuantOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FakeQuantOptions.getRootAsFakeQuantOptions = function (bb, obj) {
        return (obj || new FakeQuantOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FakeQuantOptions.getSizePrefixedRootAsFakeQuantOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FakeQuantOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FakeQuantOptions.prototype.min = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    FakeQuantOptions.prototype.max = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    FakeQuantOptions.prototype.numBits = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    FakeQuantOptions.prototype.narrowRange = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    FakeQuantOptions.startFakeQuantOptions = function (builder) {
        builder.startObject(4);
    };
    FakeQuantOptions.addMin = function (builder, min) {
        builder.addFieldFloat32(0, min, 0.0);
    };
    FakeQuantOptions.addMax = function (builder, max) {
        builder.addFieldFloat32(1, max, 0.0);
    };
    FakeQuantOptions.addNumBits = function (builder, numBits) {
        builder.addFieldInt32(2, numBits, 0);
    };
    FakeQuantOptions.addNarrowRange = function (builder, narrowRange) {
        builder.addFieldInt8(3, +narrowRange, +false);
    };
    FakeQuantOptions.endFakeQuantOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FakeQuantOptions.createFakeQuantOptions = function (builder, min, max, numBits, narrowRange) {
        FakeQuantOptions.startFakeQuantOptions(builder);
        FakeQuantOptions.addMin(builder, min);
        FakeQuantOptions.addMax(builder, max);
        FakeQuantOptions.addNumBits(builder, numBits);
        FakeQuantOptions.addNarrowRange(builder, narrowRange);
        return FakeQuantOptions.endFakeQuantOptions(builder);
    };
    FakeQuantOptions.prototype.unpack = function () {
        return new FakeQuantOptionsT(this.min(), this.max(), this.numBits(), this.narrowRange());
    };
    FakeQuantOptions.prototype.unpackTo = function (_o) {
        _o.min = this.min();
        _o.max = this.max();
        _o.numBits = this.numBits();
        _o.narrowRange = this.narrowRange();
    };
    return FakeQuantOptions;
}());
exports.FakeQuantOptions = FakeQuantOptions;
var FakeQuantOptionsT = /** @class */ (function () {
    function FakeQuantOptionsT(min, max, numBits, narrowRange) {
        if (min === void 0) { min = 0.0; }
        if (max === void 0) { max = 0.0; }
        if (numBits === void 0) { numBits = 0; }
        if (narrowRange === void 0) { narrowRange = false; }
        this.min = min;
        this.max = max;
        this.numBits = numBits;
        this.narrowRange = narrowRange;
    }
    FakeQuantOptionsT.prototype.pack = function (builder) {
        return FakeQuantOptions.createFakeQuantOptions(builder, this.min, this.max, this.numBits, this.narrowRange);
    };
    return FakeQuantOptionsT;
}());
exports.FakeQuantOptionsT = FakeQuantOptionsT;
var PackOptions = /** @class */ (function () {
    function PackOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    PackOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    PackOptions.getRootAsPackOptions = function (bb, obj) {
        return (obj || new PackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PackOptions.getSizePrefixedRootAsPackOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    PackOptions.prototype.valuesCount = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PackOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    PackOptions.startPackOptions = function (builder) {
        builder.startObject(2);
    };
    PackOptions.addValuesCount = function (builder, valuesCount) {
        builder.addFieldInt32(0, valuesCount, 0);
    };
    PackOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(1, axis, 0);
    };
    PackOptions.endPackOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    PackOptions.createPackOptions = function (builder, valuesCount, axis) {
        PackOptions.startPackOptions(builder);
        PackOptions.addValuesCount(builder, valuesCount);
        PackOptions.addAxis(builder, axis);
        return PackOptions.endPackOptions(builder);
    };
    PackOptions.prototype.unpack = function () {
        return new PackOptionsT(this.valuesCount(), this.axis());
    };
    PackOptions.prototype.unpackTo = function (_o) {
        _o.valuesCount = this.valuesCount();
        _o.axis = this.axis();
    };
    return PackOptions;
}());
exports.PackOptions = PackOptions;
var PackOptionsT = /** @class */ (function () {
    function PackOptionsT(valuesCount, axis) {
        if (valuesCount === void 0) { valuesCount = 0; }
        if (axis === void 0) { axis = 0; }
        this.valuesCount = valuesCount;
        this.axis = axis;
    }
    PackOptionsT.prototype.pack = function (builder) {
        return PackOptions.createPackOptions(builder, this.valuesCount, this.axis);
    };
    return PackOptionsT;
}());
exports.PackOptionsT = PackOptionsT;
var LogicalOrOptions = /** @class */ (function () {
    function LogicalOrOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LogicalOrOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LogicalOrOptions.getRootAsLogicalOrOptions = function (bb, obj) {
        return (obj || new LogicalOrOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalOrOptions.getSizePrefixedRootAsLogicalOrOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LogicalOrOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalOrOptions.startLogicalOrOptions = function (builder) {
        builder.startObject(0);
    };
    LogicalOrOptions.endLogicalOrOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LogicalOrOptions.createLogicalOrOptions = function (builder) {
        LogicalOrOptions.startLogicalOrOptions(builder);
        return LogicalOrOptions.endLogicalOrOptions(builder);
    };
    LogicalOrOptions.prototype.unpack = function () {
        return new LogicalOrOptionsT();
    };
    LogicalOrOptions.prototype.unpackTo = function (_o) { };
    return LogicalOrOptions;
}());
exports.LogicalOrOptions = LogicalOrOptions;
var LogicalOrOptionsT = /** @class */ (function () {
    function LogicalOrOptionsT() {
    }
    LogicalOrOptionsT.prototype.pack = function (builder) {
        return LogicalOrOptions.createLogicalOrOptions(builder);
    };
    return LogicalOrOptionsT;
}());
exports.LogicalOrOptionsT = LogicalOrOptionsT;
var OneHotOptions = /** @class */ (function () {
    function OneHotOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    OneHotOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    OneHotOptions.getRootAsOneHotOptions = function (bb, obj) {
        return (obj || new OneHotOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OneHotOptions.getSizePrefixedRootAsOneHotOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OneHotOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OneHotOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    OneHotOptions.startOneHotOptions = function (builder) {
        builder.startObject(1);
    };
    OneHotOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(0, axis, 0);
    };
    OneHotOptions.endOneHotOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    OneHotOptions.createOneHotOptions = function (builder, axis) {
        OneHotOptions.startOneHotOptions(builder);
        OneHotOptions.addAxis(builder, axis);
        return OneHotOptions.endOneHotOptions(builder);
    };
    OneHotOptions.prototype.unpack = function () {
        return new OneHotOptionsT(this.axis());
    };
    OneHotOptions.prototype.unpackTo = function (_o) {
        _o.axis = this.axis();
    };
    return OneHotOptions;
}());
exports.OneHotOptions = OneHotOptions;
var OneHotOptionsT = /** @class */ (function () {
    function OneHotOptionsT(axis) {
        if (axis === void 0) { axis = 0; }
        this.axis = axis;
    }
    OneHotOptionsT.prototype.pack = function (builder) {
        return OneHotOptions.createOneHotOptions(builder, this.axis);
    };
    return OneHotOptionsT;
}());
exports.OneHotOptionsT = OneHotOptionsT;
var AbsOptions = /** @class */ (function () {
    function AbsOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AbsOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AbsOptions.getRootAsAbsOptions = function (bb, obj) {
        return (obj || new AbsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AbsOptions.getSizePrefixedRootAsAbsOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AbsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AbsOptions.startAbsOptions = function (builder) {
        builder.startObject(0);
    };
    AbsOptions.endAbsOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AbsOptions.createAbsOptions = function (builder) {
        AbsOptions.startAbsOptions(builder);
        return AbsOptions.endAbsOptions(builder);
    };
    AbsOptions.prototype.unpack = function () {
        return new AbsOptionsT();
    };
    AbsOptions.prototype.unpackTo = function (_o) { };
    return AbsOptions;
}());
exports.AbsOptions = AbsOptions;
var AbsOptionsT = /** @class */ (function () {
    function AbsOptionsT() {
    }
    AbsOptionsT.prototype.pack = function (builder) {
        return AbsOptions.createAbsOptions(builder);
    };
    return AbsOptionsT;
}());
exports.AbsOptionsT = AbsOptionsT;
var HardSwishOptions = /** @class */ (function () {
    function HardSwishOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    HardSwishOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    HardSwishOptions.getRootAsHardSwishOptions = function (bb, obj) {
        return (obj || new HardSwishOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HardSwishOptions.getSizePrefixedRootAsHardSwishOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HardSwishOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HardSwishOptions.startHardSwishOptions = function (builder) {
        builder.startObject(0);
    };
    HardSwishOptions.endHardSwishOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    HardSwishOptions.createHardSwishOptions = function (builder) {
        HardSwishOptions.startHardSwishOptions(builder);
        return HardSwishOptions.endHardSwishOptions(builder);
    };
    HardSwishOptions.prototype.unpack = function () {
        return new HardSwishOptionsT();
    };
    HardSwishOptions.prototype.unpackTo = function (_o) { };
    return HardSwishOptions;
}());
exports.HardSwishOptions = HardSwishOptions;
var HardSwishOptionsT = /** @class */ (function () {
    function HardSwishOptionsT() {
    }
    HardSwishOptionsT.prototype.pack = function (builder) {
        return HardSwishOptions.createHardSwishOptions(builder);
    };
    return HardSwishOptionsT;
}());
exports.HardSwishOptionsT = HardSwishOptionsT;
var LogicalAndOptions = /** @class */ (function () {
    function LogicalAndOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LogicalAndOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LogicalAndOptions.getRootAsLogicalAndOptions = function (bb, obj) {
        return (obj || new LogicalAndOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalAndOptions.getSizePrefixedRootAsLogicalAndOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LogicalAndOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalAndOptions.startLogicalAndOptions = function (builder) {
        builder.startObject(0);
    };
    LogicalAndOptions.endLogicalAndOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LogicalAndOptions.createLogicalAndOptions = function (builder) {
        LogicalAndOptions.startLogicalAndOptions(builder);
        return LogicalAndOptions.endLogicalAndOptions(builder);
    };
    LogicalAndOptions.prototype.unpack = function () {
        return new LogicalAndOptionsT();
    };
    LogicalAndOptions.prototype.unpackTo = function (_o) { };
    return LogicalAndOptions;
}());
exports.LogicalAndOptions = LogicalAndOptions;
var LogicalAndOptionsT = /** @class */ (function () {
    function LogicalAndOptionsT() {
    }
    LogicalAndOptionsT.prototype.pack = function (builder) {
        return LogicalAndOptions.createLogicalAndOptions(builder);
    };
    return LogicalAndOptionsT;
}());
exports.LogicalAndOptionsT = LogicalAndOptionsT;
var LogicalNotOptions = /** @class */ (function () {
    function LogicalNotOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LogicalNotOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LogicalNotOptions.getRootAsLogicalNotOptions = function (bb, obj) {
        return (obj || new LogicalNotOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalNotOptions.getSizePrefixedRootAsLogicalNotOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LogicalNotOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LogicalNotOptions.startLogicalNotOptions = function (builder) {
        builder.startObject(0);
    };
    LogicalNotOptions.endLogicalNotOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LogicalNotOptions.createLogicalNotOptions = function (builder) {
        LogicalNotOptions.startLogicalNotOptions(builder);
        return LogicalNotOptions.endLogicalNotOptions(builder);
    };
    LogicalNotOptions.prototype.unpack = function () {
        return new LogicalNotOptionsT();
    };
    LogicalNotOptions.prototype.unpackTo = function (_o) { };
    return LogicalNotOptions;
}());
exports.LogicalNotOptions = LogicalNotOptions;
var LogicalNotOptionsT = /** @class */ (function () {
    function LogicalNotOptionsT() {
    }
    LogicalNotOptionsT.prototype.pack = function (builder) {
        return LogicalNotOptions.createLogicalNotOptions(builder);
    };
    return LogicalNotOptionsT;
}());
exports.LogicalNotOptionsT = LogicalNotOptionsT;
var UnpackOptions = /** @class */ (function () {
    function UnpackOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    UnpackOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    UnpackOptions.getRootAsUnpackOptions = function (bb, obj) {
        return (obj || new UnpackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnpackOptions.getSizePrefixedRootAsUnpackOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UnpackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnpackOptions.prototype.num = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    UnpackOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    UnpackOptions.startUnpackOptions = function (builder) {
        builder.startObject(2);
    };
    UnpackOptions.addNum = function (builder, num) {
        builder.addFieldInt32(0, num, 0);
    };
    UnpackOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(1, axis, 0);
    };
    UnpackOptions.endUnpackOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    UnpackOptions.createUnpackOptions = function (builder, num, axis) {
        UnpackOptions.startUnpackOptions(builder);
        UnpackOptions.addNum(builder, num);
        UnpackOptions.addAxis(builder, axis);
        return UnpackOptions.endUnpackOptions(builder);
    };
    UnpackOptions.prototype.unpack = function () {
        return new UnpackOptionsT(this.num(), this.axis());
    };
    UnpackOptions.prototype.unpackTo = function (_o) {
        _o.num = this.num();
        _o.axis = this.axis();
    };
    return UnpackOptions;
}());
exports.UnpackOptions = UnpackOptions;
var UnpackOptionsT = /** @class */ (function () {
    function UnpackOptionsT(num, axis) {
        if (num === void 0) { num = 0; }
        if (axis === void 0) { axis = 0; }
        this.num = num;
        this.axis = axis;
    }
    UnpackOptionsT.prototype.pack = function (builder) {
        return UnpackOptions.createUnpackOptions(builder, this.num, this.axis);
    };
    return UnpackOptionsT;
}());
exports.UnpackOptionsT = UnpackOptionsT;
var FloorDivOptions = /** @class */ (function () {
    function FloorDivOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FloorDivOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FloorDivOptions.getRootAsFloorDivOptions = function (bb, obj) {
        return (obj || new FloorDivOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloorDivOptions.getSizePrefixedRootAsFloorDivOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FloorDivOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloorDivOptions.startFloorDivOptions = function (builder) {
        builder.startObject(0);
    };
    FloorDivOptions.endFloorDivOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FloorDivOptions.createFloorDivOptions = function (builder) {
        FloorDivOptions.startFloorDivOptions(builder);
        return FloorDivOptions.endFloorDivOptions(builder);
    };
    FloorDivOptions.prototype.unpack = function () {
        return new FloorDivOptionsT();
    };
    FloorDivOptions.prototype.unpackTo = function (_o) { };
    return FloorDivOptions;
}());
exports.FloorDivOptions = FloorDivOptions;
var FloorDivOptionsT = /** @class */ (function () {
    function FloorDivOptionsT() {
    }
    FloorDivOptionsT.prototype.pack = function (builder) {
        return FloorDivOptions.createFloorDivOptions(builder);
    };
    return FloorDivOptionsT;
}());
exports.FloorDivOptionsT = FloorDivOptionsT;
var SquareOptions = /** @class */ (function () {
    function SquareOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SquareOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SquareOptions.getRootAsSquareOptions = function (bb, obj) {
        return (obj || new SquareOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SquareOptions.getSizePrefixedRootAsSquareOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SquareOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SquareOptions.startSquareOptions = function (builder) {
        builder.startObject(0);
    };
    SquareOptions.endSquareOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SquareOptions.createSquareOptions = function (builder) {
        SquareOptions.startSquareOptions(builder);
        return SquareOptions.endSquareOptions(builder);
    };
    SquareOptions.prototype.unpack = function () {
        return new SquareOptionsT();
    };
    SquareOptions.prototype.unpackTo = function (_o) { };
    return SquareOptions;
}());
exports.SquareOptions = SquareOptions;
var SquareOptionsT = /** @class */ (function () {
    function SquareOptionsT() {
    }
    SquareOptionsT.prototype.pack = function (builder) {
        return SquareOptions.createSquareOptions(builder);
    };
    return SquareOptionsT;
}());
exports.SquareOptionsT = SquareOptionsT;
var ZerosLikeOptions = /** @class */ (function () {
    function ZerosLikeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ZerosLikeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ZerosLikeOptions.getRootAsZerosLikeOptions = function (bb, obj) {
        return (obj || new ZerosLikeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ZerosLikeOptions.getSizePrefixedRootAsZerosLikeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ZerosLikeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ZerosLikeOptions.startZerosLikeOptions = function (builder) {
        builder.startObject(0);
    };
    ZerosLikeOptions.endZerosLikeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ZerosLikeOptions.createZerosLikeOptions = function (builder) {
        ZerosLikeOptions.startZerosLikeOptions(builder);
        return ZerosLikeOptions.endZerosLikeOptions(builder);
    };
    ZerosLikeOptions.prototype.unpack = function () {
        return new ZerosLikeOptionsT();
    };
    ZerosLikeOptions.prototype.unpackTo = function (_o) { };
    return ZerosLikeOptions;
}());
exports.ZerosLikeOptions = ZerosLikeOptions;
var ZerosLikeOptionsT = /** @class */ (function () {
    function ZerosLikeOptionsT() {
    }
    ZerosLikeOptionsT.prototype.pack = function (builder) {
        return ZerosLikeOptions.createZerosLikeOptions(builder);
    };
    return ZerosLikeOptionsT;
}());
exports.ZerosLikeOptionsT = ZerosLikeOptionsT;
var FillOptions = /** @class */ (function () {
    function FillOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FillOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FillOptions.getRootAsFillOptions = function (bb, obj) {
        return (obj || new FillOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FillOptions.getSizePrefixedRootAsFillOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FillOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FillOptions.startFillOptions = function (builder) {
        builder.startObject(0);
    };
    FillOptions.endFillOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FillOptions.createFillOptions = function (builder) {
        FillOptions.startFillOptions(builder);
        return FillOptions.endFillOptions(builder);
    };
    FillOptions.prototype.unpack = function () {
        return new FillOptionsT();
    };
    FillOptions.prototype.unpackTo = function (_o) { };
    return FillOptions;
}());
exports.FillOptions = FillOptions;
var FillOptionsT = /** @class */ (function () {
    function FillOptionsT() {
    }
    FillOptionsT.prototype.pack = function (builder) {
        return FillOptions.createFillOptions(builder);
    };
    return FillOptionsT;
}());
exports.FillOptionsT = FillOptionsT;
var FloorModOptions = /** @class */ (function () {
    function FloorModOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FloorModOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FloorModOptions.getRootAsFloorModOptions = function (bb, obj) {
        return (obj || new FloorModOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloorModOptions.getSizePrefixedRootAsFloorModOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FloorModOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloorModOptions.startFloorModOptions = function (builder) {
        builder.startObject(0);
    };
    FloorModOptions.endFloorModOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FloorModOptions.createFloorModOptions = function (builder) {
        FloorModOptions.startFloorModOptions(builder);
        return FloorModOptions.endFloorModOptions(builder);
    };
    FloorModOptions.prototype.unpack = function () {
        return new FloorModOptionsT();
    };
    FloorModOptions.prototype.unpackTo = function (_o) { };
    return FloorModOptions;
}());
exports.FloorModOptions = FloorModOptions;
var FloorModOptionsT = /** @class */ (function () {
    function FloorModOptionsT() {
    }
    FloorModOptionsT.prototype.pack = function (builder) {
        return FloorModOptions.createFloorModOptions(builder);
    };
    return FloorModOptionsT;
}());
exports.FloorModOptionsT = FloorModOptionsT;
var RangeOptions = /** @class */ (function () {
    function RangeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RangeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RangeOptions.getRootAsRangeOptions = function (bb, obj) {
        return (obj || new RangeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RangeOptions.getSizePrefixedRootAsRangeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RangeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RangeOptions.startRangeOptions = function (builder) {
        builder.startObject(0);
    };
    RangeOptions.endRangeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RangeOptions.createRangeOptions = function (builder) {
        RangeOptions.startRangeOptions(builder);
        return RangeOptions.endRangeOptions(builder);
    };
    RangeOptions.prototype.unpack = function () {
        return new RangeOptionsT();
    };
    RangeOptions.prototype.unpackTo = function (_o) { };
    return RangeOptions;
}());
exports.RangeOptions = RangeOptions;
var RangeOptionsT = /** @class */ (function () {
    function RangeOptionsT() {
    }
    RangeOptionsT.prototype.pack = function (builder) {
        return RangeOptions.createRangeOptions(builder);
    };
    return RangeOptionsT;
}());
exports.RangeOptionsT = RangeOptionsT;
var LeakyReluOptions = /** @class */ (function () {
    function LeakyReluOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LeakyReluOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LeakyReluOptions.getRootAsLeakyReluOptions = function (bb, obj) {
        return (obj || new LeakyReluOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LeakyReluOptions.getSizePrefixedRootAsLeakyReluOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LeakyReluOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LeakyReluOptions.prototype.alpha = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LeakyReluOptions.startLeakyReluOptions = function (builder) {
        builder.startObject(1);
    };
    LeakyReluOptions.addAlpha = function (builder, alpha) {
        builder.addFieldFloat32(0, alpha, 0.0);
    };
    LeakyReluOptions.endLeakyReluOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LeakyReluOptions.createLeakyReluOptions = function (builder, alpha) {
        LeakyReluOptions.startLeakyReluOptions(builder);
        LeakyReluOptions.addAlpha(builder, alpha);
        return LeakyReluOptions.endLeakyReluOptions(builder);
    };
    LeakyReluOptions.prototype.unpack = function () {
        return new LeakyReluOptionsT(this.alpha());
    };
    LeakyReluOptions.prototype.unpackTo = function (_o) {
        _o.alpha = this.alpha();
    };
    return LeakyReluOptions;
}());
exports.LeakyReluOptions = LeakyReluOptions;
var LeakyReluOptionsT = /** @class */ (function () {
    function LeakyReluOptionsT(alpha) {
        if (alpha === void 0) { alpha = 0.0; }
        this.alpha = alpha;
    }
    LeakyReluOptionsT.prototype.pack = function (builder) {
        return LeakyReluOptions.createLeakyReluOptions(builder, this.alpha);
    };
    return LeakyReluOptionsT;
}());
exports.LeakyReluOptionsT = LeakyReluOptionsT;
var SquaredDifferenceOptions = /** @class */ (function () {
    function SquaredDifferenceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SquaredDifferenceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SquaredDifferenceOptions.getRootAsSquaredDifferenceOptions = function (bb, obj) {
        return (obj || new SquaredDifferenceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SquaredDifferenceOptions.getSizePrefixedRootAsSquaredDifferenceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SquaredDifferenceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SquaredDifferenceOptions.startSquaredDifferenceOptions = function (builder) {
        builder.startObject(0);
    };
    SquaredDifferenceOptions.endSquaredDifferenceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SquaredDifferenceOptions.createSquaredDifferenceOptions = function (builder) {
        SquaredDifferenceOptions.startSquaredDifferenceOptions(builder);
        return SquaredDifferenceOptions.endSquaredDifferenceOptions(builder);
    };
    SquaredDifferenceOptions.prototype.unpack = function () {
        return new SquaredDifferenceOptionsT();
    };
    SquaredDifferenceOptions.prototype.unpackTo = function (_o) { };
    return SquaredDifferenceOptions;
}());
exports.SquaredDifferenceOptions = SquaredDifferenceOptions;
var SquaredDifferenceOptionsT = /** @class */ (function () {
    function SquaredDifferenceOptionsT() {
    }
    SquaredDifferenceOptionsT.prototype.pack = function (builder) {
        return SquaredDifferenceOptions.createSquaredDifferenceOptions(builder);
    };
    return SquaredDifferenceOptionsT;
}());
exports.SquaredDifferenceOptionsT = SquaredDifferenceOptionsT;
var MirrorPadOptions = /** @class */ (function () {
    function MirrorPadOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MirrorPadOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MirrorPadOptions.getRootAsMirrorPadOptions = function (bb, obj) {
        return (obj || new MirrorPadOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MirrorPadOptions.getSizePrefixedRootAsMirrorPadOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MirrorPadOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MirrorPadOptions.prototype.mode = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : MirrorPadMode.REFLECT;
    };
    MirrorPadOptions.startMirrorPadOptions = function (builder) {
        builder.startObject(1);
    };
    MirrorPadOptions.addMode = function (builder, mode) {
        builder.addFieldInt8(0, mode, MirrorPadMode.REFLECT);
    };
    MirrorPadOptions.endMirrorPadOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MirrorPadOptions.createMirrorPadOptions = function (builder, mode) {
        MirrorPadOptions.startMirrorPadOptions(builder);
        MirrorPadOptions.addMode(builder, mode);
        return MirrorPadOptions.endMirrorPadOptions(builder);
    };
    MirrorPadOptions.prototype.unpack = function () {
        return new MirrorPadOptionsT(this.mode());
    };
    MirrorPadOptions.prototype.unpackTo = function (_o) {
        _o.mode = this.mode();
    };
    return MirrorPadOptions;
}());
exports.MirrorPadOptions = MirrorPadOptions;
var MirrorPadOptionsT = /** @class */ (function () {
    function MirrorPadOptionsT(mode) {
        if (mode === void 0) { mode = MirrorPadMode.REFLECT; }
        this.mode = mode;
    }
    MirrorPadOptionsT.prototype.pack = function (builder) {
        return MirrorPadOptions.createMirrorPadOptions(builder, this.mode);
    };
    return MirrorPadOptionsT;
}());
exports.MirrorPadOptionsT = MirrorPadOptionsT;
var UniqueOptions = /** @class */ (function () {
    function UniqueOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    UniqueOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    UniqueOptions.getRootAsUniqueOptions = function (bb, obj) {
        return (obj || new UniqueOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UniqueOptions.getSizePrefixedRootAsUniqueOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UniqueOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UniqueOptions.prototype.idxOutType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.INT32;
    };
    UniqueOptions.startUniqueOptions = function (builder) {
        builder.startObject(1);
    };
    UniqueOptions.addIdxOutType = function (builder, idxOutType) {
        builder.addFieldInt8(0, idxOutType, TensorType.INT32);
    };
    UniqueOptions.endUniqueOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    UniqueOptions.createUniqueOptions = function (builder, idxOutType) {
        UniqueOptions.startUniqueOptions(builder);
        UniqueOptions.addIdxOutType(builder, idxOutType);
        return UniqueOptions.endUniqueOptions(builder);
    };
    UniqueOptions.prototype.unpack = function () {
        return new UniqueOptionsT(this.idxOutType());
    };
    UniqueOptions.prototype.unpackTo = function (_o) {
        _o.idxOutType = this.idxOutType();
    };
    return UniqueOptions;
}());
exports.UniqueOptions = UniqueOptions;
var UniqueOptionsT = /** @class */ (function () {
    function UniqueOptionsT(idxOutType) {
        if (idxOutType === void 0) { idxOutType = TensorType.INT32; }
        this.idxOutType = idxOutType;
    }
    UniqueOptionsT.prototype.pack = function (builder) {
        return UniqueOptions.createUniqueOptions(builder, this.idxOutType);
    };
    return UniqueOptionsT;
}());
exports.UniqueOptionsT = UniqueOptionsT;
var ReverseV2Options = /** @class */ (function () {
    function ReverseV2Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ReverseV2Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ReverseV2Options.getRootAsReverseV2Options = function (bb, obj) {
        return (obj || new ReverseV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReverseV2Options.getSizePrefixedRootAsReverseV2Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReverseV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReverseV2Options.startReverseV2Options = function (builder) {
        builder.startObject(0);
    };
    ReverseV2Options.endReverseV2Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ReverseV2Options.createReverseV2Options = function (builder) {
        ReverseV2Options.startReverseV2Options(builder);
        return ReverseV2Options.endReverseV2Options(builder);
    };
    ReverseV2Options.prototype.unpack = function () {
        return new ReverseV2OptionsT();
    };
    ReverseV2Options.prototype.unpackTo = function (_o) { };
    return ReverseV2Options;
}());
exports.ReverseV2Options = ReverseV2Options;
var ReverseV2OptionsT = /** @class */ (function () {
    function ReverseV2OptionsT() {
    }
    ReverseV2OptionsT.prototype.pack = function (builder) {
        return ReverseV2Options.createReverseV2Options(builder);
    };
    return ReverseV2OptionsT;
}());
exports.ReverseV2OptionsT = ReverseV2OptionsT;
var AddNOptions = /** @class */ (function () {
    function AddNOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AddNOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AddNOptions.getRootAsAddNOptions = function (bb, obj) {
        return (obj || new AddNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AddNOptions.getSizePrefixedRootAsAddNOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AddNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AddNOptions.startAddNOptions = function (builder) {
        builder.startObject(0);
    };
    AddNOptions.endAddNOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AddNOptions.createAddNOptions = function (builder) {
        AddNOptions.startAddNOptions(builder);
        return AddNOptions.endAddNOptions(builder);
    };
    AddNOptions.prototype.unpack = function () {
        return new AddNOptionsT();
    };
    AddNOptions.prototype.unpackTo = function (_o) { };
    return AddNOptions;
}());
exports.AddNOptions = AddNOptions;
var AddNOptionsT = /** @class */ (function () {
    function AddNOptionsT() {
    }
    AddNOptionsT.prototype.pack = function (builder) {
        return AddNOptions.createAddNOptions(builder);
    };
    return AddNOptionsT;
}());
exports.AddNOptionsT = AddNOptionsT;
var GatherNdOptions = /** @class */ (function () {
    function GatherNdOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GatherNdOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GatherNdOptions.getRootAsGatherNdOptions = function (bb, obj) {
        return (obj || new GatherNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GatherNdOptions.getSizePrefixedRootAsGatherNdOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GatherNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GatherNdOptions.startGatherNdOptions = function (builder) {
        builder.startObject(0);
    };
    GatherNdOptions.endGatherNdOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GatherNdOptions.createGatherNdOptions = function (builder) {
        GatherNdOptions.startGatherNdOptions(builder);
        return GatherNdOptions.endGatherNdOptions(builder);
    };
    GatherNdOptions.prototype.unpack = function () {
        return new GatherNdOptionsT();
    };
    GatherNdOptions.prototype.unpackTo = function (_o) { };
    return GatherNdOptions;
}());
exports.GatherNdOptions = GatherNdOptions;
var GatherNdOptionsT = /** @class */ (function () {
    function GatherNdOptionsT() {
    }
    GatherNdOptionsT.prototype.pack = function (builder) {
        return GatherNdOptions.createGatherNdOptions(builder);
    };
    return GatherNdOptionsT;
}());
exports.GatherNdOptionsT = GatherNdOptionsT;
var WhereOptions = /** @class */ (function () {
    function WhereOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    WhereOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    WhereOptions.getRootAsWhereOptions = function (bb, obj) {
        return (obj || new WhereOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhereOptions.getSizePrefixedRootAsWhereOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WhereOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhereOptions.startWhereOptions = function (builder) {
        builder.startObject(0);
    };
    WhereOptions.endWhereOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    WhereOptions.createWhereOptions = function (builder) {
        WhereOptions.startWhereOptions(builder);
        return WhereOptions.endWhereOptions(builder);
    };
    WhereOptions.prototype.unpack = function () {
        return new WhereOptionsT();
    };
    WhereOptions.prototype.unpackTo = function (_o) { };
    return WhereOptions;
}());
exports.WhereOptions = WhereOptions;
var WhereOptionsT = /** @class */ (function () {
    function WhereOptionsT() {
    }
    WhereOptionsT.prototype.pack = function (builder) {
        return WhereOptions.createWhereOptions(builder);
    };
    return WhereOptionsT;
}());
exports.WhereOptionsT = WhereOptionsT;
var ReverseSequenceOptions = /** @class */ (function () {
    function ReverseSequenceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ReverseSequenceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ReverseSequenceOptions.getRootAsReverseSequenceOptions = function (bb, obj) {
        return (obj || new ReverseSequenceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReverseSequenceOptions.getSizePrefixedRootAsReverseSequenceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReverseSequenceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReverseSequenceOptions.prototype.seqDim = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ReverseSequenceOptions.prototype.batchDim = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ReverseSequenceOptions.startReverseSequenceOptions = function (builder) {
        builder.startObject(2);
    };
    ReverseSequenceOptions.addSeqDim = function (builder, seqDim) {
        builder.addFieldInt32(0, seqDim, 0);
    };
    ReverseSequenceOptions.addBatchDim = function (builder, batchDim) {
        builder.addFieldInt32(1, batchDim, 0);
    };
    ReverseSequenceOptions.endReverseSequenceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ReverseSequenceOptions.createReverseSequenceOptions = function (builder, seqDim, batchDim) {
        ReverseSequenceOptions.startReverseSequenceOptions(builder);
        ReverseSequenceOptions.addSeqDim(builder, seqDim);
        ReverseSequenceOptions.addBatchDim(builder, batchDim);
        return ReverseSequenceOptions.endReverseSequenceOptions(builder);
    };
    ReverseSequenceOptions.prototype.unpack = function () {
        return new ReverseSequenceOptionsT(this.seqDim(), this.batchDim());
    };
    ReverseSequenceOptions.prototype.unpackTo = function (_o) {
        _o.seqDim = this.seqDim();
        _o.batchDim = this.batchDim();
    };
    return ReverseSequenceOptions;
}());
exports.ReverseSequenceOptions = ReverseSequenceOptions;
var ReverseSequenceOptionsT = /** @class */ (function () {
    function ReverseSequenceOptionsT(seqDim, batchDim) {
        if (seqDim === void 0) { seqDim = 0; }
        if (batchDim === void 0) { batchDim = 0; }
        this.seqDim = seqDim;
        this.batchDim = batchDim;
    }
    ReverseSequenceOptionsT.prototype.pack = function (builder) {
        return ReverseSequenceOptions.createReverseSequenceOptions(builder, this.seqDim, this.batchDim);
    };
    return ReverseSequenceOptionsT;
}());
exports.ReverseSequenceOptionsT = ReverseSequenceOptionsT;
var MatrixDiagOptions = /** @class */ (function () {
    function MatrixDiagOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MatrixDiagOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MatrixDiagOptions.getRootAsMatrixDiagOptions = function (bb, obj) {
        return (obj || new MatrixDiagOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatrixDiagOptions.getSizePrefixedRootAsMatrixDiagOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatrixDiagOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatrixDiagOptions.startMatrixDiagOptions = function (builder) {
        builder.startObject(0);
    };
    MatrixDiagOptions.endMatrixDiagOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MatrixDiagOptions.createMatrixDiagOptions = function (builder) {
        MatrixDiagOptions.startMatrixDiagOptions(builder);
        return MatrixDiagOptions.endMatrixDiagOptions(builder);
    };
    MatrixDiagOptions.prototype.unpack = function () {
        return new MatrixDiagOptionsT();
    };
    MatrixDiagOptions.prototype.unpackTo = function (_o) { };
    return MatrixDiagOptions;
}());
exports.MatrixDiagOptions = MatrixDiagOptions;
var MatrixDiagOptionsT = /** @class */ (function () {
    function MatrixDiagOptionsT() {
    }
    MatrixDiagOptionsT.prototype.pack = function (builder) {
        return MatrixDiagOptions.createMatrixDiagOptions(builder);
    };
    return MatrixDiagOptionsT;
}());
exports.MatrixDiagOptionsT = MatrixDiagOptionsT;
var QuantizeOptions = /** @class */ (function () {
    function QuantizeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    QuantizeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    QuantizeOptions.getRootAsQuantizeOptions = function (bb, obj) {
        return (obj || new QuantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizeOptions.getSizePrefixedRootAsQuantizeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new QuantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizeOptions.startQuantizeOptions = function (builder) {
        builder.startObject(0);
    };
    QuantizeOptions.endQuantizeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    QuantizeOptions.createQuantizeOptions = function (builder) {
        QuantizeOptions.startQuantizeOptions(builder);
        return QuantizeOptions.endQuantizeOptions(builder);
    };
    QuantizeOptions.prototype.unpack = function () {
        return new QuantizeOptionsT();
    };
    QuantizeOptions.prototype.unpackTo = function (_o) { };
    return QuantizeOptions;
}());
exports.QuantizeOptions = QuantizeOptions;
var QuantizeOptionsT = /** @class */ (function () {
    function QuantizeOptionsT() {
    }
    QuantizeOptionsT.prototype.pack = function (builder) {
        return QuantizeOptions.createQuantizeOptions(builder);
    };
    return QuantizeOptionsT;
}());
exports.QuantizeOptionsT = QuantizeOptionsT;
var MatrixSetDiagOptions = /** @class */ (function () {
    function MatrixSetDiagOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MatrixSetDiagOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MatrixSetDiagOptions.getRootAsMatrixSetDiagOptions = function (bb, obj) {
        return (obj || new MatrixSetDiagOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatrixSetDiagOptions.getSizePrefixedRootAsMatrixSetDiagOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatrixSetDiagOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatrixSetDiagOptions.startMatrixSetDiagOptions = function (builder) {
        builder.startObject(0);
    };
    MatrixSetDiagOptions.endMatrixSetDiagOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MatrixSetDiagOptions.createMatrixSetDiagOptions = function (builder) {
        MatrixSetDiagOptions.startMatrixSetDiagOptions(builder);
        return MatrixSetDiagOptions.endMatrixSetDiagOptions(builder);
    };
    MatrixSetDiagOptions.prototype.unpack = function () {
        return new MatrixSetDiagOptionsT();
    };
    MatrixSetDiagOptions.prototype.unpackTo = function (_o) { };
    return MatrixSetDiagOptions;
}());
exports.MatrixSetDiagOptions = MatrixSetDiagOptions;
var MatrixSetDiagOptionsT = /** @class */ (function () {
    function MatrixSetDiagOptionsT() {
    }
    MatrixSetDiagOptionsT.prototype.pack = function (builder) {
        return MatrixSetDiagOptions.createMatrixSetDiagOptions(builder);
    };
    return MatrixSetDiagOptionsT;
}());
exports.MatrixSetDiagOptionsT = MatrixSetDiagOptionsT;
var IfOptions = /** @class */ (function () {
    function IfOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    IfOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    IfOptions.getRootAsIfOptions = function (bb, obj) {
        return (obj || new IfOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    IfOptions.getSizePrefixedRootAsIfOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new IfOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    IfOptions.prototype.thenSubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    IfOptions.prototype.elseSubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    IfOptions.startIfOptions = function (builder) {
        builder.startObject(2);
    };
    IfOptions.addThenSubgraphIndex = function (builder, thenSubgraphIndex) {
        builder.addFieldInt32(0, thenSubgraphIndex, 0);
    };
    IfOptions.addElseSubgraphIndex = function (builder, elseSubgraphIndex) {
        builder.addFieldInt32(1, elseSubgraphIndex, 0);
    };
    IfOptions.endIfOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    IfOptions.createIfOptions = function (builder, thenSubgraphIndex, elseSubgraphIndex) {
        IfOptions.startIfOptions(builder);
        IfOptions.addThenSubgraphIndex(builder, thenSubgraphIndex);
        IfOptions.addElseSubgraphIndex(builder, elseSubgraphIndex);
        return IfOptions.endIfOptions(builder);
    };
    IfOptions.prototype.unpack = function () {
        return new IfOptionsT(this.thenSubgraphIndex(), this.elseSubgraphIndex());
    };
    IfOptions.prototype.unpackTo = function (_o) {
        _o.thenSubgraphIndex = this.thenSubgraphIndex();
        _o.elseSubgraphIndex = this.elseSubgraphIndex();
    };
    return IfOptions;
}());
exports.IfOptions = IfOptions;
var IfOptionsT = /** @class */ (function () {
    function IfOptionsT(thenSubgraphIndex, elseSubgraphIndex) {
        if (thenSubgraphIndex === void 0) { thenSubgraphIndex = 0; }
        if (elseSubgraphIndex === void 0) { elseSubgraphIndex = 0; }
        this.thenSubgraphIndex = thenSubgraphIndex;
        this.elseSubgraphIndex = elseSubgraphIndex;
    }
    IfOptionsT.prototype.pack = function (builder) {
        return IfOptions.createIfOptions(builder, this.thenSubgraphIndex, this.elseSubgraphIndex);
    };
    return IfOptionsT;
}());
exports.IfOptionsT = IfOptionsT;
var CallOnceOptions = /** @class */ (function () {
    function CallOnceOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CallOnceOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CallOnceOptions.getRootAsCallOnceOptions = function (bb, obj) {
        return (obj || new CallOnceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CallOnceOptions.getSizePrefixedRootAsCallOnceOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CallOnceOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CallOnceOptions.prototype.initSubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    CallOnceOptions.startCallOnceOptions = function (builder) {
        builder.startObject(1);
    };
    CallOnceOptions.addInitSubgraphIndex = function (builder, initSubgraphIndex) {
        builder.addFieldInt32(0, initSubgraphIndex, 0);
    };
    CallOnceOptions.endCallOnceOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CallOnceOptions.createCallOnceOptions = function (builder, initSubgraphIndex) {
        CallOnceOptions.startCallOnceOptions(builder);
        CallOnceOptions.addInitSubgraphIndex(builder, initSubgraphIndex);
        return CallOnceOptions.endCallOnceOptions(builder);
    };
    CallOnceOptions.prototype.unpack = function () {
        return new CallOnceOptionsT(this.initSubgraphIndex());
    };
    CallOnceOptions.prototype.unpackTo = function (_o) {
        _o.initSubgraphIndex = this.initSubgraphIndex();
    };
    return CallOnceOptions;
}());
exports.CallOnceOptions = CallOnceOptions;
var CallOnceOptionsT = /** @class */ (function () {
    function CallOnceOptionsT(initSubgraphIndex) {
        if (initSubgraphIndex === void 0) { initSubgraphIndex = 0; }
        this.initSubgraphIndex = initSubgraphIndex;
    }
    CallOnceOptionsT.prototype.pack = function (builder) {
        return CallOnceOptions.createCallOnceOptions(builder, this.initSubgraphIndex);
    };
    return CallOnceOptionsT;
}());
exports.CallOnceOptionsT = CallOnceOptionsT;
var WhileOptions = /** @class */ (function () {
    function WhileOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    WhileOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    WhileOptions.getRootAsWhileOptions = function (bb, obj) {
        return (obj || new WhileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhileOptions.getSizePrefixedRootAsWhileOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WhileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhileOptions.prototype.condSubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WhileOptions.prototype.bodySubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WhileOptions.startWhileOptions = function (builder) {
        builder.startObject(2);
    };
    WhileOptions.addCondSubgraphIndex = function (builder, condSubgraphIndex) {
        builder.addFieldInt32(0, condSubgraphIndex, 0);
    };
    WhileOptions.addBodySubgraphIndex = function (builder, bodySubgraphIndex) {
        builder.addFieldInt32(1, bodySubgraphIndex, 0);
    };
    WhileOptions.endWhileOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    WhileOptions.createWhileOptions = function (builder, condSubgraphIndex, bodySubgraphIndex) {
        WhileOptions.startWhileOptions(builder);
        WhileOptions.addCondSubgraphIndex(builder, condSubgraphIndex);
        WhileOptions.addBodySubgraphIndex(builder, bodySubgraphIndex);
        return WhileOptions.endWhileOptions(builder);
    };
    WhileOptions.prototype.unpack = function () {
        return new WhileOptionsT(this.condSubgraphIndex(), this.bodySubgraphIndex());
    };
    WhileOptions.prototype.unpackTo = function (_o) {
        _o.condSubgraphIndex = this.condSubgraphIndex();
        _o.bodySubgraphIndex = this.bodySubgraphIndex();
    };
    return WhileOptions;
}());
exports.WhileOptions = WhileOptions;
var WhileOptionsT = /** @class */ (function () {
    function WhileOptionsT(condSubgraphIndex, bodySubgraphIndex) {
        if (condSubgraphIndex === void 0) { condSubgraphIndex = 0; }
        if (bodySubgraphIndex === void 0) { bodySubgraphIndex = 0; }
        this.condSubgraphIndex = condSubgraphIndex;
        this.bodySubgraphIndex = bodySubgraphIndex;
    }
    WhileOptionsT.prototype.pack = function (builder) {
        return WhileOptions.createWhileOptions(builder, this.condSubgraphIndex, this.bodySubgraphIndex);
    };
    return WhileOptionsT;
}());
exports.WhileOptionsT = WhileOptionsT;
var NonMaxSuppressionV4Options = /** @class */ (function () {
    function NonMaxSuppressionV4Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    NonMaxSuppressionV4Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    NonMaxSuppressionV4Options.getRootAsNonMaxSuppressionV4Options = function (bb, obj) {
        return (obj || new NonMaxSuppressionV4Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NonMaxSuppressionV4Options.getSizePrefixedRootAsNonMaxSuppressionV4Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NonMaxSuppressionV4Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NonMaxSuppressionV4Options.startNonMaxSuppressionV4Options = function (builder) {
        builder.startObject(0);
    };
    NonMaxSuppressionV4Options.endNonMaxSuppressionV4Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    NonMaxSuppressionV4Options.createNonMaxSuppressionV4Options = function (builder) {
        NonMaxSuppressionV4Options.startNonMaxSuppressionV4Options(builder);
        return NonMaxSuppressionV4Options.endNonMaxSuppressionV4Options(builder);
    };
    NonMaxSuppressionV4Options.prototype.unpack = function () {
        return new NonMaxSuppressionV4OptionsT();
    };
    NonMaxSuppressionV4Options.prototype.unpackTo = function (_o) { };
    return NonMaxSuppressionV4Options;
}());
exports.NonMaxSuppressionV4Options = NonMaxSuppressionV4Options;
var NonMaxSuppressionV4OptionsT = /** @class */ (function () {
    function NonMaxSuppressionV4OptionsT() {
    }
    NonMaxSuppressionV4OptionsT.prototype.pack = function (builder) {
        return NonMaxSuppressionV4Options.createNonMaxSuppressionV4Options(builder);
    };
    return NonMaxSuppressionV4OptionsT;
}());
exports.NonMaxSuppressionV4OptionsT = NonMaxSuppressionV4OptionsT;
var NonMaxSuppressionV5Options = /** @class */ (function () {
    function NonMaxSuppressionV5Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    NonMaxSuppressionV5Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    NonMaxSuppressionV5Options.getRootAsNonMaxSuppressionV5Options = function (bb, obj) {
        return (obj || new NonMaxSuppressionV5Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NonMaxSuppressionV5Options.getSizePrefixedRootAsNonMaxSuppressionV5Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new NonMaxSuppressionV5Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    NonMaxSuppressionV5Options.startNonMaxSuppressionV5Options = function (builder) {
        builder.startObject(0);
    };
    NonMaxSuppressionV5Options.endNonMaxSuppressionV5Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    NonMaxSuppressionV5Options.createNonMaxSuppressionV5Options = function (builder) {
        NonMaxSuppressionV5Options.startNonMaxSuppressionV5Options(builder);
        return NonMaxSuppressionV5Options.endNonMaxSuppressionV5Options(builder);
    };
    NonMaxSuppressionV5Options.prototype.unpack = function () {
        return new NonMaxSuppressionV5OptionsT();
    };
    NonMaxSuppressionV5Options.prototype.unpackTo = function (_o) { };
    return NonMaxSuppressionV5Options;
}());
exports.NonMaxSuppressionV5Options = NonMaxSuppressionV5Options;
var NonMaxSuppressionV5OptionsT = /** @class */ (function () {
    function NonMaxSuppressionV5OptionsT() {
    }
    NonMaxSuppressionV5OptionsT.prototype.pack = function (builder) {
        return NonMaxSuppressionV5Options.createNonMaxSuppressionV5Options(builder);
    };
    return NonMaxSuppressionV5OptionsT;
}());
exports.NonMaxSuppressionV5OptionsT = NonMaxSuppressionV5OptionsT;
var ScatterNdOptions = /** @class */ (function () {
    function ScatterNdOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ScatterNdOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ScatterNdOptions.getRootAsScatterNdOptions = function (bb, obj) {
        return (obj || new ScatterNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ScatterNdOptions.getSizePrefixedRootAsScatterNdOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ScatterNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ScatterNdOptions.startScatterNdOptions = function (builder) {
        builder.startObject(0);
    };
    ScatterNdOptions.endScatterNdOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ScatterNdOptions.createScatterNdOptions = function (builder) {
        ScatterNdOptions.startScatterNdOptions(builder);
        return ScatterNdOptions.endScatterNdOptions(builder);
    };
    ScatterNdOptions.prototype.unpack = function () {
        return new ScatterNdOptionsT();
    };
    ScatterNdOptions.prototype.unpackTo = function (_o) { };
    return ScatterNdOptions;
}());
exports.ScatterNdOptions = ScatterNdOptions;
var ScatterNdOptionsT = /** @class */ (function () {
    function ScatterNdOptionsT() {
    }
    ScatterNdOptionsT.prototype.pack = function (builder) {
        return ScatterNdOptions.createScatterNdOptions(builder);
    };
    return ScatterNdOptionsT;
}());
exports.ScatterNdOptionsT = ScatterNdOptionsT;
var SelectV2Options = /** @class */ (function () {
    function SelectV2Options() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SelectV2Options.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SelectV2Options.getRootAsSelectV2Options = function (bb, obj) {
        return (obj || new SelectV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SelectV2Options.getSizePrefixedRootAsSelectV2Options = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SelectV2Options()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SelectV2Options.startSelectV2Options = function (builder) {
        builder.startObject(0);
    };
    SelectV2Options.endSelectV2Options = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SelectV2Options.createSelectV2Options = function (builder) {
        SelectV2Options.startSelectV2Options(builder);
        return SelectV2Options.endSelectV2Options(builder);
    };
    SelectV2Options.prototype.unpack = function () {
        return new SelectV2OptionsT();
    };
    SelectV2Options.prototype.unpackTo = function (_o) { };
    return SelectV2Options;
}());
exports.SelectV2Options = SelectV2Options;
var SelectV2OptionsT = /** @class */ (function () {
    function SelectV2OptionsT() {
    }
    SelectV2OptionsT.prototype.pack = function (builder) {
        return SelectV2Options.createSelectV2Options(builder);
    };
    return SelectV2OptionsT;
}());
exports.SelectV2OptionsT = SelectV2OptionsT;
var DensifyOptions = /** @class */ (function () {
    function DensifyOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DensifyOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DensifyOptions.getRootAsDensifyOptions = function (bb, obj) {
        return (obj || new DensifyOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DensifyOptions.getSizePrefixedRootAsDensifyOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DensifyOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DensifyOptions.startDensifyOptions = function (builder) {
        builder.startObject(0);
    };
    DensifyOptions.endDensifyOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DensifyOptions.createDensifyOptions = function (builder) {
        DensifyOptions.startDensifyOptions(builder);
        return DensifyOptions.endDensifyOptions(builder);
    };
    DensifyOptions.prototype.unpack = function () {
        return new DensifyOptionsT();
    };
    DensifyOptions.prototype.unpackTo = function (_o) { };
    return DensifyOptions;
}());
exports.DensifyOptions = DensifyOptions;
var DensifyOptionsT = /** @class */ (function () {
    function DensifyOptionsT() {
    }
    DensifyOptionsT.prototype.pack = function (builder) {
        return DensifyOptions.createDensifyOptions(builder);
    };
    return DensifyOptionsT;
}());
exports.DensifyOptionsT = DensifyOptionsT;
var SegmentSumOptions = /** @class */ (function () {
    function SegmentSumOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SegmentSumOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SegmentSumOptions.getRootAsSegmentSumOptions = function (bb, obj) {
        return (obj || new SegmentSumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SegmentSumOptions.getSizePrefixedRootAsSegmentSumOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SegmentSumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SegmentSumOptions.startSegmentSumOptions = function (builder) {
        builder.startObject(0);
    };
    SegmentSumOptions.endSegmentSumOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SegmentSumOptions.createSegmentSumOptions = function (builder) {
        SegmentSumOptions.startSegmentSumOptions(builder);
        return SegmentSumOptions.endSegmentSumOptions(builder);
    };
    SegmentSumOptions.prototype.unpack = function () {
        return new SegmentSumOptionsT();
    };
    SegmentSumOptions.prototype.unpackTo = function (_o) { };
    return SegmentSumOptions;
}());
exports.SegmentSumOptions = SegmentSumOptions;
var SegmentSumOptionsT = /** @class */ (function () {
    function SegmentSumOptionsT() {
    }
    SegmentSumOptionsT.prototype.pack = function (builder) {
        return SegmentSumOptions.createSegmentSumOptions(builder);
    };
    return SegmentSumOptionsT;
}());
exports.SegmentSumOptionsT = SegmentSumOptionsT;
var BatchMatMulOptions = /** @class */ (function () {
    function BatchMatMulOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BatchMatMulOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BatchMatMulOptions.getRootAsBatchMatMulOptions = function (bb, obj) {
        return (obj || new BatchMatMulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BatchMatMulOptions.getSizePrefixedRootAsBatchMatMulOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BatchMatMulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BatchMatMulOptions.prototype.adjointLhs = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BatchMatMulOptions.prototype.adjointRhs = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BatchMatMulOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    BatchMatMulOptions.startBatchMatMulOptions = function (builder) {
        builder.startObject(3);
    };
    BatchMatMulOptions.addAdjointLhs = function (builder, adjointLhs) {
        builder.addFieldInt8(0, +adjointLhs, +false);
    };
    BatchMatMulOptions.addAdjointRhs = function (builder, adjointRhs) {
        builder.addFieldInt8(1, +adjointRhs, +false);
    };
    BatchMatMulOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
    };
    BatchMatMulOptions.endBatchMatMulOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BatchMatMulOptions.createBatchMatMulOptions = function (builder, adjointLhs, adjointRhs, asymmetricQuantizeInputs) {
        BatchMatMulOptions.startBatchMatMulOptions(builder);
        BatchMatMulOptions.addAdjointLhs(builder, adjointLhs);
        BatchMatMulOptions.addAdjointRhs(builder, adjointRhs);
        BatchMatMulOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return BatchMatMulOptions.endBatchMatMulOptions(builder);
    };
    BatchMatMulOptions.prototype.unpack = function () {
        return new BatchMatMulOptionsT(this.adjointLhs(), this.adjointRhs(), this.asymmetricQuantizeInputs());
    };
    BatchMatMulOptions.prototype.unpackTo = function (_o) {
        _o.adjointLhs = this.adjointLhs();
        _o.adjointRhs = this.adjointRhs();
        _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
    };
    return BatchMatMulOptions;
}());
exports.BatchMatMulOptions = BatchMatMulOptions;
var BatchMatMulOptionsT = /** @class */ (function () {
    function BatchMatMulOptionsT(adjointLhs, adjointRhs, asymmetricQuantizeInputs) {
        if (adjointLhs === void 0) { adjointLhs = false; }
        if (adjointRhs === void 0) { adjointRhs = false; }
        if (asymmetricQuantizeInputs === void 0) { asymmetricQuantizeInputs = false; }
        this.adjointLhs = adjointLhs;
        this.adjointRhs = adjointRhs;
        this.asymmetricQuantizeInputs = asymmetricQuantizeInputs;
    }
    BatchMatMulOptionsT.prototype.pack = function (builder) {
        return BatchMatMulOptions.createBatchMatMulOptions(builder, this.adjointLhs, this.adjointRhs, this.asymmetricQuantizeInputs);
    };
    return BatchMatMulOptionsT;
}());
exports.BatchMatMulOptionsT = BatchMatMulOptionsT;
var CumsumOptions = /** @class */ (function () {
    function CumsumOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CumsumOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CumsumOptions.getRootAsCumsumOptions = function (bb, obj) {
        return (obj || new CumsumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CumsumOptions.getSizePrefixedRootAsCumsumOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CumsumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CumsumOptions.prototype.exclusive = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    CumsumOptions.prototype.reverse = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    CumsumOptions.startCumsumOptions = function (builder) {
        builder.startObject(2);
    };
    CumsumOptions.addExclusive = function (builder, exclusive) {
        builder.addFieldInt8(0, +exclusive, +false);
    };
    CumsumOptions.addReverse = function (builder, reverse) {
        builder.addFieldInt8(1, +reverse, +false);
    };
    CumsumOptions.endCumsumOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CumsumOptions.createCumsumOptions = function (builder, exclusive, reverse) {
        CumsumOptions.startCumsumOptions(builder);
        CumsumOptions.addExclusive(builder, exclusive);
        CumsumOptions.addReverse(builder, reverse);
        return CumsumOptions.endCumsumOptions(builder);
    };
    CumsumOptions.prototype.unpack = function () {
        return new CumsumOptionsT(this.exclusive(), this.reverse());
    };
    CumsumOptions.prototype.unpackTo = function (_o) {
        _o.exclusive = this.exclusive();
        _o.reverse = this.reverse();
    };
    return CumsumOptions;
}());
exports.CumsumOptions = CumsumOptions;
var CumsumOptionsT = /** @class */ (function () {
    function CumsumOptionsT(exclusive, reverse) {
        if (exclusive === void 0) { exclusive = false; }
        if (reverse === void 0) { reverse = false; }
        this.exclusive = exclusive;
        this.reverse = reverse;
    }
    CumsumOptionsT.prototype.pack = function (builder) {
        return CumsumOptions.createCumsumOptions(builder, this.exclusive, this.reverse);
    };
    return CumsumOptionsT;
}());
exports.CumsumOptionsT = CumsumOptionsT;
var BroadcastToOptions = /** @class */ (function () {
    function BroadcastToOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BroadcastToOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BroadcastToOptions.getRootAsBroadcastToOptions = function (bb, obj) {
        return (obj || new BroadcastToOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BroadcastToOptions.getSizePrefixedRootAsBroadcastToOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BroadcastToOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BroadcastToOptions.startBroadcastToOptions = function (builder) {
        builder.startObject(0);
    };
    BroadcastToOptions.endBroadcastToOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BroadcastToOptions.createBroadcastToOptions = function (builder) {
        BroadcastToOptions.startBroadcastToOptions(builder);
        return BroadcastToOptions.endBroadcastToOptions(builder);
    };
    BroadcastToOptions.prototype.unpack = function () {
        return new BroadcastToOptionsT();
    };
    BroadcastToOptions.prototype.unpackTo = function (_o) { };
    return BroadcastToOptions;
}());
exports.BroadcastToOptions = BroadcastToOptions;
var BroadcastToOptionsT = /** @class */ (function () {
    function BroadcastToOptionsT() {
    }
    BroadcastToOptionsT.prototype.pack = function (builder) {
        return BroadcastToOptions.createBroadcastToOptions(builder);
    };
    return BroadcastToOptionsT;
}());
exports.BroadcastToOptionsT = BroadcastToOptionsT;
var Rfft2dOptions = /** @class */ (function () {
    function Rfft2dOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Rfft2dOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Rfft2dOptions.getRootAsRfft2dOptions = function (bb, obj) {
        return (obj || new Rfft2dOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Rfft2dOptions.getSizePrefixedRootAsRfft2dOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Rfft2dOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Rfft2dOptions.startRfft2dOptions = function (builder) {
        builder.startObject(0);
    };
    Rfft2dOptions.endRfft2dOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Rfft2dOptions.createRfft2dOptions = function (builder) {
        Rfft2dOptions.startRfft2dOptions(builder);
        return Rfft2dOptions.endRfft2dOptions(builder);
    };
    Rfft2dOptions.prototype.unpack = function () {
        return new Rfft2dOptionsT();
    };
    Rfft2dOptions.prototype.unpackTo = function (_o) { };
    return Rfft2dOptions;
}());
exports.Rfft2dOptions = Rfft2dOptions;
var Rfft2dOptionsT = /** @class */ (function () {
    function Rfft2dOptionsT() {
    }
    Rfft2dOptionsT.prototype.pack = function (builder) {
        return Rfft2dOptions.createRfft2dOptions(builder);
    };
    return Rfft2dOptionsT;
}());
exports.Rfft2dOptionsT = Rfft2dOptionsT;
var HashtableOptions = /** @class */ (function () {
    function HashtableOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    HashtableOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    HashtableOptions.getRootAsHashtableOptions = function (bb, obj) {
        return (obj || new HashtableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableOptions.getSizePrefixedRootAsHashtableOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HashtableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableOptions.prototype.tableId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    HashtableOptions.prototype.keyDtype = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    HashtableOptions.prototype.valueDtype = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
    };
    HashtableOptions.startHashtableOptions = function (builder) {
        builder.startObject(3);
    };
    HashtableOptions.addTableId = function (builder, tableId) {
        builder.addFieldInt32(0, tableId, 0);
    };
    HashtableOptions.addKeyDtype = function (builder, keyDtype) {
        builder.addFieldInt8(1, keyDtype, TensorType.FLOAT32);
    };
    HashtableOptions.addValueDtype = function (builder, valueDtype) {
        builder.addFieldInt8(2, valueDtype, TensorType.FLOAT32);
    };
    HashtableOptions.endHashtableOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    HashtableOptions.createHashtableOptions = function (builder, tableId, keyDtype, valueDtype) {
        HashtableOptions.startHashtableOptions(builder);
        HashtableOptions.addTableId(builder, tableId);
        HashtableOptions.addKeyDtype(builder, keyDtype);
        HashtableOptions.addValueDtype(builder, valueDtype);
        return HashtableOptions.endHashtableOptions(builder);
    };
    HashtableOptions.prototype.unpack = function () {
        return new HashtableOptionsT(this.tableId(), this.keyDtype(), this.valueDtype());
    };
    HashtableOptions.prototype.unpackTo = function (_o) {
        _o.tableId = this.tableId();
        _o.keyDtype = this.keyDtype();
        _o.valueDtype = this.valueDtype();
    };
    return HashtableOptions;
}());
exports.HashtableOptions = HashtableOptions;
var HashtableOptionsT = /** @class */ (function () {
    function HashtableOptionsT(tableId, keyDtype, valueDtype) {
        if (tableId === void 0) { tableId = 0; }
        if (keyDtype === void 0) { keyDtype = TensorType.FLOAT32; }
        if (valueDtype === void 0) { valueDtype = TensorType.FLOAT32; }
        this.tableId = tableId;
        this.keyDtype = keyDtype;
        this.valueDtype = valueDtype;
    }
    HashtableOptionsT.prototype.pack = function (builder) {
        return HashtableOptions.createHashtableOptions(builder, this.tableId, this.keyDtype, this.valueDtype);
    };
    return HashtableOptionsT;
}());
exports.HashtableOptionsT = HashtableOptionsT;
var HashtableFindOptions = /** @class */ (function () {
    function HashtableFindOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    HashtableFindOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    HashtableFindOptions.getRootAsHashtableFindOptions = function (bb, obj) {
        return (obj || new HashtableFindOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableFindOptions.getSizePrefixedRootAsHashtableFindOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HashtableFindOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableFindOptions.startHashtableFindOptions = function (builder) {
        builder.startObject(0);
    };
    HashtableFindOptions.endHashtableFindOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    HashtableFindOptions.createHashtableFindOptions = function (builder) {
        HashtableFindOptions.startHashtableFindOptions(builder);
        return HashtableFindOptions.endHashtableFindOptions(builder);
    };
    HashtableFindOptions.prototype.unpack = function () {
        return new HashtableFindOptionsT();
    };
    HashtableFindOptions.prototype.unpackTo = function (_o) { };
    return HashtableFindOptions;
}());
exports.HashtableFindOptions = HashtableFindOptions;
var HashtableFindOptionsT = /** @class */ (function () {
    function HashtableFindOptionsT() {
    }
    HashtableFindOptionsT.prototype.pack = function (builder) {
        return HashtableFindOptions.createHashtableFindOptions(builder);
    };
    return HashtableFindOptionsT;
}());
exports.HashtableFindOptionsT = HashtableFindOptionsT;
var HashtableImportOptions = /** @class */ (function () {
    function HashtableImportOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    HashtableImportOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    HashtableImportOptions.getRootAsHashtableImportOptions = function (bb, obj) {
        return (obj || new HashtableImportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableImportOptions.getSizePrefixedRootAsHashtableImportOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HashtableImportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableImportOptions.startHashtableImportOptions = function (builder) {
        builder.startObject(0);
    };
    HashtableImportOptions.endHashtableImportOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    HashtableImportOptions.createHashtableImportOptions = function (builder) {
        HashtableImportOptions.startHashtableImportOptions(builder);
        return HashtableImportOptions.endHashtableImportOptions(builder);
    };
    HashtableImportOptions.prototype.unpack = function () {
        return new HashtableImportOptionsT();
    };
    HashtableImportOptions.prototype.unpackTo = function (_o) { };
    return HashtableImportOptions;
}());
exports.HashtableImportOptions = HashtableImportOptions;
var HashtableImportOptionsT = /** @class */ (function () {
    function HashtableImportOptionsT() {
    }
    HashtableImportOptionsT.prototype.pack = function (builder) {
        return HashtableImportOptions.createHashtableImportOptions(builder);
    };
    return HashtableImportOptionsT;
}());
exports.HashtableImportOptionsT = HashtableImportOptionsT;
var HashtableSizeOptions = /** @class */ (function () {
    function HashtableSizeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    HashtableSizeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    HashtableSizeOptions.getRootAsHashtableSizeOptions = function (bb, obj) {
        return (obj || new HashtableSizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableSizeOptions.getSizePrefixedRootAsHashtableSizeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HashtableSizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    HashtableSizeOptions.startHashtableSizeOptions = function (builder) {
        builder.startObject(0);
    };
    HashtableSizeOptions.endHashtableSizeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    HashtableSizeOptions.createHashtableSizeOptions = function (builder) {
        HashtableSizeOptions.startHashtableSizeOptions(builder);
        return HashtableSizeOptions.endHashtableSizeOptions(builder);
    };
    HashtableSizeOptions.prototype.unpack = function () {
        return new HashtableSizeOptionsT();
    };
    HashtableSizeOptions.prototype.unpackTo = function (_o) { };
    return HashtableSizeOptions;
}());
exports.HashtableSizeOptions = HashtableSizeOptions;
var HashtableSizeOptionsT = /** @class */ (function () {
    function HashtableSizeOptionsT() {
    }
    HashtableSizeOptionsT.prototype.pack = function (builder) {
        return HashtableSizeOptions.createHashtableSizeOptions(builder);
    };
    return HashtableSizeOptionsT;
}());
exports.HashtableSizeOptionsT = HashtableSizeOptionsT;
var VarHandleOptions = /** @class */ (function () {
    function VarHandleOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    VarHandleOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    VarHandleOptions.getRootAsVarHandleOptions = function (bb, obj) {
        return (obj || new VarHandleOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VarHandleOptions.getSizePrefixedRootAsVarHandleOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VarHandleOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VarHandleOptions.prototype.container = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    VarHandleOptions.prototype.sharedName = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    VarHandleOptions.startVarHandleOptions = function (builder) {
        builder.startObject(2);
    };
    VarHandleOptions.addContainer = function (builder, containerOffset) {
        builder.addFieldOffset(0, containerOffset, 0);
    };
    VarHandleOptions.addSharedName = function (builder, sharedNameOffset) {
        builder.addFieldOffset(1, sharedNameOffset, 0);
    };
    VarHandleOptions.endVarHandleOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    VarHandleOptions.createVarHandleOptions = function (builder, containerOffset, sharedNameOffset) {
        VarHandleOptions.startVarHandleOptions(builder);
        VarHandleOptions.addContainer(builder, containerOffset);
        VarHandleOptions.addSharedName(builder, sharedNameOffset);
        return VarHandleOptions.endVarHandleOptions(builder);
    };
    VarHandleOptions.prototype.unpack = function () {
        return new VarHandleOptionsT(this.container(), this.sharedName());
    };
    VarHandleOptions.prototype.unpackTo = function (_o) {
        _o.container = this.container();
        _o.sharedName = this.sharedName();
    };
    return VarHandleOptions;
}());
exports.VarHandleOptions = VarHandleOptions;
var VarHandleOptionsT = /** @class */ (function () {
    function VarHandleOptionsT(container, sharedName) {
        if (container === void 0) { container = null; }
        if (sharedName === void 0) { sharedName = null; }
        this.container = container;
        this.sharedName = sharedName;
    }
    VarHandleOptionsT.prototype.pack = function (builder) {
        var container = (this.container !== null ? builder.createString(this.container) : 0);
        var sharedName = (this.sharedName !== null ? builder.createString(this.sharedName) : 0);
        return VarHandleOptions.createVarHandleOptions(builder, container, sharedName);
    };
    return VarHandleOptionsT;
}());
exports.VarHandleOptionsT = VarHandleOptionsT;
var ReadVariableOptions = /** @class */ (function () {
    function ReadVariableOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ReadVariableOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ReadVariableOptions.getRootAsReadVariableOptions = function (bb, obj) {
        return (obj || new ReadVariableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReadVariableOptions.getSizePrefixedRootAsReadVariableOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ReadVariableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ReadVariableOptions.startReadVariableOptions = function (builder) {
        builder.startObject(0);
    };
    ReadVariableOptions.endReadVariableOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ReadVariableOptions.createReadVariableOptions = function (builder) {
        ReadVariableOptions.startReadVariableOptions(builder);
        return ReadVariableOptions.endReadVariableOptions(builder);
    };
    ReadVariableOptions.prototype.unpack = function () {
        return new ReadVariableOptionsT();
    };
    ReadVariableOptions.prototype.unpackTo = function (_o) { };
    return ReadVariableOptions;
}());
exports.ReadVariableOptions = ReadVariableOptions;
var ReadVariableOptionsT = /** @class */ (function () {
    function ReadVariableOptionsT() {
    }
    ReadVariableOptionsT.prototype.pack = function (builder) {
        return ReadVariableOptions.createReadVariableOptions(builder);
    };
    return ReadVariableOptionsT;
}());
exports.ReadVariableOptionsT = ReadVariableOptionsT;
var AssignVariableOptions = /** @class */ (function () {
    function AssignVariableOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AssignVariableOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AssignVariableOptions.getRootAsAssignVariableOptions = function (bb, obj) {
        return (obj || new AssignVariableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AssignVariableOptions.getSizePrefixedRootAsAssignVariableOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AssignVariableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AssignVariableOptions.startAssignVariableOptions = function (builder) {
        builder.startObject(0);
    };
    AssignVariableOptions.endAssignVariableOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AssignVariableOptions.createAssignVariableOptions = function (builder) {
        AssignVariableOptions.startAssignVariableOptions(builder);
        return AssignVariableOptions.endAssignVariableOptions(builder);
    };
    AssignVariableOptions.prototype.unpack = function () {
        return new AssignVariableOptionsT();
    };
    AssignVariableOptions.prototype.unpackTo = function (_o) { };
    return AssignVariableOptions;
}());
exports.AssignVariableOptions = AssignVariableOptions;
var AssignVariableOptionsT = /** @class */ (function () {
    function AssignVariableOptionsT() {
    }
    AssignVariableOptionsT.prototype.pack = function (builder) {
        return AssignVariableOptions.createAssignVariableOptions(builder);
    };
    return AssignVariableOptionsT;
}());
exports.AssignVariableOptionsT = AssignVariableOptionsT;
var RandomOptions = /** @class */ (function () {
    function RandomOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RandomOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RandomOptions.getRootAsRandomOptions = function (bb, obj) {
        return (obj || new RandomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RandomOptions.getSizePrefixedRootAsRandomOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RandomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RandomOptions.prototype.seed = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RandomOptions.prototype.seed2 = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    RandomOptions.startRandomOptions = function (builder) {
        builder.startObject(2);
    };
    RandomOptions.addSeed = function (builder, seed) {
        builder.addFieldInt32(0, seed, 0);
    };
    RandomOptions.addSeed2 = function (builder, seed2) {
        builder.addFieldInt32(1, seed2, 0);
    };
    RandomOptions.endRandomOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RandomOptions.createRandomOptions = function (builder, seed, seed2) {
        RandomOptions.startRandomOptions(builder);
        RandomOptions.addSeed(builder, seed);
        RandomOptions.addSeed2(builder, seed2);
        return RandomOptions.endRandomOptions(builder);
    };
    RandomOptions.prototype.unpack = function () {
        return new RandomOptionsT(this.seed(), this.seed2());
    };
    RandomOptions.prototype.unpackTo = function (_o) {
        _o.seed = this.seed();
        _o.seed2 = this.seed2();
    };
    return RandomOptions;
}());
exports.RandomOptions = RandomOptions;
var RandomOptionsT = /** @class */ (function () {
    function RandomOptionsT(seed, seed2) {
        if (seed === void 0) { seed = 0; }
        if (seed2 === void 0) { seed2 = 0; }
        this.seed = seed;
        this.seed2 = seed2;
    }
    RandomOptionsT.prototype.pack = function (builder) {
        return RandomOptions.createRandomOptions(builder, this.seed, this.seed2);
    };
    return RandomOptionsT;
}());
exports.RandomOptionsT = RandomOptionsT;
var BCQGatherOptions = /** @class */ (function () {
    function BCQGatherOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BCQGatherOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BCQGatherOptions.getRootAsBCQGatherOptions = function (bb, obj) {
        return (obj || new BCQGatherOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BCQGatherOptions.getSizePrefixedRootAsBCQGatherOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BCQGatherOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BCQGatherOptions.prototype.inputHiddenSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    BCQGatherOptions.prototype.axis = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    BCQGatherOptions.startBCQGatherOptions = function (builder) {
        builder.startObject(2);
    };
    BCQGatherOptions.addInputHiddenSize = function (builder, inputHiddenSize) {
        builder.addFieldInt32(0, inputHiddenSize, 0);
    };
    BCQGatherOptions.addAxis = function (builder, axis) {
        builder.addFieldInt32(1, axis, 0);
    };
    BCQGatherOptions.endBCQGatherOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BCQGatherOptions.createBCQGatherOptions = function (builder, inputHiddenSize, axis) {
        BCQGatherOptions.startBCQGatherOptions(builder);
        BCQGatherOptions.addInputHiddenSize(builder, inputHiddenSize);
        BCQGatherOptions.addAxis(builder, axis);
        return BCQGatherOptions.endBCQGatherOptions(builder);
    };
    BCQGatherOptions.prototype.unpack = function () {
        return new BCQGatherOptionsT(this.inputHiddenSize(), this.axis());
    };
    BCQGatherOptions.prototype.unpackTo = function (_o) {
        _o.inputHiddenSize = this.inputHiddenSize();
        _o.axis = this.axis();
    };
    return BCQGatherOptions;
}());
exports.BCQGatherOptions = BCQGatherOptions;
var BCQGatherOptionsT = /** @class */ (function () {
    function BCQGatherOptionsT(inputHiddenSize, axis) {
        if (inputHiddenSize === void 0) { inputHiddenSize = 0; }
        if (axis === void 0) { axis = 0; }
        this.inputHiddenSize = inputHiddenSize;
        this.axis = axis;
    }
    BCQGatherOptionsT.prototype.pack = function (builder) {
        return BCQGatherOptions.createBCQGatherOptions(builder, this.inputHiddenSize, this.axis);
    };
    return BCQGatherOptionsT;
}());
exports.BCQGatherOptionsT = BCQGatherOptionsT;
var BCQFullyConnectedOptions = /** @class */ (function () {
    function BCQFullyConnectedOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BCQFullyConnectedOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BCQFullyConnectedOptions.getRootAsBCQFullyConnectedOptions = function (bb, obj) {
        return (obj || new BCQFullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BCQFullyConnectedOptions.getSizePrefixedRootAsBCQFullyConnectedOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BCQFullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BCQFullyConnectedOptions.prototype.weightsHiddenSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    BCQFullyConnectedOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    BCQFullyConnectedOptions.startBCQFullyConnectedOptions = function (builder) {
        builder.startObject(2);
    };
    BCQFullyConnectedOptions.addWeightsHiddenSize = function (builder, weightsHiddenSize) {
        builder.addFieldInt32(0, weightsHiddenSize, 0);
    };
    BCQFullyConnectedOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    BCQFullyConnectedOptions.endBCQFullyConnectedOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BCQFullyConnectedOptions.createBCQFullyConnectedOptions = function (builder, weightsHiddenSize, fusedActivationFunction) {
        BCQFullyConnectedOptions.startBCQFullyConnectedOptions(builder);
        BCQFullyConnectedOptions.addWeightsHiddenSize(builder, weightsHiddenSize);
        BCQFullyConnectedOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return BCQFullyConnectedOptions.endBCQFullyConnectedOptions(builder);
    };
    BCQFullyConnectedOptions.prototype.unpack = function () {
        return new BCQFullyConnectedOptionsT(this.weightsHiddenSize(), this.fusedActivationFunction());
    };
    BCQFullyConnectedOptions.prototype.unpackTo = function (_o) {
        _o.weightsHiddenSize = this.weightsHiddenSize();
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return BCQFullyConnectedOptions;
}());
exports.BCQFullyConnectedOptions = BCQFullyConnectedOptions;
var BCQFullyConnectedOptionsT = /** @class */ (function () {
    function BCQFullyConnectedOptionsT(weightsHiddenSize, fusedActivationFunction) {
        if (weightsHiddenSize === void 0) { weightsHiddenSize = 0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.weightsHiddenSize = weightsHiddenSize;
        this.fusedActivationFunction = fusedActivationFunction;
    }
    BCQFullyConnectedOptionsT.prototype.pack = function (builder) {
        return BCQFullyConnectedOptions.createBCQFullyConnectedOptions(builder, this.weightsHiddenSize, this.fusedActivationFunction);
    };
    return BCQFullyConnectedOptionsT;
}());
exports.BCQFullyConnectedOptionsT = BCQFullyConnectedOptionsT;
var InstanceNormOptions = /** @class */ (function () {
    function InstanceNormOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    InstanceNormOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    InstanceNormOptions.getRootAsInstanceNormOptions = function (bb, obj) {
        return (obj || new InstanceNormOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    InstanceNormOptions.getSizePrefixedRootAsInstanceNormOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InstanceNormOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    InstanceNormOptions.prototype.epsilon = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    InstanceNormOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
    };
    InstanceNormOptions.startInstanceNormOptions = function (builder) {
        builder.startObject(2);
    };
    InstanceNormOptions.addEpsilon = function (builder, epsilon) {
        builder.addFieldFloat32(0, epsilon, 0.0);
    };
    InstanceNormOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
    };
    InstanceNormOptions.endInstanceNormOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    InstanceNormOptions.createInstanceNormOptions = function (builder, epsilon, fusedActivationFunction) {
        InstanceNormOptions.startInstanceNormOptions(builder);
        InstanceNormOptions.addEpsilon(builder, epsilon);
        InstanceNormOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        return InstanceNormOptions.endInstanceNormOptions(builder);
    };
    InstanceNormOptions.prototype.unpack = function () {
        return new InstanceNormOptionsT(this.epsilon(), this.fusedActivationFunction());
    };
    InstanceNormOptions.prototype.unpackTo = function (_o) {
        _o.epsilon = this.epsilon();
        _o.fusedActivationFunction = this.fusedActivationFunction();
    };
    return InstanceNormOptions;
}());
exports.InstanceNormOptions = InstanceNormOptions;
var InstanceNormOptionsT = /** @class */ (function () {
    function InstanceNormOptionsT(epsilon, fusedActivationFunction) {
        if (epsilon === void 0) { epsilon = 0.0; }
        if (fusedActivationFunction === void 0) { fusedActivationFunction = ActivationFunctionType.NONE; }
        this.epsilon = epsilon;
        this.fusedActivationFunction = fusedActivationFunction;
    }
    InstanceNormOptionsT.prototype.pack = function (builder) {
        return InstanceNormOptions.createInstanceNormOptions(builder, this.epsilon, this.fusedActivationFunction);
    };
    return InstanceNormOptionsT;
}());
exports.InstanceNormOptionsT = InstanceNormOptionsT;
var OperatorCode = /** @class */ (function () {
    function OperatorCode() {
        this.bb = null;
        this.bb_pos = 0;
    }
    OperatorCode.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    OperatorCode.getRootAsOperatorCode = function (bb, obj) {
        return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OperatorCode.getSizePrefixedRootAsOperatorCode = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OperatorCode.prototype.deprecatedBuiltinCode = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    OperatorCode.prototype.customCode = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    OperatorCode.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    OperatorCode.prototype.builtinCode = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : BuiltinOperator.ADD;
    };
    OperatorCode.startOperatorCode = function (builder) {
        builder.startObject(4);
    };
    OperatorCode.addDeprecatedBuiltinCode = function (builder, deprecatedBuiltinCode) {
        builder.addFieldInt8(0, deprecatedBuiltinCode, 0);
    };
    OperatorCode.addCustomCode = function (builder, customCodeOffset) {
        builder.addFieldOffset(1, customCodeOffset, 0);
    };
    OperatorCode.addVersion = function (builder, version) {
        builder.addFieldInt32(2, version, 1);
    };
    OperatorCode.addBuiltinCode = function (builder, builtinCode) {
        builder.addFieldInt32(3, builtinCode, BuiltinOperator.ADD);
    };
    OperatorCode.endOperatorCode = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    OperatorCode.createOperatorCode = function (builder, deprecatedBuiltinCode, customCodeOffset, version, builtinCode) {
        OperatorCode.startOperatorCode(builder);
        OperatorCode.addDeprecatedBuiltinCode(builder, deprecatedBuiltinCode);
        OperatorCode.addCustomCode(builder, customCodeOffset);
        OperatorCode.addVersion(builder, version);
        OperatorCode.addBuiltinCode(builder, builtinCode);
        return OperatorCode.endOperatorCode(builder);
    };
    OperatorCode.prototype.unpack = function () {
        return new OperatorCodeT(this.deprecatedBuiltinCode(), this.customCode(), this.version(), this.builtinCode());
    };
    OperatorCode.prototype.unpackTo = function (_o) {
        _o.deprecatedBuiltinCode = this.deprecatedBuiltinCode();
        _o.customCode = this.customCode();
        _o.version = this.version();
        _o.builtinCode = this.builtinCode();
    };
    return OperatorCode;
}());
exports.OperatorCode = OperatorCode;
var OperatorCodeT = /** @class */ (function () {
    function OperatorCodeT(deprecatedBuiltinCode, customCode, version, builtinCode) {
        if (deprecatedBuiltinCode === void 0) { deprecatedBuiltinCode = 0; }
        if (customCode === void 0) { customCode = null; }
        if (version === void 0) { version = 1; }
        if (builtinCode === void 0) { builtinCode = BuiltinOperator.ADD; }
        this.deprecatedBuiltinCode = deprecatedBuiltinCode;
        this.customCode = customCode;
        this.version = version;
        this.builtinCode = builtinCode;
    }
    OperatorCodeT.prototype.pack = function (builder) {
        var customCode = (this.customCode !== null ? builder.createString(this.customCode) : 0);
        return OperatorCode.createOperatorCode(builder, this.deprecatedBuiltinCode, customCode, this.version, this.builtinCode);
    };
    return OperatorCodeT;
}());
exports.OperatorCodeT = OperatorCodeT;
var Operator = /** @class */ (function () {
    function Operator() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Operator.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Operator.getRootAsOperator = function (bb, obj) {
        return (obj || new Operator()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Operator.getSizePrefixedRootAsOperator = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Operator()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Operator.prototype.opcodeIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Operator.prototype.inputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Operator.prototype.inputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Operator.prototype.inputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Operator.prototype.outputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Operator.prototype.outputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Operator.prototype.outputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Operator.prototype.builtinOptionsType = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : BuiltinOptions.NONE;
    };
    Operator.prototype.builtinOptions = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    Operator.prototype.customOptions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Operator.prototype.customOptionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Operator.prototype.customOptionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Operator.prototype.customOptionsFormat = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : CustomOptionsFormat.FLEXBUFFERS;
    };
    Operator.prototype.mutatingVariableInputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
    };
    Operator.prototype.mutatingVariableInputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Operator.prototype.mutatingVariableInputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Operator.prototype.intermediates = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Operator.prototype.intermediatesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Operator.prototype.intermediatesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Operator.startOperator = function (builder) {
        builder.startObject(9);
    };
    Operator.addOpcodeIndex = function (builder, opcodeIndex) {
        builder.addFieldInt32(0, opcodeIndex, 0);
    };
    Operator.addInputs = function (builder, inputsOffset) {
        builder.addFieldOffset(1, inputsOffset, 0);
    };
    Operator.createInputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Operator.startInputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Operator.addOutputs = function (builder, outputsOffset) {
        builder.addFieldOffset(2, outputsOffset, 0);
    };
    Operator.createOutputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Operator.startOutputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Operator.addBuiltinOptionsType = function (builder, builtinOptionsType) {
        builder.addFieldInt8(3, builtinOptionsType, BuiltinOptions.NONE);
    };
    Operator.addBuiltinOptions = function (builder, builtinOptionsOffset) {
        builder.addFieldOffset(4, builtinOptionsOffset, 0);
    };
    Operator.addCustomOptions = function (builder, customOptionsOffset) {
        builder.addFieldOffset(5, customOptionsOffset, 0);
    };
    Operator.createCustomOptionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Operator.startCustomOptionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Operator.addCustomOptionsFormat = function (builder, customOptionsFormat) {
        builder.addFieldInt8(6, customOptionsFormat, CustomOptionsFormat.FLEXBUFFERS);
    };
    Operator.addMutatingVariableInputs = function (builder, mutatingVariableInputsOffset) {
        builder.addFieldOffset(7, mutatingVariableInputsOffset, 0);
    };
    Operator.createMutatingVariableInputsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(+data[i]);
        }
        return builder.endVector();
    };
    Operator.startMutatingVariableInputsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Operator.addIntermediates = function (builder, intermediatesOffset) {
        builder.addFieldOffset(8, intermediatesOffset, 0);
    };
    Operator.createIntermediatesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Operator.startIntermediatesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Operator.endOperator = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Operator.createOperator = function (builder, opcodeIndex, inputsOffset, outputsOffset, builtinOptionsType, builtinOptionsOffset, customOptionsOffset, customOptionsFormat, mutatingVariableInputsOffset, intermediatesOffset) {
        Operator.startOperator(builder);
        Operator.addOpcodeIndex(builder, opcodeIndex);
        Operator.addInputs(builder, inputsOffset);
        Operator.addOutputs(builder, outputsOffset);
        Operator.addBuiltinOptionsType(builder, builtinOptionsType);
        Operator.addBuiltinOptions(builder, builtinOptionsOffset);
        Operator.addCustomOptions(builder, customOptionsOffset);
        Operator.addCustomOptionsFormat(builder, customOptionsFormat);
        Operator.addMutatingVariableInputs(builder, mutatingVariableInputsOffset);
        Operator.addIntermediates(builder, intermediatesOffset);
        return Operator.endOperator(builder);
    };
    Operator.prototype.unpack = function () {
        var _this = this;
        return new OperatorT(this.opcodeIndex(), this.bb.createScalarList(this.inputs.bind(this), this.inputsLength()), this.bb.createScalarList(this.outputs.bind(this), this.outputsLength()), this.builtinOptionsType(), (function () {
            var temp = unionToBuiltinOptions(_this.builtinOptionsType(), _this.builtinOptions.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.bb.createScalarList(this.customOptions.bind(this), this.customOptionsLength()), this.customOptionsFormat(), this.bb.createScalarList(this.mutatingVariableInputs.bind(this), this.mutatingVariableInputsLength()), this.bb.createScalarList(this.intermediates.bind(this), this.intermediatesLength()));
    };
    Operator.prototype.unpackTo = function (_o) {
        var _this = this;
        _o.opcodeIndex = this.opcodeIndex();
        _o.inputs = this.bb.createScalarList(this.inputs.bind(this), this.inputsLength());
        _o.outputs = this.bb.createScalarList(this.outputs.bind(this), this.outputsLength());
        _o.builtinOptionsType = this.builtinOptionsType();
        _o.builtinOptions = (function () {
            var temp = unionToBuiltinOptions(_this.builtinOptionsType(), _this.builtinOptions.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.customOptions = this.bb.createScalarList(this.customOptions.bind(this), this.customOptionsLength());
        _o.customOptionsFormat = this.customOptionsFormat();
        _o.mutatingVariableInputs = this.bb.createScalarList(this.mutatingVariableInputs.bind(this), this.mutatingVariableInputsLength());
        _o.intermediates = this.bb.createScalarList(this.intermediates.bind(this), this.intermediatesLength());
    };
    return Operator;
}());
exports.Operator = Operator;
var OperatorT = /** @class */ (function () {
    function OperatorT(opcodeIndex, inputs, outputs, builtinOptionsType, builtinOptions, customOptions, customOptionsFormat, mutatingVariableInputs, intermediates) {
        if (opcodeIndex === void 0) { opcodeIndex = 0; }
        if (inputs === void 0) { inputs = []; }
        if (outputs === void 0) { outputs = []; }
        if (builtinOptionsType === void 0) { builtinOptionsType = BuiltinOptions.NONE; }
        if (builtinOptions === void 0) { builtinOptions = null; }
        if (customOptions === void 0) { customOptions = []; }
        if (customOptionsFormat === void 0) { customOptionsFormat = CustomOptionsFormat.FLEXBUFFERS; }
        if (mutatingVariableInputs === void 0) { mutatingVariableInputs = []; }
        if (intermediates === void 0) { intermediates = []; }
        this.opcodeIndex = opcodeIndex;
        this.inputs = inputs;
        this.outputs = outputs;
        this.builtinOptionsType = builtinOptionsType;
        this.builtinOptions = builtinOptions;
        this.customOptions = customOptions;
        this.customOptionsFormat = customOptionsFormat;
        this.mutatingVariableInputs = mutatingVariableInputs;
        this.intermediates = intermediates;
    }
    OperatorT.prototype.pack = function (builder) {
        var inputs = Operator.createInputsVector(builder, this.inputs);
        var outputs = Operator.createOutputsVector(builder, this.outputs);
        var builtinOptions = builder.createObjectOffset(this.builtinOptions);
        var customOptions = Operator.createCustomOptionsVector(builder, this.customOptions);
        var mutatingVariableInputs = Operator.createMutatingVariableInputsVector(builder, this.mutatingVariableInputs);
        var intermediates = Operator.createIntermediatesVector(builder, this.intermediates);
        return Operator.createOperator(builder, this.opcodeIndex, inputs, outputs, this.builtinOptionsType, builtinOptions, customOptions, this.customOptionsFormat, mutatingVariableInputs, intermediates);
    };
    return OperatorT;
}());
exports.OperatorT = OperatorT;
var SubGraph = /** @class */ (function () {
    function SubGraph() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SubGraph.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SubGraph.getRootAsSubGraph = function (bb, obj) {
        return (obj || new SubGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubGraph.getSizePrefixedRootAsSubGraph = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SubGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubGraph.prototype.tensors = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SubGraph.prototype.tensorsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.inputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SubGraph.prototype.inputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.inputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SubGraph.prototype.outputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SubGraph.prototype.outputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.outputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SubGraph.prototype.operators = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new Operator()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SubGraph.prototype.operatorsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    SubGraph.prototype.dataFormat = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : DataFormat.CHANNELS_LAST;
    };
    SubGraph.startSubGraph = function (builder) {
        builder.startObject(6);
    };
    SubGraph.addTensors = function (builder, tensorsOffset) {
        builder.addFieldOffset(0, tensorsOffset, 0);
    };
    SubGraph.createTensorsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startTensorsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addInputs = function (builder, inputsOffset) {
        builder.addFieldOffset(1, inputsOffset, 0);
    };
    SubGraph.createInputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startInputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addOutputs = function (builder, outputsOffset) {
        builder.addFieldOffset(2, outputsOffset, 0);
    };
    SubGraph.createOutputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startOutputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addOperators = function (builder, operatorsOffset) {
        builder.addFieldOffset(3, operatorsOffset, 0);
    };
    SubGraph.createOperatorsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startOperatorsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    SubGraph.addDataFormat = function (builder, dataFormat) {
        builder.addFieldInt8(5, dataFormat, DataFormat.CHANNELS_LAST);
    };
    SubGraph.endSubGraph = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SubGraph.createSubGraph = function (builder, tensorsOffset, inputsOffset, outputsOffset, operatorsOffset, nameOffset, dataFormat) {
        SubGraph.startSubGraph(builder);
        SubGraph.addTensors(builder, tensorsOffset);
        SubGraph.addInputs(builder, inputsOffset);
        SubGraph.addOutputs(builder, outputsOffset);
        SubGraph.addOperators(builder, operatorsOffset);
        SubGraph.addName(builder, nameOffset);
        SubGraph.addDataFormat(builder, dataFormat);
        return SubGraph.endSubGraph(builder);
    };
    SubGraph.prototype.unpack = function () {
        return new SubGraphT(this.bb.createObjList(this.tensors.bind(this), this.tensorsLength()), this.bb.createScalarList(this.inputs.bind(this), this.inputsLength()), this.bb.createScalarList(this.outputs.bind(this), this.outputsLength()), this.bb.createObjList(this.operators.bind(this), this.operatorsLength()), this.name(), this.dataFormat());
    };
    SubGraph.prototype.unpackTo = function (_o) {
        _o.tensors = this.bb.createObjList(this.tensors.bind(this), this.tensorsLength());
        _o.inputs = this.bb.createScalarList(this.inputs.bind(this), this.inputsLength());
        _o.outputs = this.bb.createScalarList(this.outputs.bind(this), this.outputsLength());
        _o.operators = this.bb.createObjList(this.operators.bind(this), this.operatorsLength());
        _o.name = this.name();
        _o.dataFormat = this.dataFormat();
    };
    return SubGraph;
}());
exports.SubGraph = SubGraph;
var SubGraphT = /** @class */ (function () {
    function SubGraphT(tensors, inputs, outputs, operators, name, dataFormat) {
        if (tensors === void 0) { tensors = []; }
        if (inputs === void 0) { inputs = []; }
        if (outputs === void 0) { outputs = []; }
        if (operators === void 0) { operators = []; }
        if (name === void 0) { name = null; }
        if (dataFormat === void 0) { dataFormat = DataFormat.CHANNELS_LAST; }
        this.tensors = tensors;
        this.inputs = inputs;
        this.outputs = outputs;
        this.operators = operators;
        this.name = name;
        this.dataFormat = dataFormat;
    }
    SubGraphT.prototype.pack = function (builder) {
        var tensors = SubGraph.createTensorsVector(builder, builder.createObjectOffsetList(this.tensors));
        var inputs = SubGraph.createInputsVector(builder, this.inputs);
        var outputs = SubGraph.createOutputsVector(builder, this.outputs);
        var operators = SubGraph.createOperatorsVector(builder, builder.createObjectOffsetList(this.operators));
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        return SubGraph.createSubGraph(builder, tensors, inputs, outputs, operators, name, this.dataFormat);
    };
    return SubGraphT;
}());
exports.SubGraphT = SubGraphT;
var Buffer = /** @class */ (function () {
    function Buffer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Buffer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Buffer.getRootAsBuffer = function (bb, obj) {
        return (obj || new Buffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Buffer.getSizePrefixedRootAsBuffer = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Buffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Buffer.prototype.data = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Buffer.prototype.dataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Buffer.prototype.dataArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Buffer.startBuffer = function (builder) {
        builder.startObject(1);
    };
    Buffer.addData = function (builder, dataOffset) {
        builder.addFieldOffset(0, dataOffset, 0);
    };
    Buffer.createDataVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Buffer.startDataVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Buffer.endBuffer = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Buffer.createBuffer = function (builder, dataOffset) {
        Buffer.startBuffer(builder);
        Buffer.addData(builder, dataOffset);
        return Buffer.endBuffer(builder);
    };
    Buffer.prototype.unpack = function () {
        return new BufferT(this.bb.createScalarList(this.data.bind(this), this.dataLength()));
    };
    Buffer.prototype.unpackTo = function (_o) {
        _o.data = this.bb.createScalarList(this.data.bind(this), this.dataLength());
    };
    return Buffer;
}());
exports.Buffer = Buffer;
var BufferT = /** @class */ (function () {
    function BufferT(data) {
        if (data === void 0) { data = []; }
        this.data = data;
    }
    BufferT.prototype.pack = function (builder) {
        var data = Buffer.createDataVector(builder, this.data);
        return Buffer.createBuffer(builder, data);
    };
    return BufferT;
}());
exports.BufferT = BufferT;
var Metadata = /** @class */ (function () {
    function Metadata() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Metadata.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Metadata.getRootAsMetadata = function (bb, obj) {
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Metadata.getSizePrefixedRootAsMetadata = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Metadata.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Metadata.prototype.buffer = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Metadata.startMetadata = function (builder) {
        builder.startObject(2);
    };
    Metadata.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    Metadata.addBuffer = function (builder, buffer) {
        builder.addFieldInt32(1, buffer, 0);
    };
    Metadata.endMetadata = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Metadata.createMetadata = function (builder, nameOffset, buffer) {
        Metadata.startMetadata(builder);
        Metadata.addName(builder, nameOffset);
        Metadata.addBuffer(builder, buffer);
        return Metadata.endMetadata(builder);
    };
    Metadata.prototype.unpack = function () {
        return new MetadataT(this.name(), this.buffer());
    };
    Metadata.prototype.unpackTo = function (_o) {
        _o.name = this.name();
        _o.buffer = this.buffer();
    };
    return Metadata;
}());
exports.Metadata = Metadata;
var MetadataT = /** @class */ (function () {
    function MetadataT(name, buffer) {
        if (name === void 0) { name = null; }
        if (buffer === void 0) { buffer = 0; }
        this.name = name;
        this.buffer = buffer;
    }
    MetadataT.prototype.pack = function (builder) {
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        return Metadata.createMetadata(builder, name, this.buffer);
    };
    return MetadataT;
}());
exports.MetadataT = MetadataT;
var TensorMap = /** @class */ (function () {
    function TensorMap() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TensorMap.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TensorMap.getRootAsTensorMap = function (bb, obj) {
        return (obj || new TensorMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TensorMap.getSizePrefixedRootAsTensorMap = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TensorMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TensorMap.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    TensorMap.prototype.tensorIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    TensorMap.startTensorMap = function (builder) {
        builder.startObject(2);
    };
    TensorMap.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    TensorMap.addTensorIndex = function (builder, tensorIndex) {
        builder.addFieldInt32(1, tensorIndex, 0);
    };
    TensorMap.endTensorMap = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TensorMap.createTensorMap = function (builder, nameOffset, tensorIndex) {
        TensorMap.startTensorMap(builder);
        TensorMap.addName(builder, nameOffset);
        TensorMap.addTensorIndex(builder, tensorIndex);
        return TensorMap.endTensorMap(builder);
    };
    TensorMap.prototype.unpack = function () {
        return new TensorMapT(this.name(), this.tensorIndex());
    };
    TensorMap.prototype.unpackTo = function (_o) {
        _o.name = this.name();
        _o.tensorIndex = this.tensorIndex();
    };
    return TensorMap;
}());
exports.TensorMap = TensorMap;
var TensorMapT = /** @class */ (function () {
    function TensorMapT(name, tensorIndex) {
        if (name === void 0) { name = null; }
        if (tensorIndex === void 0) { tensorIndex = 0; }
        this.name = name;
        this.tensorIndex = tensorIndex;
    }
    TensorMapT.prototype.pack = function (builder) {
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        return TensorMap.createTensorMap(builder, name, this.tensorIndex);
    };
    return TensorMapT;
}());
exports.TensorMapT = TensorMapT;
var SignatureDef = /** @class */ (function () {
    function SignatureDef() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SignatureDef.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SignatureDef.getRootAsSignatureDef = function (bb, obj) {
        return (obj || new SignatureDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SignatureDef.getSizePrefixedRootAsSignatureDef = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SignatureDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SignatureDef.prototype.inputs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new TensorMap()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SignatureDef.prototype.inputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SignatureDef.prototype.outputs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new TensorMap()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SignatureDef.prototype.outputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SignatureDef.prototype.signatureKey = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    SignatureDef.prototype.subgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    SignatureDef.startSignatureDef = function (builder) {
        builder.startObject(5);
    };
    SignatureDef.addInputs = function (builder, inputsOffset) {
        builder.addFieldOffset(0, inputsOffset, 0);
    };
    SignatureDef.createInputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SignatureDef.startInputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SignatureDef.addOutputs = function (builder, outputsOffset) {
        builder.addFieldOffset(1, outputsOffset, 0);
    };
    SignatureDef.createOutputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SignatureDef.startOutputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SignatureDef.addSignatureKey = function (builder, signatureKeyOffset) {
        builder.addFieldOffset(2, signatureKeyOffset, 0);
    };
    SignatureDef.addSubgraphIndex = function (builder, subgraphIndex) {
        builder.addFieldInt32(4, subgraphIndex, 0);
    };
    SignatureDef.endSignatureDef = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SignatureDef.createSignatureDef = function (builder, inputsOffset, outputsOffset, signatureKeyOffset, subgraphIndex) {
        SignatureDef.startSignatureDef(builder);
        SignatureDef.addInputs(builder, inputsOffset);
        SignatureDef.addOutputs(builder, outputsOffset);
        SignatureDef.addSignatureKey(builder, signatureKeyOffset);
        SignatureDef.addSubgraphIndex(builder, subgraphIndex);
        return SignatureDef.endSignatureDef(builder);
    };
    SignatureDef.prototype.unpack = function () {
        return new SignatureDefT(this.bb.createObjList(this.inputs.bind(this), this.inputsLength()), this.bb.createObjList(this.outputs.bind(this), this.outputsLength()), this.signatureKey(), this.subgraphIndex());
    };
    SignatureDef.prototype.unpackTo = function (_o) {
        _o.inputs = this.bb.createObjList(this.inputs.bind(this), this.inputsLength());
        _o.outputs = this.bb.createObjList(this.outputs.bind(this), this.outputsLength());
        _o.signatureKey = this.signatureKey();
        _o.subgraphIndex = this.subgraphIndex();
    };
    return SignatureDef;
}());
exports.SignatureDef = SignatureDef;
var SignatureDefT = /** @class */ (function () {
    function SignatureDefT(inputs, outputs, signatureKey, subgraphIndex) {
        if (inputs === void 0) { inputs = []; }
        if (outputs === void 0) { outputs = []; }
        if (signatureKey === void 0) { signatureKey = null; }
        if (subgraphIndex === void 0) { subgraphIndex = 0; }
        this.inputs = inputs;
        this.outputs = outputs;
        this.signatureKey = signatureKey;
        this.subgraphIndex = subgraphIndex;
    }
    SignatureDefT.prototype.pack = function (builder) {
        var inputs = SignatureDef.createInputsVector(builder, builder.createObjectOffsetList(this.inputs));
        var outputs = SignatureDef.createOutputsVector(builder, builder.createObjectOffsetList(this.outputs));
        var signatureKey = (this.signatureKey !== null ? builder.createString(this.signatureKey) : 0);
        return SignatureDef.createSignatureDef(builder, inputs, outputs, signatureKey, this.subgraphIndex);
    };
    return SignatureDefT;
}());
exports.SignatureDefT = SignatureDefT;
var Model = /** @class */ (function () {
    function Model() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Model.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Model.getRootAsModel = function (bb, obj) {
        return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Model.getSizePrefixedRootAsModel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Model.bufferHasIdentifier = function (bb) {
        return bb.__has_identifier('CIR0');
    };
    Model.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Model.prototype.operatorCodes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new OperatorCode()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.operatorCodesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.subgraphs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new SubGraph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.subgraphsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.description = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Model.prototype.buffers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new Buffer()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.buffersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.metadataBuffer = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Model.prototype.metadataBufferLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.metadataBufferArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Model.prototype.metadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new Metadata()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.metadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.signatureDefs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new SignatureDef()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.signatureDefsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.startModel = function (builder) {
        builder.startObject(8);
    };
    Model.addVersion = function (builder, version) {
        builder.addFieldInt32(0, version, 0);
    };
    Model.addOperatorCodes = function (builder, operatorCodesOffset) {
        builder.addFieldOffset(1, operatorCodesOffset, 0);
    };
    Model.createOperatorCodesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startOperatorCodesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addSubgraphs = function (builder, subgraphsOffset) {
        builder.addFieldOffset(2, subgraphsOffset, 0);
    };
    Model.createSubgraphsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startSubgraphsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addDescription = function (builder, descriptionOffset) {
        builder.addFieldOffset(3, descriptionOffset, 0);
    };
    Model.addBuffers = function (builder, buffersOffset) {
        builder.addFieldOffset(4, buffersOffset, 0);
    };
    Model.createBuffersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startBuffersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addMetadataBuffer = function (builder, metadataBufferOffset) {
        builder.addFieldOffset(5, metadataBufferOffset, 0);
    };
    Model.createMetadataBufferVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Model.startMetadataBufferVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addMetadata = function (builder, metadataOffset) {
        builder.addFieldOffset(6, metadataOffset, 0);
    };
    Model.createMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addSignatureDefs = function (builder, signatureDefsOffset) {
        builder.addFieldOffset(7, signatureDefsOffset, 0);
    };
    Model.createSignatureDefsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startSignatureDefsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.endModel = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Model.finishModelBuffer = function (builder, offset) {
        builder.finish(offset, 'CIR0');
    };
    Model.finishSizePrefixedModelBuffer = function (builder, offset) {
        builder.finish(offset, 'CIR0', true);
    };
    Model.createModel = function (builder, version, operatorCodesOffset, subgraphsOffset, descriptionOffset, buffersOffset, metadataBufferOffset, metadataOffset, signatureDefsOffset) {
        Model.startModel(builder);
        Model.addVersion(builder, version);
        Model.addOperatorCodes(builder, operatorCodesOffset);
        Model.addSubgraphs(builder, subgraphsOffset);
        Model.addDescription(builder, descriptionOffset);
        Model.addBuffers(builder, buffersOffset);
        Model.addMetadataBuffer(builder, metadataBufferOffset);
        Model.addMetadata(builder, metadataOffset);
        Model.addSignatureDefs(builder, signatureDefsOffset);
        return Model.endModel(builder);
    };
    Model.prototype.unpack = function () {
        return new ModelT(this.version(), this.bb.createObjList(this.operatorCodes.bind(this), this.operatorCodesLength()), this.bb.createObjList(this.subgraphs.bind(this), this.subgraphsLength()), this.description(), this.bb.createObjList(this.buffers.bind(this), this.buffersLength()), this.bb.createScalarList(this.metadataBuffer.bind(this), this.metadataBufferLength()), this.bb.createObjList(this.metadata.bind(this), this.metadataLength()), this.bb.createObjList(this.signatureDefs.bind(this), this.signatureDefsLength()));
    };
    Model.prototype.unpackTo = function (_o) {
        _o.version = this.version();
        _o.operatorCodes = this.bb.createObjList(this.operatorCodes.bind(this), this.operatorCodesLength());
        _o.subgraphs = this.bb.createObjList(this.subgraphs.bind(this), this.subgraphsLength());
        _o.description = this.description();
        _o.buffers = this.bb.createObjList(this.buffers.bind(this), this.buffersLength());
        _o.metadataBuffer = this.bb.createScalarList(this.metadataBuffer.bind(this), this.metadataBufferLength());
        _o.metadata = this.bb.createObjList(this.metadata.bind(this), this.metadataLength());
        _o.signatureDefs = this.bb.createObjList(this.signatureDefs.bind(this), this.signatureDefsLength());
    };
    return Model;
}());
exports.Model = Model;
var ModelT = /** @class */ (function () {
    function ModelT(version, operatorCodes, subgraphs, description, buffers, metadataBuffer, metadata, signatureDefs) {
        if (version === void 0) { version = 0; }
        if (operatorCodes === void 0) { operatorCodes = []; }
        if (subgraphs === void 0) { subgraphs = []; }
        if (description === void 0) { description = null; }
        if (buffers === void 0) { buffers = []; }
        if (metadataBuffer === void 0) { metadataBuffer = []; }
        if (metadata === void 0) { metadata = []; }
        if (signatureDefs === void 0) { signatureDefs = []; }
        this.version = version;
        this.operatorCodes = operatorCodes;
        this.subgraphs = subgraphs;
        this.description = description;
        this.buffers = buffers;
        this.metadataBuffer = metadataBuffer;
        this.metadata = metadata;
        this.signatureDefs = signatureDefs;
    }
    ModelT.prototype.pack = function (builder) {
        var operatorCodes = Model.createOperatorCodesVector(builder, builder.createObjectOffsetList(this.operatorCodes));
        var subgraphs = Model.createSubgraphsVector(builder, builder.createObjectOffsetList(this.subgraphs));
        var description = (this.description !== null ? builder.createString(this.description) : 0);
        var buffers = Model.createBuffersVector(builder, builder.createObjectOffsetList(this.buffers));
        var metadataBuffer = Model.createMetadataBufferVector(builder, this.metadataBuffer);
        var metadata = Model.createMetadataVector(builder, builder.createObjectOffsetList(this.metadata));
        var signatureDefs = Model.createSignatureDefsVector(builder, builder.createObjectOffsetList(this.signatureDefs));
        return Model.createModel(builder, this.version, operatorCodes, subgraphs, description, buffers, metadataBuffer, metadata, signatureDefs);
    };
    return ModelT;
}());
exports.ModelT = ModelT;
