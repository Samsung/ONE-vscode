// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class HashtableImportOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HashtableImportOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHashtableImportOptions(bb:flatbuffers.ByteBuffer, obj?:HashtableImportOptions):HashtableImportOptions {
  return (obj || new HashtableImportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHashtableImportOptions(bb:flatbuffers.ByteBuffer, obj?:HashtableImportOptions):HashtableImportOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HashtableImportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startHashtableImportOptions(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endHashtableImportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHashtableImportOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  HashtableImportOptions.startHashtableImportOptions(builder);
  return HashtableImportOptions.endHashtableImportOptions(builder);
}

unpack(): HashtableImportOptionsT {
  return new HashtableImportOptionsT();
}


unpackTo(_o: HashtableImportOptionsT): void {}
}

export class HashtableImportOptionsT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HashtableImportOptions.createHashtableImportOptions(builder);
}
}
