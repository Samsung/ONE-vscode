// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TensorType } from '../circle/tensor-type';


export class ArgMaxOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ArgMaxOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsArgMaxOptions(bb:flatbuffers.ByteBuffer, obj?:ArgMaxOptions):ArgMaxOptions {
  return (obj || new ArgMaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsArgMaxOptions(bb:flatbuffers.ByteBuffer, obj?:ArgMaxOptions):ArgMaxOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ArgMaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

outputType():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
}

static startArgMaxOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addOutputType(builder:flatbuffers.Builder, outputType:TensorType) {
  builder.addFieldInt8(0, outputType, TensorType.FLOAT32);
}

static endArgMaxOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createArgMaxOptions(builder:flatbuffers.Builder, outputType:TensorType):flatbuffers.Offset {
  ArgMaxOptions.startArgMaxOptions(builder);
  ArgMaxOptions.addOutputType(builder, outputType);
  return ArgMaxOptions.endArgMaxOptions(builder);
}

unpack(): ArgMaxOptionsT {
  return new ArgMaxOptionsT(
    this.outputType()
  );
}


unpackTo(_o: ArgMaxOptionsT): void {
  _o.outputType = this.outputType();
}
}

export class ArgMaxOptionsT {
constructor(
  public outputType: TensorType = TensorType.FLOAT32
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ArgMaxOptions.createArgMaxOptions(builder,
    this.outputType
  );
}
}
