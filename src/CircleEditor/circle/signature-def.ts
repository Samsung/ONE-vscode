// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TensorMap, TensorMapT } from '../circle/tensor-map';


export class SignatureDef {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignatureDef {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignatureDef(bb:flatbuffers.ByteBuffer, obj?:SignatureDef):SignatureDef {
  return (obj || new SignatureDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignatureDef(bb:flatbuffers.ByteBuffer, obj?:SignatureDef):SignatureDef {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignatureDef()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

inputs(index: number, obj?:TensorMap):TensorMap|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TensorMap()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputs(index: number, obj?:TensorMap):TensorMap|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TensorMap()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

outputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signatureKey():string|null
signatureKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
signatureKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subgraphIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSignatureDef(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputs(builder:flatbuffers.Builder, outputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, outputsOffset, 0);
}

static createOutputsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOutputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSignatureKey(builder:flatbuffers.Builder, signatureKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, signatureKeyOffset, 0);
}

static addSubgraphIndex(builder:flatbuffers.Builder, subgraphIndex:number) {
  builder.addFieldInt32(4, subgraphIndex, 0);
}

static endSignatureDef(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSignatureDef(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset, outputsOffset:flatbuffers.Offset, signatureKeyOffset:flatbuffers.Offset, subgraphIndex:number):flatbuffers.Offset {
  SignatureDef.startSignatureDef(builder);
  SignatureDef.addInputs(builder, inputsOffset);
  SignatureDef.addOutputs(builder, outputsOffset);
  SignatureDef.addSignatureKey(builder, signatureKeyOffset);
  SignatureDef.addSubgraphIndex(builder, subgraphIndex);
  return SignatureDef.endSignatureDef(builder);
}

unpack(): SignatureDefT {
  return new SignatureDefT(
    this.bb!.createObjList(this.inputs.bind(this), this.inputsLength()),
    this.bb!.createObjList(this.outputs.bind(this), this.outputsLength()),
    this.signatureKey(),
    this.subgraphIndex()
  );
}


unpackTo(_o: SignatureDefT): void {
  _o.inputs = this.bb!.createObjList(this.inputs.bind(this), this.inputsLength());
  _o.outputs = this.bb!.createObjList(this.outputs.bind(this), this.outputsLength());
  _o.signatureKey = this.signatureKey();
  _o.subgraphIndex = this.subgraphIndex();
}
}

export class SignatureDefT {
constructor(
  public inputs: (TensorMapT)[] = [],
  public outputs: (TensorMapT)[] = [],
  public signatureKey: string|Uint8Array|null = null,
  public subgraphIndex: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const inputs = SignatureDef.createInputsVector(builder, builder.createObjectOffsetList(this.inputs));
  const outputs = SignatureDef.createOutputsVector(builder, builder.createObjectOffsetList(this.outputs));
  const signatureKey = (this.signatureKey !== null ? builder.createString(this.signatureKey!) : 0);

  return SignatureDef.createSignatureDef(builder,
    inputs,
    outputs,
    signatureKey,
    this.subgraphIndex
  );
}
}
