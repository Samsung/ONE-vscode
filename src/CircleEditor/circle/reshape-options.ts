// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ReshapeOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReshapeOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReshapeOptions(bb:flatbuffers.ByteBuffer, obj?:ReshapeOptions):ReshapeOptions {
  return (obj || new ReshapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReshapeOptions(bb:flatbuffers.ByteBuffer, obj?:ReshapeOptions):ReshapeOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReshapeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

newShape(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

newShapeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

newShapeArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startReshapeOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNewShape(builder:flatbuffers.Builder, newShapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, newShapeOffset, 0);
}

static createNewShapeVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createNewShapeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createNewShapeVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startNewShapeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endReshapeOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReshapeOptions(builder:flatbuffers.Builder, newShapeOffset:flatbuffers.Offset):flatbuffers.Offset {
  ReshapeOptions.startReshapeOptions(builder);
  ReshapeOptions.addNewShape(builder, newShapeOffset);
  return ReshapeOptions.endReshapeOptions(builder);
}

unpack(): ReshapeOptionsT {
  return new ReshapeOptionsT(
    this.bb!.createScalarList(this.newShape.bind(this), this.newShapeLength())
  );
}


unpackTo(_o: ReshapeOptionsT): void {
  _o.newShape = this.bb!.createScalarList(this.newShape.bind(this), this.newShapeLength());
}
}

export class ReshapeOptionsT {
constructor(
  public newShape: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const newShape = ReshapeOptions.createNewShapeVector(builder, this.newShape);

  return ReshapeOptions.createReshapeOptions(builder,
    newShape
  );
}
}
