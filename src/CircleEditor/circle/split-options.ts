// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SplitOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SplitOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSplitOptions(bb:flatbuffers.ByteBuffer, obj?:SplitOptions):SplitOptions {
  return (obj || new SplitOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSplitOptions(bb:flatbuffers.ByteBuffer, obj?:SplitOptions):SplitOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SplitOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

numSplits():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startSplitOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addNumSplits(builder:flatbuffers.Builder, numSplits:number) {
  builder.addFieldInt32(0, numSplits, 0);
}

static endSplitOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSplitOptions(builder:flatbuffers.Builder, numSplits:number):flatbuffers.Offset {
  SplitOptions.startSplitOptions(builder);
  SplitOptions.addNumSplits(builder, numSplits);
  return SplitOptions.endSplitOptions(builder);
}

unpack(): SplitOptionsT {
  return new SplitOptionsT(
    this.numSplits()
  );
}


unpackTo(_o: SplitOptionsT): void {
  _o.numSplits = this.numSplits();
}
}

export class SplitOptionsT {
constructor(
  public numSplits: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SplitOptions.createSplitOptions(builder,
    this.numSplits
  );
}
}
