// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ActivationFunctionType } from '../circle/activation-function-type';
import { FullyConnectedOptionsWeightsFormat } from '../circle/fully-connected-options-weights-format';


export class FullyConnectedOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FullyConnectedOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFullyConnectedOptions(bb:flatbuffers.ByteBuffer, obj?:FullyConnectedOptions):FullyConnectedOptions {
  return (obj || new FullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFullyConnectedOptions(bb:flatbuffers.ByteBuffer, obj?:FullyConnectedOptions):FullyConnectedOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FullyConnectedOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fusedActivationFunction():ActivationFunctionType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
}

weightsFormat():FullyConnectedOptionsWeightsFormat {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FullyConnectedOptionsWeightsFormat.DEFAULT;
}

keepNumDims():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

asymmetricQuantizeInputs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startFullyConnectedOptions(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addFusedActivationFunction(builder:flatbuffers.Builder, fusedActivationFunction:ActivationFunctionType) {
  builder.addFieldInt8(0, fusedActivationFunction, ActivationFunctionType.NONE);
}

static addWeightsFormat(builder:flatbuffers.Builder, weightsFormat:FullyConnectedOptionsWeightsFormat) {
  builder.addFieldInt8(1, weightsFormat, FullyConnectedOptionsWeightsFormat.DEFAULT);
}

static addKeepNumDims(builder:flatbuffers.Builder, keepNumDims:boolean) {
  builder.addFieldInt8(2, +keepNumDims, +false);
}

static addAsymmetricQuantizeInputs(builder:flatbuffers.Builder, asymmetricQuantizeInputs:boolean) {
  builder.addFieldInt8(3, +asymmetricQuantizeInputs, +false);
}

static endFullyConnectedOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFullyConnectedOptions(builder:flatbuffers.Builder, fusedActivationFunction:ActivationFunctionType, weightsFormat:FullyConnectedOptionsWeightsFormat, keepNumDims:boolean, asymmetricQuantizeInputs:boolean):flatbuffers.Offset {
  FullyConnectedOptions.startFullyConnectedOptions(builder);
  FullyConnectedOptions.addFusedActivationFunction(builder, fusedActivationFunction);
  FullyConnectedOptions.addWeightsFormat(builder, weightsFormat);
  FullyConnectedOptions.addKeepNumDims(builder, keepNumDims);
  FullyConnectedOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
  return FullyConnectedOptions.endFullyConnectedOptions(builder);
}

unpack(): FullyConnectedOptionsT {
  return new FullyConnectedOptionsT(
    this.fusedActivationFunction(),
    this.weightsFormat(),
    this.keepNumDims(),
    this.asymmetricQuantizeInputs()
  );
}


unpackTo(_o: FullyConnectedOptionsT): void {
  _o.fusedActivationFunction = this.fusedActivationFunction();
  _o.weightsFormat = this.weightsFormat();
  _o.keepNumDims = this.keepNumDims();
  _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
}
}

export class FullyConnectedOptionsT {
constructor(
  public fusedActivationFunction: ActivationFunctionType = ActivationFunctionType.NONE,
  public weightsFormat: FullyConnectedOptionsWeightsFormat = FullyConnectedOptionsWeightsFormat.DEFAULT,
  public keepNumDims: boolean = false,
  public asymmetricQuantizeInputs: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FullyConnectedOptions.createFullyConnectedOptions(builder,
    this.fusedActivationFunction,
    this.weightsFormat,
    this.keepNumDims,
    this.asymmetricQuantizeInputs
  );
}
}
