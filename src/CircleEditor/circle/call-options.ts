// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CallOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CallOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCallOptions(bb:flatbuffers.ByteBuffer, obj?:CallOptions):CallOptions {
  return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCallOptions(bb:flatbuffers.ByteBuffer, obj?:CallOptions):CallOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CallOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

subgraph():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startCallOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSubgraph(builder:flatbuffers.Builder, subgraph:number) {
  builder.addFieldInt32(0, subgraph, 0);
}

static endCallOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCallOptions(builder:flatbuffers.Builder, subgraph:number):flatbuffers.Offset {
  CallOptions.startCallOptions(builder);
  CallOptions.addSubgraph(builder, subgraph);
  return CallOptions.endCallOptions(builder);
}

unpack(): CallOptionsT {
  return new CallOptionsT(
    this.subgraph()
  );
}


unpackTo(_o: CallOptionsT): void {
  _o.subgraph = this.subgraph();
}
}

export class CallOptionsT {
constructor(
  public subgraph: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CallOptions.createCallOptions(builder,
    this.subgraph
  );
}
}
