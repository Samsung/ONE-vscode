// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Uint8Vector {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Uint8Vector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUint8Vector(bb:flatbuffers.ByteBuffer, obj?:Uint8Vector):Uint8Vector {
  return (obj || new Uint8Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUint8Vector(bb:flatbuffers.ByteBuffer, obj?:Uint8Vector):Uint8Vector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Uint8Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

values(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valuesArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startUint8Vector(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endUint8Vector(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUint8Vector(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Uint8Vector.startUint8Vector(builder);
  Uint8Vector.addValues(builder, valuesOffset);
  return Uint8Vector.endUint8Vector(builder);
}

unpack(): Uint8VectorT {
  return new Uint8VectorT(
    this.bb!.createScalarList(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: Uint8VectorT): void {
  _o.values = this.bb!.createScalarList(this.values.bind(this), this.valuesLength());
}
}

export class Uint8VectorT {
constructor(
  public values: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const values = Uint8Vector.createValuesVector(builder, this.values);

  return Uint8Vector.createUint8Vector(builder,
    values
  );
}
}
