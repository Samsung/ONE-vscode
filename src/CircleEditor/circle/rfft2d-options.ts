// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Rfft2dOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Rfft2dOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRfft2dOptions(bb:flatbuffers.ByteBuffer, obj?:Rfft2dOptions):Rfft2dOptions {
  return (obj || new Rfft2dOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRfft2dOptions(bb:flatbuffers.ByteBuffer, obj?:Rfft2dOptions):Rfft2dOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Rfft2dOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startRfft2dOptions(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endRfft2dOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRfft2dOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  Rfft2dOptions.startRfft2dOptions(builder);
  return Rfft2dOptions.endRfft2dOptions(builder);
}

unpack(): Rfft2dOptionsT {
  return new Rfft2dOptionsT();
}


unpackTo(_o: Rfft2dOptionsT): void {}
}

export class Rfft2dOptionsT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Rfft2dOptions.createRfft2dOptions(builder);
}
}
