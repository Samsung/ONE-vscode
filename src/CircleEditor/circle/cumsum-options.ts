// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CumsumOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CumsumOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCumsumOptions(bb:flatbuffers.ByteBuffer, obj?:CumsumOptions):CumsumOptions {
  return (obj || new CumsumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCumsumOptions(bb:flatbuffers.ByteBuffer, obj?:CumsumOptions):CumsumOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CumsumOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

exclusive():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

reverse():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startCumsumOptions(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addExclusive(builder:flatbuffers.Builder, exclusive:boolean) {
  builder.addFieldInt8(0, +exclusive, +false);
}

static addReverse(builder:flatbuffers.Builder, reverse:boolean) {
  builder.addFieldInt8(1, +reverse, +false);
}

static endCumsumOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCumsumOptions(builder:flatbuffers.Builder, exclusive:boolean, reverse:boolean):flatbuffers.Offset {
  CumsumOptions.startCumsumOptions(builder);
  CumsumOptions.addExclusive(builder, exclusive);
  CumsumOptions.addReverse(builder, reverse);
  return CumsumOptions.endCumsumOptions(builder);
}

unpack(): CumsumOptionsT {
  return new CumsumOptionsT(
    this.exclusive(),
    this.reverse()
  );
}


unpackTo(_o: CumsumOptionsT): void {
  _o.exclusive = this.exclusive();
  _o.reverse = this.reverse();
}
}

export class CumsumOptionsT {
constructor(
  public exclusive: boolean = false,
  public reverse: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CumsumOptions.createCumsumOptions(builder,
    this.exclusive,
    this.reverse
  );
}
}
