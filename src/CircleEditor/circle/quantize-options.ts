// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class QuantizeOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):QuantizeOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsQuantizeOptions(bb:flatbuffers.ByteBuffer, obj?:QuantizeOptions):QuantizeOptions {
  return (obj || new QuantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsQuantizeOptions(bb:flatbuffers.ByteBuffer, obj?:QuantizeOptions):QuantizeOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuantizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startQuantizeOptions(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endQuantizeOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createQuantizeOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  QuantizeOptions.startQuantizeOptions(builder);
  return QuantizeOptions.endQuantizeOptions(builder);
}

unpack(): QuantizeOptionsT {
  return new QuantizeOptionsT();
}


unpackTo(_o: QuantizeOptionsT): void {}
}

export class QuantizeOptionsT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return QuantizeOptions.createQuantizeOptions(builder);
}
}
