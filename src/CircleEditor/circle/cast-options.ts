// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TensorType } from '../circle/tensor-type';


export class CastOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CastOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCastOptions(bb:flatbuffers.ByteBuffer, obj?:CastOptions):CastOptions {
  return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCastOptions(bb:flatbuffers.ByteBuffer, obj?:CastOptions):CastOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

inDataType():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
}

outDataType():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
}

static startCastOptions(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInDataType(builder:flatbuffers.Builder, inDataType:TensorType) {
  builder.addFieldInt8(0, inDataType, TensorType.FLOAT32);
}

static addOutDataType(builder:flatbuffers.Builder, outDataType:TensorType) {
  builder.addFieldInt8(1, outDataType, TensorType.FLOAT32);
}

static endCastOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCastOptions(builder:flatbuffers.Builder, inDataType:TensorType, outDataType:TensorType):flatbuffers.Offset {
  CastOptions.startCastOptions(builder);
  CastOptions.addInDataType(builder, inDataType);
  CastOptions.addOutDataType(builder, outDataType);
  return CastOptions.endCastOptions(builder);
}

unpack(): CastOptionsT {
  return new CastOptionsT(
    this.inDataType(),
    this.outDataType()
  );
}


unpackTo(_o: CastOptionsT): void {
  _o.inDataType = this.inDataType();
  _o.outDataType = this.outDataType();
}
}

export class CastOptionsT {
constructor(
  public inDataType: TensorType = TensorType.FLOAT32,
  public outDataType: TensorType = TensorType.FLOAT32
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CastOptions.createCastOptions(builder,
    this.inDataType,
    this.outDataType
  );
}
}
