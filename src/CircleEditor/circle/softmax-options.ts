// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SoftmaxOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SoftmaxOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSoftmaxOptions(bb:flatbuffers.ByteBuffer, obj?:SoftmaxOptions):SoftmaxOptions {
  return (obj || new SoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSoftmaxOptions(bb:flatbuffers.ByteBuffer, obj?:SoftmaxOptions):SoftmaxOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SoftmaxOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

beta():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSoftmaxOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBeta(builder:flatbuffers.Builder, beta:number) {
  builder.addFieldFloat32(0, beta, 0.0);
}

static endSoftmaxOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSoftmaxOptions(builder:flatbuffers.Builder, beta:number):flatbuffers.Offset {
  SoftmaxOptions.startSoftmaxOptions(builder);
  SoftmaxOptions.addBeta(builder, beta);
  return SoftmaxOptions.endSoftmaxOptions(builder);
}

unpack(): SoftmaxOptionsT {
  return new SoftmaxOptionsT(
    this.beta()
  );
}


unpackTo(_o: SoftmaxOptionsT): void {
  _o.beta = this.beta();
}
}

export class SoftmaxOptionsT {
constructor(
  public beta: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SoftmaxOptions.createSoftmaxOptions(builder,
    this.beta
  );
}
}
