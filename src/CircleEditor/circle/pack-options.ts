// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class PackOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PackOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPackOptions(bb:flatbuffers.ByteBuffer, obj?:PackOptions):PackOptions {
  return (obj || new PackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPackOptions(bb:flatbuffers.ByteBuffer, obj?:PackOptions):PackOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PackOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

valuesCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

axis():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPackOptions(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValuesCount(builder:flatbuffers.Builder, valuesCount:number) {
  builder.addFieldInt32(0, valuesCount, 0);
}

static addAxis(builder:flatbuffers.Builder, axis:number) {
  builder.addFieldInt32(1, axis, 0);
}

static endPackOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPackOptions(builder:flatbuffers.Builder, valuesCount:number, axis:number):flatbuffers.Offset {
  PackOptions.startPackOptions(builder);
  PackOptions.addValuesCount(builder, valuesCount);
  PackOptions.addAxis(builder, axis);
  return PackOptions.endPackOptions(builder);
}

unpack(): PackOptionsT {
  return new PackOptionsT(
    this.valuesCount(),
    this.axis()
  );
}


unpackTo(_o: PackOptionsT): void {
  _o.valuesCount = this.valuesCount();
  _o.axis = this.axis();
}
}

export class PackOptionsT {
constructor(
  public valuesCount: number = 0,
  public axis: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PackOptions.createPackOptions(builder,
    this.valuesCount,
    this.axis
  );
}
}
