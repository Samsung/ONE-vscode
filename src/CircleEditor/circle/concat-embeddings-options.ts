// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ConcatEmbeddingsOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConcatEmbeddingsOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConcatEmbeddingsOptions(bb:flatbuffers.ByteBuffer, obj?:ConcatEmbeddingsOptions):ConcatEmbeddingsOptions {
  return (obj || new ConcatEmbeddingsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConcatEmbeddingsOptions(bb:flatbuffers.ByteBuffer, obj?:ConcatEmbeddingsOptions):ConcatEmbeddingsOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConcatEmbeddingsOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

numChannels():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

numColumnsPerChannel(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

numColumnsPerChannelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

numColumnsPerChannelArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

embeddingDimPerChannel(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

embeddingDimPerChannelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

embeddingDimPerChannelArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startConcatEmbeddingsOptions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNumChannels(builder:flatbuffers.Builder, numChannels:number) {
  builder.addFieldInt32(0, numChannels, 0);
}

static addNumColumnsPerChannel(builder:flatbuffers.Builder, numColumnsPerChannelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, numColumnsPerChannelOffset, 0);
}

static createNumColumnsPerChannelVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createNumColumnsPerChannelVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createNumColumnsPerChannelVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startNumColumnsPerChannelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEmbeddingDimPerChannel(builder:flatbuffers.Builder, embeddingDimPerChannelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, embeddingDimPerChannelOffset, 0);
}

static createEmbeddingDimPerChannelVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createEmbeddingDimPerChannelVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createEmbeddingDimPerChannelVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startEmbeddingDimPerChannelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endConcatEmbeddingsOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConcatEmbeddingsOptions(builder:flatbuffers.Builder, numChannels:number, numColumnsPerChannelOffset:flatbuffers.Offset, embeddingDimPerChannelOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConcatEmbeddingsOptions.startConcatEmbeddingsOptions(builder);
  ConcatEmbeddingsOptions.addNumChannels(builder, numChannels);
  ConcatEmbeddingsOptions.addNumColumnsPerChannel(builder, numColumnsPerChannelOffset);
  ConcatEmbeddingsOptions.addEmbeddingDimPerChannel(builder, embeddingDimPerChannelOffset);
  return ConcatEmbeddingsOptions.endConcatEmbeddingsOptions(builder);
}

unpack(): ConcatEmbeddingsOptionsT {
  return new ConcatEmbeddingsOptionsT(
    this.numChannels(),
    this.bb!.createScalarList(this.numColumnsPerChannel.bind(this), this.numColumnsPerChannelLength()),
    this.bb!.createScalarList(this.embeddingDimPerChannel.bind(this), this.embeddingDimPerChannelLength())
  );
}


unpackTo(_o: ConcatEmbeddingsOptionsT): void {
  _o.numChannels = this.numChannels();
  _o.numColumnsPerChannel = this.bb!.createScalarList(this.numColumnsPerChannel.bind(this), this.numColumnsPerChannelLength());
  _o.embeddingDimPerChannel = this.bb!.createScalarList(this.embeddingDimPerChannel.bind(this), this.embeddingDimPerChannelLength());
}
}

export class ConcatEmbeddingsOptionsT {
constructor(
  public numChannels: number = 0,
  public numColumnsPerChannel: (number)[] = [],
  public embeddingDimPerChannel: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const numColumnsPerChannel = ConcatEmbeddingsOptions.createNumColumnsPerChannelVector(builder, this.numColumnsPerChannel);
  const embeddingDimPerChannel = ConcatEmbeddingsOptions.createEmbeddingDimPerChannelVector(builder, this.embeddingDimPerChannel);

  return ConcatEmbeddingsOptions.createConcatEmbeddingsOptions(builder,
    this.numChannels,
    numColumnsPerChannel,
    embeddingDimPerChannel
  );
}
}
