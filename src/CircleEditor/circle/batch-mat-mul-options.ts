// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class BatchMatMulOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BatchMatMulOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBatchMatMulOptions(bb:flatbuffers.ByteBuffer, obj?:BatchMatMulOptions):BatchMatMulOptions {
  return (obj || new BatchMatMulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBatchMatMulOptions(bb:flatbuffers.ByteBuffer, obj?:BatchMatMulOptions):BatchMatMulOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BatchMatMulOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

adjointLhs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

adjointRhs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

asymmetricQuantizeInputs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startBatchMatMulOptions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAdjointLhs(builder:flatbuffers.Builder, adjointLhs:boolean) {
  builder.addFieldInt8(0, +adjointLhs, +false);
}

static addAdjointRhs(builder:flatbuffers.Builder, adjointRhs:boolean) {
  builder.addFieldInt8(1, +adjointRhs, +false);
}

static addAsymmetricQuantizeInputs(builder:flatbuffers.Builder, asymmetricQuantizeInputs:boolean) {
  builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
}

static endBatchMatMulOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBatchMatMulOptions(builder:flatbuffers.Builder, adjointLhs:boolean, adjointRhs:boolean, asymmetricQuantizeInputs:boolean):flatbuffers.Offset {
  BatchMatMulOptions.startBatchMatMulOptions(builder);
  BatchMatMulOptions.addAdjointLhs(builder, adjointLhs);
  BatchMatMulOptions.addAdjointRhs(builder, adjointRhs);
  BatchMatMulOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
  return BatchMatMulOptions.endBatchMatMulOptions(builder);
}

unpack(): BatchMatMulOptionsT {
  return new BatchMatMulOptionsT(
    this.adjointLhs(),
    this.adjointRhs(),
    this.asymmetricQuantizeInputs()
  );
}


unpackTo(_o: BatchMatMulOptionsT): void {
  _o.adjointLhs = this.adjointLhs();
  _o.adjointRhs = this.adjointRhs();
  _o.asymmetricQuantizeInputs = this.asymmetricQuantizeInputs();
}
}

export class BatchMatMulOptionsT {
constructor(
  public adjointLhs: boolean = false,
  public adjointRhs: boolean = false,
  public asymmetricQuantizeInputs: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return BatchMatMulOptions.createBatchMatMulOptions(builder,
    this.adjointLhs,
    this.adjointRhs,
    this.asymmetricQuantizeInputs
  );
}
}
