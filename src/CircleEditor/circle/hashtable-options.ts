// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TensorType } from '../circle/tensor-type';


export class HashtableOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HashtableOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHashtableOptions(bb:flatbuffers.ByteBuffer, obj?:HashtableOptions):HashtableOptions {
  return (obj || new HashtableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHashtableOptions(bb:flatbuffers.ByteBuffer, obj?:HashtableOptions):HashtableOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HashtableOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tableId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

keyDtype():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
}

valueDtype():TensorType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
}

static startHashtableOptions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTableId(builder:flatbuffers.Builder, tableId:number) {
  builder.addFieldInt32(0, tableId, 0);
}

static addKeyDtype(builder:flatbuffers.Builder, keyDtype:TensorType) {
  builder.addFieldInt8(1, keyDtype, TensorType.FLOAT32);
}

static addValueDtype(builder:flatbuffers.Builder, valueDtype:TensorType) {
  builder.addFieldInt8(2, valueDtype, TensorType.FLOAT32);
}

static endHashtableOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHashtableOptions(builder:flatbuffers.Builder, tableId:number, keyDtype:TensorType, valueDtype:TensorType):flatbuffers.Offset {
  HashtableOptions.startHashtableOptions(builder);
  HashtableOptions.addTableId(builder, tableId);
  HashtableOptions.addKeyDtype(builder, keyDtype);
  HashtableOptions.addValueDtype(builder, valueDtype);
  return HashtableOptions.endHashtableOptions(builder);
}

unpack(): HashtableOptionsT {
  return new HashtableOptionsT(
    this.tableId(),
    this.keyDtype(),
    this.valueDtype()
  );
}


unpackTo(_o: HashtableOptionsT): void {
  _o.tableId = this.tableId();
  _o.keyDtype = this.keyDtype();
  _o.valueDtype = this.valueDtype();
}
}

export class HashtableOptionsT {
constructor(
  public tableId: number = 0,
  public keyDtype: TensorType = TensorType.FLOAT32,
  public valueDtype: TensorType = TensorType.FLOAT32
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HashtableOptions.createHashtableOptions(builder,
    this.tableId,
    this.keyDtype,
    this.valueDtype
  );
}
}
