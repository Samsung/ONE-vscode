// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ReducerOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReducerOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReducerOptions(bb:flatbuffers.ByteBuffer, obj?:ReducerOptions):ReducerOptions {
  return (obj || new ReducerOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReducerOptions(bb:flatbuffers.ByteBuffer, obj?:ReducerOptions):ReducerOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReducerOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

keepDims():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startReducerOptions(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addKeepDims(builder:flatbuffers.Builder, keepDims:boolean) {
  builder.addFieldInt8(0, +keepDims, +false);
}

static endReducerOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReducerOptions(builder:flatbuffers.Builder, keepDims:boolean):flatbuffers.Offset {
  ReducerOptions.startReducerOptions(builder);
  ReducerOptions.addKeepDims(builder, keepDims);
  return ReducerOptions.endReducerOptions(builder);
}

unpack(): ReducerOptionsT {
  return new ReducerOptionsT(
    this.keepDims()
  );
}


unpackTo(_o: ReducerOptionsT): void {
  _o.keepDims = this.keepDims();
}
}

export class ReducerOptionsT {
constructor(
  public keepDims: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ReducerOptions.createReducerOptions(builder,
    this.keepDims
  );
}
}
