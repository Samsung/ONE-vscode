// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class LocalResponseNormalizationOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LocalResponseNormalizationOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLocalResponseNormalizationOptions(bb:flatbuffers.ByteBuffer, obj?:LocalResponseNormalizationOptions):LocalResponseNormalizationOptions {
  return (obj || new LocalResponseNormalizationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLocalResponseNormalizationOptions(bb:flatbuffers.ByteBuffer, obj?:LocalResponseNormalizationOptions):LocalResponseNormalizationOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LocalResponseNormalizationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

radius():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bias():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

alpha():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

beta():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startLocalResponseNormalizationOptions(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRadius(builder:flatbuffers.Builder, radius:number) {
  builder.addFieldInt32(0, radius, 0);
}

static addBias(builder:flatbuffers.Builder, bias:number) {
  builder.addFieldFloat32(1, bias, 0.0);
}

static addAlpha(builder:flatbuffers.Builder, alpha:number) {
  builder.addFieldFloat32(2, alpha, 0.0);
}

static addBeta(builder:flatbuffers.Builder, beta:number) {
  builder.addFieldFloat32(3, beta, 0.0);
}

static endLocalResponseNormalizationOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLocalResponseNormalizationOptions(builder:flatbuffers.Builder, radius:number, bias:number, alpha:number, beta:number):flatbuffers.Offset {
  LocalResponseNormalizationOptions.startLocalResponseNormalizationOptions(builder);
  LocalResponseNormalizationOptions.addRadius(builder, radius);
  LocalResponseNormalizationOptions.addBias(builder, bias);
  LocalResponseNormalizationOptions.addAlpha(builder, alpha);
  LocalResponseNormalizationOptions.addBeta(builder, beta);
  return LocalResponseNormalizationOptions.endLocalResponseNormalizationOptions(builder);
}

unpack(): LocalResponseNormalizationOptionsT {
  return new LocalResponseNormalizationOptionsT(
    this.radius(),
    this.bias(),
    this.alpha(),
    this.beta()
  );
}


unpackTo(_o: LocalResponseNormalizationOptionsT): void {
  _o.radius = this.radius();
  _o.bias = this.bias();
  _o.alpha = this.alpha();
  _o.beta = this.beta();
}
}

export class LocalResponseNormalizationOptionsT {
constructor(
  public radius: number = 0,
  public bias: number = 0.0,
  public alpha: number = 0.0,
  public beta: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return LocalResponseNormalizationOptions.createLocalResponseNormalizationOptions(builder,
    this.radius,
    this.bias,
    this.alpha,
    this.beta
  );
}
}
