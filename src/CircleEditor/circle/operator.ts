// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AbsOptions, AbsOptionsT } from '../circle/abs-options';
import { AddNOptions, AddNOptionsT } from '../circle/add-noptions';
import { AddOptions, AddOptionsT } from '../circle/add-options';
import { ArgMaxOptions, ArgMaxOptionsT } from '../circle/arg-max-options';
import { ArgMinOptions, ArgMinOptionsT } from '../circle/arg-min-options';
import { AssignVariableOptions, AssignVariableOptionsT } from '../circle/assign-variable-options';
import { BCQFullyConnectedOptions, BCQFullyConnectedOptionsT } from '../circle/bcqfully-connected-options';
import { BCQGatherOptions, BCQGatherOptionsT } from '../circle/bcqgather-options';
import { BatchMatMulOptions, BatchMatMulOptionsT } from '../circle/batch-mat-mul-options';
import { BatchToSpaceNDOptions, BatchToSpaceNDOptionsT } from '../circle/batch-to-space-ndoptions';
import { BidirectionalSequenceLSTMOptions, BidirectionalSequenceLSTMOptionsT } from '../circle/bidirectional-sequence-lstmoptions';
import { BidirectionalSequenceRNNOptions, BidirectionalSequenceRNNOptionsT } from '../circle/bidirectional-sequence-rnnoptions';
import { BroadcastToOptions, BroadcastToOptionsT } from '../circle/broadcast-to-options';
import { BuiltinOptions, unionToBuiltinOptions, unionListToBuiltinOptions } from '../circle/builtin-options';
import { CallOnceOptions, CallOnceOptionsT } from '../circle/call-once-options';
import { CallOptions, CallOptionsT } from '../circle/call-options';
import { CastOptions, CastOptionsT } from '../circle/cast-options';
import { ConcatEmbeddingsOptions, ConcatEmbeddingsOptionsT } from '../circle/concat-embeddings-options';
import { ConcatenationOptions, ConcatenationOptionsT } from '../circle/concatenation-options';
import { Conv2DOptions, Conv2DOptionsT } from '../circle/conv2doptions';
import { Conv3DOptions, Conv3DOptionsT } from '../circle/conv3doptions';
import { CosOptions, CosOptionsT } from '../circle/cos-options';
import { CumsumOptions, CumsumOptionsT } from '../circle/cumsum-options';
import { CustomOptionsFormat } from '../circle/custom-options-format';
import { DensifyOptions, DensifyOptionsT } from '../circle/densify-options';
import { DepthToSpaceOptions, DepthToSpaceOptionsT } from '../circle/depth-to-space-options';
import { DepthwiseConv2DOptions, DepthwiseConv2DOptionsT } from '../circle/depthwise-conv2doptions';
import { DequantizeOptions, DequantizeOptionsT } from '../circle/dequantize-options';
import { DivOptions, DivOptionsT } from '../circle/div-options';
import { EmbeddingLookupSparseOptions, EmbeddingLookupSparseOptionsT } from '../circle/embedding-lookup-sparse-options';
import { EqualOptions, EqualOptionsT } from '../circle/equal-options';
import { ExpOptions, ExpOptionsT } from '../circle/exp-options';
import { ExpandDimsOptions, ExpandDimsOptionsT } from '../circle/expand-dims-options';
import { FakeQuantOptions, FakeQuantOptionsT } from '../circle/fake-quant-options';
import { FillOptions, FillOptionsT } from '../circle/fill-options';
import { FloorDivOptions, FloorDivOptionsT } from '../circle/floor-div-options';
import { FloorModOptions, FloorModOptionsT } from '../circle/floor-mod-options';
import { FullyConnectedOptions, FullyConnectedOptionsT } from '../circle/fully-connected-options';
import { GatherNdOptions, GatherNdOptionsT } from '../circle/gather-nd-options';
import { GatherOptions, GatherOptionsT } from '../circle/gather-options';
import { GreaterEqualOptions, GreaterEqualOptionsT } from '../circle/greater-equal-options';
import { GreaterOptions, GreaterOptionsT } from '../circle/greater-options';
import { HardSwishOptions, HardSwishOptionsT } from '../circle/hard-swish-options';
import { HashtableFindOptions, HashtableFindOptionsT } from '../circle/hashtable-find-options';
import { HashtableImportOptions, HashtableImportOptionsT } from '../circle/hashtable-import-options';
import { HashtableOptions, HashtableOptionsT } from '../circle/hashtable-options';
import { HashtableSizeOptions, HashtableSizeOptionsT } from '../circle/hashtable-size-options';
import { IfOptions, IfOptionsT } from '../circle/if-options';
import { InstanceNormOptions, InstanceNormOptionsT } from '../circle/instance-norm-options';
import { L2NormOptions, L2NormOptionsT } from '../circle/l2norm-options';
import { LSHProjectionOptions, LSHProjectionOptionsT } from '../circle/lshprojection-options';
import { LSTMOptions, LSTMOptionsT } from '../circle/lstmoptions';
import { LeakyReluOptions, LeakyReluOptionsT } from '../circle/leaky-relu-options';
import { LessEqualOptions, LessEqualOptionsT } from '../circle/less-equal-options';
import { LessOptions, LessOptionsT } from '../circle/less-options';
import { LocalResponseNormalizationOptions, LocalResponseNormalizationOptionsT } from '../circle/local-response-normalization-options';
import { LogSoftmaxOptions, LogSoftmaxOptionsT } from '../circle/log-softmax-options';
import { LogicalAndOptions, LogicalAndOptionsT } from '../circle/logical-and-options';
import { LogicalNotOptions, LogicalNotOptionsT } from '../circle/logical-not-options';
import { LogicalOrOptions, LogicalOrOptionsT } from '../circle/logical-or-options';
import { MatrixDiagOptions, MatrixDiagOptionsT } from '../circle/matrix-diag-options';
import { MatrixSetDiagOptions, MatrixSetDiagOptionsT } from '../circle/matrix-set-diag-options';
import { MaximumMinimumOptions, MaximumMinimumOptionsT } from '../circle/maximum-minimum-options';
import { MirrorPadOptions, MirrorPadOptionsT } from '../circle/mirror-pad-options';
import { MulOptions, MulOptionsT } from '../circle/mul-options';
import { NegOptions, NegOptionsT } from '../circle/neg-options';
import { NonMaxSuppressionV4Options, NonMaxSuppressionV4OptionsT } from '../circle/non-max-suppression-v4options';
import { NonMaxSuppressionV5Options, NonMaxSuppressionV5OptionsT } from '../circle/non-max-suppression-v5options';
import { NotEqualOptions, NotEqualOptionsT } from '../circle/not-equal-options';
import { OneHotOptions, OneHotOptionsT } from '../circle/one-hot-options';
import { PackOptions, PackOptionsT } from '../circle/pack-options';
import { PadOptions, PadOptionsT } from '../circle/pad-options';
import { PadV2Options, PadV2OptionsT } from '../circle/pad-v2options';
import { Pool2DOptions, Pool2DOptionsT } from '../circle/pool2doptions';
import { PowOptions, PowOptionsT } from '../circle/pow-options';
import { QuantizeOptions, QuantizeOptionsT } from '../circle/quantize-options';
import { RNNOptions, RNNOptionsT } from '../circle/rnnoptions';
import { RandomOptions, RandomOptionsT } from '../circle/random-options';
import { RangeOptions, RangeOptionsT } from '../circle/range-options';
import { RankOptions, RankOptionsT } from '../circle/rank-options';
import { ReadVariableOptions, ReadVariableOptionsT } from '../circle/read-variable-options';
import { ReducerOptions, ReducerOptionsT } from '../circle/reducer-options';
import { ReshapeOptions, ReshapeOptionsT } from '../circle/reshape-options';
import { ResizeBilinearOptions, ResizeBilinearOptionsT } from '../circle/resize-bilinear-options';
import { ResizeNearestNeighborOptions, ResizeNearestNeighborOptionsT } from '../circle/resize-nearest-neighbor-options';
import { ReverseSequenceOptions, ReverseSequenceOptionsT } from '../circle/reverse-sequence-options';
import { ReverseV2Options, ReverseV2OptionsT } from '../circle/reverse-v2options';
import { Rfft2dOptions, Rfft2dOptionsT } from '../circle/rfft2d-options';
import { SVDFOptions, SVDFOptionsT } from '../circle/svdfoptions';
import { ScatterNdOptions, ScatterNdOptionsT } from '../circle/scatter-nd-options';
import { SegmentSumOptions, SegmentSumOptionsT } from '../circle/segment-sum-options';
import { SelectOptions, SelectOptionsT } from '../circle/select-options';
import { SelectV2Options, SelectV2OptionsT } from '../circle/select-v2options';
import { SequenceRNNOptions, SequenceRNNOptionsT } from '../circle/sequence-rnnoptions';
import { ShapeOptions, ShapeOptionsT } from '../circle/shape-options';
import { SkipGramOptions, SkipGramOptionsT } from '../circle/skip-gram-options';
import { SliceOptions, SliceOptionsT } from '../circle/slice-options';
import { SoftmaxOptions, SoftmaxOptionsT } from '../circle/softmax-options';
import { SpaceToBatchNDOptions, SpaceToBatchNDOptionsT } from '../circle/space-to-batch-ndoptions';
import { SpaceToDepthOptions, SpaceToDepthOptionsT } from '../circle/space-to-depth-options';
import { SparseToDenseOptions, SparseToDenseOptionsT } from '../circle/sparse-to-dense-options';
import { SplitOptions, SplitOptionsT } from '../circle/split-options';
import { SplitVOptions, SplitVOptionsT } from '../circle/split-voptions';
import { SquareOptions, SquareOptionsT } from '../circle/square-options';
import { SquaredDifferenceOptions, SquaredDifferenceOptionsT } from '../circle/squared-difference-options';
import { SqueezeOptions, SqueezeOptionsT } from '../circle/squeeze-options';
import { StridedSliceOptions, StridedSliceOptionsT } from '../circle/strided-slice-options';
import { SubOptions, SubOptionsT } from '../circle/sub-options';
import { TileOptions, TileOptionsT } from '../circle/tile-options';
import { TopKV2Options, TopKV2OptionsT } from '../circle/top-kv2options';
import { TransposeConvOptions, TransposeConvOptionsT } from '../circle/transpose-conv-options';
import { TransposeOptions, TransposeOptionsT } from '../circle/transpose-options';
import { UnidirectionalSequenceLSTMOptions, UnidirectionalSequenceLSTMOptionsT } from '../circle/unidirectional-sequence-lstmoptions';
import { UniqueOptions, UniqueOptionsT } from '../circle/unique-options';
import { UnpackOptions, UnpackOptionsT } from '../circle/unpack-options';
import { VarHandleOptions, VarHandleOptionsT } from '../circle/var-handle-options';
import { WhereOptions, WhereOptionsT } from '../circle/where-options';
import { WhileOptions, WhileOptionsT } from '../circle/while-options';
import { ZerosLikeOptions, ZerosLikeOptionsT } from '../circle/zeros-like-options';


export class Operator {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Operator {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOperator(bb:flatbuffers.ByteBuffer, obj?:Operator):Operator {
  return (obj || new Operator()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOperator(bb:flatbuffers.ByteBuffer, obj?:Operator):Operator {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Operator()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

opcodeIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

inputs(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

inputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inputsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

outputs(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

outputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

outputsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

builtinOptionsType():BuiltinOptions {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BuiltinOptions.NONE;
}

builtinOptions<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

customOptions(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

customOptionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

customOptionsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

customOptionsFormat():CustomOptionsFormat {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CustomOptionsFormat.FLEXBUFFERS;
}

mutatingVariableInputs(index: number):boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : false;
}

mutatingVariableInputsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mutatingVariableInputsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

intermediates(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

intermediatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

intermediatesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startOperator(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addOpcodeIndex(builder:flatbuffers.Builder, opcodeIndex:number) {
  builder.addFieldInt32(0, opcodeIndex, 0);
}

static addInputs(builder:flatbuffers.Builder, inputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, inputsOffset, 0);
}

static createInputsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createInputsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createInputsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOutputs(builder:flatbuffers.Builder, outputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, outputsOffset, 0);
}

static createOutputsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createOutputsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createOutputsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startOutputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBuiltinOptionsType(builder:flatbuffers.Builder, builtinOptionsType:BuiltinOptions) {
  builder.addFieldInt8(3, builtinOptionsType, BuiltinOptions.NONE);
}

static addBuiltinOptions(builder:flatbuffers.Builder, builtinOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, builtinOptionsOffset, 0);
}

static addCustomOptions(builder:flatbuffers.Builder, customOptionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, customOptionsOffset, 0);
}

static createCustomOptionsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCustomOptionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCustomOptionsFormat(builder:flatbuffers.Builder, customOptionsFormat:CustomOptionsFormat) {
  builder.addFieldInt8(6, customOptionsFormat, CustomOptionsFormat.FLEXBUFFERS);
}

static addMutatingVariableInputs(builder:flatbuffers.Builder, mutatingVariableInputsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, mutatingVariableInputsOffset, 0);
}

static createMutatingVariableInputsVector(builder:flatbuffers.Builder, data:boolean[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(+data[i]!);
  }
  return builder.endVector();
}

static startMutatingVariableInputsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addIntermediates(builder:flatbuffers.Builder, intermediatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, intermediatesOffset, 0);
}

static createIntermediatesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createIntermediatesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createIntermediatesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startIntermediatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOperator(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOperator(builder:flatbuffers.Builder, opcodeIndex:number, inputsOffset:flatbuffers.Offset, outputsOffset:flatbuffers.Offset, builtinOptionsType:BuiltinOptions, builtinOptionsOffset:flatbuffers.Offset, customOptionsOffset:flatbuffers.Offset, customOptionsFormat:CustomOptionsFormat, mutatingVariableInputsOffset:flatbuffers.Offset, intermediatesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Operator.startOperator(builder);
  Operator.addOpcodeIndex(builder, opcodeIndex);
  Operator.addInputs(builder, inputsOffset);
  Operator.addOutputs(builder, outputsOffset);
  Operator.addBuiltinOptionsType(builder, builtinOptionsType);
  Operator.addBuiltinOptions(builder, builtinOptionsOffset);
  Operator.addCustomOptions(builder, customOptionsOffset);
  Operator.addCustomOptionsFormat(builder, customOptionsFormat);
  Operator.addMutatingVariableInputs(builder, mutatingVariableInputsOffset);
  Operator.addIntermediates(builder, intermediatesOffset);
  return Operator.endOperator(builder);
}

unpack(): OperatorT {
  return new OperatorT(
    this.opcodeIndex(),
    this.bb!.createScalarList(this.inputs.bind(this), this.inputsLength()),
    this.bb!.createScalarList(this.outputs.bind(this), this.outputsLength()),
    this.builtinOptionsType(),
    (() => {
      let temp = unionToBuiltinOptions(this.builtinOptionsType(), this.builtinOptions.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.bb!.createScalarList(this.customOptions.bind(this), this.customOptionsLength()),
    this.customOptionsFormat(),
    this.bb!.createScalarList(this.mutatingVariableInputs.bind(this), this.mutatingVariableInputsLength()),
    this.bb!.createScalarList(this.intermediates.bind(this), this.intermediatesLength())
  );
}


unpackTo(_o: OperatorT): void {
  _o.opcodeIndex = this.opcodeIndex();
  _o.inputs = this.bb!.createScalarList(this.inputs.bind(this), this.inputsLength());
  _o.outputs = this.bb!.createScalarList(this.outputs.bind(this), this.outputsLength());
  _o.builtinOptionsType = this.builtinOptionsType();
  _o.builtinOptions = (() => {
      let temp = unionToBuiltinOptions(this.builtinOptionsType(), this.builtinOptions.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.customOptions = this.bb!.createScalarList(this.customOptions.bind(this), this.customOptionsLength());
  _o.customOptionsFormat = this.customOptionsFormat();
  _o.mutatingVariableInputs = this.bb!.createScalarList(this.mutatingVariableInputs.bind(this), this.mutatingVariableInputsLength());
  _o.intermediates = this.bb!.createScalarList(this.intermediates.bind(this), this.intermediatesLength());
}
}

export class OperatorT {
constructor(
  public opcodeIndex: number = 0,
  public inputs: (number)[] = [],
  public outputs: (number)[] = [],
  public builtinOptionsType: BuiltinOptions = BuiltinOptions.NONE,
  public builtinOptions: AbsOptionsT|AddNOptionsT|AddOptionsT|ArgMaxOptionsT|ArgMinOptionsT|AssignVariableOptionsT|BCQFullyConnectedOptionsT|BCQGatherOptionsT|BatchMatMulOptionsT|BatchToSpaceNDOptionsT|BidirectionalSequenceLSTMOptionsT|BidirectionalSequenceRNNOptionsT|BroadcastToOptionsT|CallOnceOptionsT|CallOptionsT|CastOptionsT|ConcatEmbeddingsOptionsT|ConcatenationOptionsT|Conv2DOptionsT|Conv3DOptionsT|CosOptionsT|CumsumOptionsT|DensifyOptionsT|DepthToSpaceOptionsT|DepthwiseConv2DOptionsT|DequantizeOptionsT|DivOptionsT|EmbeddingLookupSparseOptionsT|EqualOptionsT|ExpOptionsT|ExpandDimsOptionsT|FakeQuantOptionsT|FillOptionsT|FloorDivOptionsT|FloorModOptionsT|FullyConnectedOptionsT|GatherNdOptionsT|GatherOptionsT|GreaterEqualOptionsT|GreaterOptionsT|HardSwishOptionsT|HashtableFindOptionsT|HashtableImportOptionsT|HashtableOptionsT|HashtableSizeOptionsT|IfOptionsT|InstanceNormOptionsT|L2NormOptionsT|LSHProjectionOptionsT|LSTMOptionsT|LeakyReluOptionsT|LessEqualOptionsT|LessOptionsT|LocalResponseNormalizationOptionsT|LogSoftmaxOptionsT|LogicalAndOptionsT|LogicalNotOptionsT|LogicalOrOptionsT|MatrixDiagOptionsT|MatrixSetDiagOptionsT|MaximumMinimumOptionsT|MirrorPadOptionsT|MulOptionsT|NegOptionsT|NonMaxSuppressionV4OptionsT|NonMaxSuppressionV5OptionsT|NotEqualOptionsT|OneHotOptionsT|PackOptionsT|PadOptionsT|PadV2OptionsT|Pool2DOptionsT|PowOptionsT|QuantizeOptionsT|RNNOptionsT|RandomOptionsT|RangeOptionsT|RankOptionsT|ReadVariableOptionsT|ReducerOptionsT|ReshapeOptionsT|ResizeBilinearOptionsT|ResizeNearestNeighborOptionsT|ReverseSequenceOptionsT|ReverseV2OptionsT|Rfft2dOptionsT|SVDFOptionsT|ScatterNdOptionsT|SegmentSumOptionsT|SelectOptionsT|SelectV2OptionsT|SequenceRNNOptionsT|ShapeOptionsT|SkipGramOptionsT|SliceOptionsT|SoftmaxOptionsT|SpaceToBatchNDOptionsT|SpaceToDepthOptionsT|SparseToDenseOptionsT|SplitOptionsT|SplitVOptionsT|SquareOptionsT|SquaredDifferenceOptionsT|SqueezeOptionsT|StridedSliceOptionsT|SubOptionsT|TileOptionsT|TopKV2OptionsT|TransposeConvOptionsT|TransposeOptionsT|UnidirectionalSequenceLSTMOptionsT|UniqueOptionsT|UnpackOptionsT|VarHandleOptionsT|WhereOptionsT|WhileOptionsT|ZerosLikeOptionsT|null = null,
  public customOptions: (number)[] = [],
  public customOptionsFormat: CustomOptionsFormat = CustomOptionsFormat.FLEXBUFFERS,
  public mutatingVariableInputs: (boolean)[] = [],
  public intermediates: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const inputs = Operator.createInputsVector(builder, this.inputs);
  const outputs = Operator.createOutputsVector(builder, this.outputs);
  const builtinOptions = builder.createObjectOffset(this.builtinOptions);
  const customOptions = Operator.createCustomOptionsVector(builder, this.customOptions);
  const mutatingVariableInputs = Operator.createMutatingVariableInputsVector(builder, this.mutatingVariableInputs);
  const intermediates = Operator.createIntermediatesVector(builder, this.intermediates);

  return Operator.createOperator(builder,
    this.opcodeIndex,
    inputs,
    outputs,
    this.builtinOptionsType,
    builtinOptions,
    customOptions,
    this.customOptionsFormat,
    mutatingVariableInputs,
    intermediates
  );
}
}
