// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ActivationFunctionType } from '../circle/activation-function-type';


export class ConcatenationOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConcatenationOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConcatenationOptions(bb:flatbuffers.ByteBuffer, obj?:ConcatenationOptions):ConcatenationOptions {
  return (obj || new ConcatenationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConcatenationOptions(bb:flatbuffers.ByteBuffer, obj?:ConcatenationOptions):ConcatenationOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConcatenationOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

axis():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fusedActivationFunction():ActivationFunctionType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ActivationFunctionType.NONE;
}

static startConcatenationOptions(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAxis(builder:flatbuffers.Builder, axis:number) {
  builder.addFieldInt32(0, axis, 0);
}

static addFusedActivationFunction(builder:flatbuffers.Builder, fusedActivationFunction:ActivationFunctionType) {
  builder.addFieldInt8(1, fusedActivationFunction, ActivationFunctionType.NONE);
}

static endConcatenationOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConcatenationOptions(builder:flatbuffers.Builder, axis:number, fusedActivationFunction:ActivationFunctionType):flatbuffers.Offset {
  ConcatenationOptions.startConcatenationOptions(builder);
  ConcatenationOptions.addAxis(builder, axis);
  ConcatenationOptions.addFusedActivationFunction(builder, fusedActivationFunction);
  return ConcatenationOptions.endConcatenationOptions(builder);
}

unpack(): ConcatenationOptionsT {
  return new ConcatenationOptionsT(
    this.axis(),
    this.fusedActivationFunction()
  );
}


unpackTo(_o: ConcatenationOptionsT): void {
  _o.axis = this.axis();
  _o.fusedActivationFunction = this.fusedActivationFunction();
}
}

export class ConcatenationOptionsT {
constructor(
  public axis: number = 0,
  public fusedActivationFunction: ActivationFunctionType = ActivationFunctionType.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ConcatenationOptions.createConcatenationOptions(builder,
    this.axis,
    this.fusedActivationFunction
  );
}
}
