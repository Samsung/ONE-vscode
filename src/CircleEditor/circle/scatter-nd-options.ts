// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ScatterNdOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScatterNdOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScatterNdOptions(bb:flatbuffers.ByteBuffer, obj?:ScatterNdOptions):ScatterNdOptions {
  return (obj || new ScatterNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScatterNdOptions(bb:flatbuffers.ByteBuffer, obj?:ScatterNdOptions):ScatterNdOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScatterNdOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startScatterNdOptions(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endScatterNdOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScatterNdOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  ScatterNdOptions.startScatterNdOptions(builder);
  return ScatterNdOptions.endScatterNdOptions(builder);
}

unpack(): ScatterNdOptionsT {
  return new ScatterNdOptionsT();
}


unpackTo(_o: ScatterNdOptionsT): void {}
}

export class ScatterNdOptionsT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ScatterNdOptions.createScatterNdOptions(builder);
}
}
