// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class NegOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NegOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNegOptions(bb:flatbuffers.ByteBuffer, obj?:NegOptions):NegOptions {
  return (obj || new NegOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNegOptions(bb:flatbuffers.ByteBuffer, obj?:NegOptions):NegOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NegOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startNegOptions(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endNegOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNegOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  NegOptions.startNegOptions(builder);
  return NegOptions.endNegOptions(builder);
}

unpack(): NegOptionsT {
  return new NegOptionsT();
}


unpackTo(_o: NegOptionsT): void {}
}

export class NegOptionsT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return NegOptions.createNegOptions(builder);
}
}
